// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

package frequency

import (
	"testing"
	"math"
	"github.com/google/go-cmp/cmp"
)

func withinTolerance() cmp.Option {
	return cmp.Comparer(func(x, y float64) bool {
		delta := math.Abs(x - y)
		mean := math.Abs(x + y) / 2.0
		return delta / mean < 0.01
	})
}
func TestConvertKnownGigahertzToHertz(t * testing.T) {
    if !cmp.Equal(Gigahertz.ToHertz(0.009), 9000000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9000000.0, Gigahertz.ToHertz(0.009));
    }
    if !cmp.Equal(Gigahertz.ToHertz(0.000123), 123000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 123000.0, Gigahertz.ToHertz(0.000123));
    }
    if !cmp.Equal(Gigahertz.ToHertz(0.0000456), 45600.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 45600.0, Gigahertz.ToHertz(0.0000456));
    }
}

func TestConvertKnownGigahertzToKilohertz(t * testing.T) {
    if !cmp.Equal(Gigahertz.ToKilohertz(0.009), 9000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9000.0, Gigahertz.ToKilohertz(0.009));
    }
    if !cmp.Equal(Gigahertz.ToKilohertz(1e-5), 10.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 10.0, Gigahertz.ToKilohertz(1e-5));
    }
    if !cmp.Equal(Gigahertz.ToKilohertz(0.000065), 65.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 65.0, Gigahertz.ToKilohertz(0.000065));
    }
}

func TestConvertKnownGigahertzToMegahertz(t * testing.T) {
    if !cmp.Equal(Gigahertz.ToMegahertz(0.9), 900.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 900.0, Gigahertz.ToMegahertz(0.9));
    }
    if !cmp.Equal(Gigahertz.ToMegahertz(0.0123), 12.3, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12.3, Gigahertz.ToMegahertz(0.0123));
    }
    if !cmp.Equal(Gigahertz.ToMegahertz(5.0), 5000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5000.0, Gigahertz.ToMegahertz(5.0));
    }
}

func TestConvertKnownHertzToKilohertz(t * testing.T) {
    if !cmp.Equal(Hertz.ToKilohertz(800.0), 0.8, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.8, Hertz.ToKilohertz(800.0));
    }
    if !cmp.Equal(Hertz.ToKilohertz(1506.9), 1.5069, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.5069, Hertz.ToKilohertz(1506.9));
    }
    if !cmp.Equal(Hertz.ToKilohertz(5000.0), 5.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.0, Hertz.ToKilohertz(5000.0));
    }
}

func TestConvertKnownHertzToMegahertz(t * testing.T) {
    if !cmp.Equal(Hertz.ToMegahertz(900009.0), 0.900009, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.900009, Hertz.ToMegahertz(900009.0));
    }
    if !cmp.Equal(Hertz.ToMegahertz(160000.0), 0.16, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.16, Hertz.ToMegahertz(160000.0));
    }
    if !cmp.Equal(Hertz.ToMegahertz(888888.0), 0.888888, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.888888, Hertz.ToMegahertz(888888.0));
    }
}

func TestConvertKnownHertzToGigahertz(t * testing.T) {
    if !cmp.Equal(Hertz.ToGigahertz(100900900.0), 0.1009009, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.1009009, Hertz.ToGigahertz(100900900.0));
    }
    if !cmp.Equal(Hertz.ToGigahertz(9.0), 9e-9, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9e-9, Hertz.ToGigahertz(9.0));
    }
    if !cmp.Equal(Hertz.ToGigahertz(90909090.0), 0.09090909, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.09090909, Hertz.ToGigahertz(90909090.0));
    }
}

func TestConvertKnownKilohertzToHertz(t * testing.T) {
    if !cmp.Equal(Kilohertz.ToHertz(90.90909), 90909.09, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 90909.09, Kilohertz.ToHertz(90.90909));
    }
    if !cmp.Equal(Kilohertz.ToHertz(0.12345), 123.45, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 123.45, Kilohertz.ToHertz(0.12345));
    }
    if !cmp.Equal(Kilohertz.ToHertz(500.0), 500000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 500000.0, Kilohertz.ToHertz(500.0));
    }
}

func TestConvertKnownKilohertzToMegahertz(t * testing.T) {
    if !cmp.Equal(Kilohertz.ToMegahertz(909.0), 0.909, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.909, Kilohertz.ToMegahertz(909.0));
    }
    if !cmp.Equal(Kilohertz.ToMegahertz(123456.0), 123.456, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 123.456, Kilohertz.ToMegahertz(123456.0));
    }
    if !cmp.Equal(Kilohertz.ToMegahertz(900.0), 0.9, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.9, Kilohertz.ToMegahertz(900.0));
    }
}

func TestConvertKnownKilohertzToGigahertz(t * testing.T) {
    if !cmp.Equal(Kilohertz.ToGigahertz(987654.0), 0.987654, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.987654, Kilohertz.ToGigahertz(987654.0));
    }
    if !cmp.Equal(Kilohertz.ToGigahertz(10000.0), 0.01, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.01, Kilohertz.ToGigahertz(10000.0));
    }
    if !cmp.Equal(Kilohertz.ToGigahertz(90090.0), 0.09009, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.09009, Kilohertz.ToGigahertz(90090.0));
    }
}

func TestConvertKnownMegahertzToHertz(t * testing.T) {
    if !cmp.Equal(Megahertz.ToHertz(0.9), 900000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 900000.0, Megahertz.ToHertz(0.9));
    }
    if !cmp.Equal(Megahertz.ToHertz(0.001), 1000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1000.0, Megahertz.ToHertz(0.001));
    }
    if !cmp.Equal(Megahertz.ToHertz(0.091), 91000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 91000.0, Megahertz.ToHertz(0.091));
    }
}

func TestConvertKnownMegahertzToKilohertz(t * testing.T) {
    if !cmp.Equal(Megahertz.ToKilohertz(0.87), 870.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 870.0, Megahertz.ToKilohertz(0.87));
    }
    if !cmp.Equal(Megahertz.ToKilohertz(12.0), 12000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12000.0, Megahertz.ToKilohertz(12.0));
    }
    if !cmp.Equal(Megahertz.ToKilohertz(88.1), 88100.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 88100.0, Megahertz.ToKilohertz(88.1));
    }
}

func TestConvertKnownMegahertzToGigahertz(t * testing.T) {
    if !cmp.Equal(Megahertz.ToGigahertz(798.0), 0.798, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.798, Megahertz.ToGigahertz(798.0));
    }
    if !cmp.Equal(Megahertz.ToGigahertz(900.0), 0.9, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.9, Megahertz.ToGigahertz(900.0));
    }
    if !cmp.Equal(Megahertz.ToGigahertz(579.1), 0.5791, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.5791, Megahertz.ToGigahertz(579.1));
    }
}

