// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

package magnetomotiveforce

import (
	"testing"
	"math"
	"github.com/google/go-cmp/cmp"
)

func withinTolerance() cmp.Option {
	return cmp.Comparer(func(x, y float64) bool {
		delta := math.Abs(x - y)
		mean := math.Abs(x + y) / 2.0
		return delta / mean < 0.01
	})
}
func TestConvertKnownAmpereturnsToGilberts(t * testing.T) {
    if !cmp.Equal(Ampereturns.ToGilberts(400.0), 502.6548248, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 502.6548248, Ampereturns.ToGilberts(400.0));
    }
    if !cmp.Equal(Ampereturns.ToGilberts(6.7), 8.4194683154, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8.4194683154, Ampereturns.ToGilberts(6.7));
    }
    if !cmp.Equal(Ampereturns.ToGilberts(0.8), 1.0053096496, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.0053096496, Ampereturns.ToGilberts(0.8));
    }
}

func TestConvertKnownGilbertsToAmpereturns(t * testing.T) {
    if !cmp.Equal(Gilberts.ToAmpereturns(0.8), 0.6366197721, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.6366197721, Gilberts.ToAmpereturns(0.8));
    }
    if !cmp.Equal(Gilberts.ToAmpereturns(67.0), 53.316905912, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 53.316905912, Gilberts.ToAmpereturns(67.0));
    }
    if !cmp.Equal(Gilberts.ToAmpereturns(2.3), 1.8302818447, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.8302818447, Gilberts.ToAmpereturns(2.3));
    }
}

