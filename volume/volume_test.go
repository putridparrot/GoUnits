// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

package volume

import (
	"testing"
	"math"
	"github.com/google/go-cmp/cmp"
)

func withinTolerance() cmp.Option {
	return cmp.Comparer(func(x, y float64) bool {
		delta := math.Abs(x - y)
		mean := math.Abs(x + y) / 2.0
		return delta / mean < 0.01
	})
}
func TestConvertKnownCubicFeetToMillilitres(t * testing.T) {
    if !cmp.Equal(CubicFeet.ToMillilitres(0.08), 2265.348, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2265.348, CubicFeet.ToMillilitres(0.08));
    }
    if !cmp.Equal(CubicFeet.ToMillilitres(6.0), 169900.79, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 169900.79, CubicFeet.ToMillilitres(6.0));
    }
    if !cmp.Equal(CubicFeet.ToMillilitres(0.2393275), 6776.988, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6776.988, CubicFeet.ToMillilitres(0.2393275));
    }
}

func TestConvertKnownCubicFeetToLitres(t * testing.T) {
    if !cmp.Equal(CubicFeet.ToLitres(0.3), 8.49505, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8.49505, CubicFeet.ToLitres(0.3));
    }
    if !cmp.Equal(CubicFeet.ToLitres(6.0), 169.901, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 169.901, CubicFeet.ToLitres(6.0));
    }
    if !cmp.Equal(CubicFeet.ToLitres(56.0), 1585.74, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1585.74, CubicFeet.ToLitres(56.0));
    }
}

func TestConvertKnownCubicFeetToKilolitres(t * testing.T) {
    if !cmp.Equal(CubicFeet.ToKilolitres(300.0), 8.49505, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8.49505, CubicFeet.ToKilolitres(300.0));
    }
    if !cmp.Equal(CubicFeet.ToKilolitres(141.259), 4.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.0, CubicFeet.ToKilolitres(141.259));
    }
    if !cmp.Equal(CubicFeet.ToKilolitres(111.0), 3.14317, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.14317, CubicFeet.ToKilolitres(111.0));
    }
}

func TestConvertKnownCubicFeetToTeaspoons(t * testing.T) {
    if !cmp.Equal(CubicFeet.ToTeaspoons(0.3), 1435.12, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1435.12, CubicFeet.ToTeaspoons(0.3));
    }
    if !cmp.Equal(CubicFeet.ToTeaspoons(4.0), 19134.95, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 19134.95, CubicFeet.ToTeaspoons(4.0));
    }
    if !cmp.Equal(CubicFeet.ToTeaspoons(67.0), 320510.579, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 320510.579, CubicFeet.ToTeaspoons(67.0));
    }
}

func TestConvertKnownCubicFeetToTablespoons(t * testing.T) {
    if !cmp.Equal(CubicFeet.ToTablespoons(0.7), 1116.21, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1116.21, CubicFeet.ToTablespoons(0.7));
    }
    if !cmp.Equal(CubicFeet.ToTablespoons(1.1), 1754.04, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1754.04, CubicFeet.ToTablespoons(1.1));
    }
    if !cmp.Equal(CubicFeet.ToTablespoons(0.494174), 788.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 788.0, CubicFeet.ToTablespoons(0.494174));
    }
}

func TestConvertKnownCubicFeetToQuarts(t * testing.T) {
    if !cmp.Equal(CubicFeet.ToQuarts(0.6), 14.9492, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 14.9492, CubicFeet.ToQuarts(0.6));
    }
    if !cmp.Equal(CubicFeet.ToQuarts(0.20068), 5.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.0, CubicFeet.ToQuarts(0.20068));
    }
    if !cmp.Equal(CubicFeet.ToQuarts(0.301019), 7.5, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.5, CubicFeet.ToQuarts(0.301019));
    }
}

func TestConvertKnownCubicFeetToPints(t * testing.T) {
    if !cmp.Equal(CubicFeet.ToPints(0.6), 29.8984, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 29.8984, CubicFeet.ToPints(0.6));
    }
    if !cmp.Equal(CubicFeet.ToPints(0.88299), 44.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 44.0, CubicFeet.ToPints(0.88299));
    }
    if !cmp.Equal(CubicFeet.ToPints(18.0612), 900.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 900.0, CubicFeet.ToPints(18.0612));
    }
}

func TestConvertKnownCubicFeetToGallons(t * testing.T) {
    if !cmp.Equal(CubicFeet.ToGallons(3.0), 18.6865, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 18.6865, CubicFeet.ToGallons(3.0));
    }
    if !cmp.Equal(CubicFeet.ToGallons(2.08707), 13.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 13.0, CubicFeet.ToGallons(2.08707));
    }
    if !cmp.Equal(CubicFeet.ToGallons(14.1278), 88.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 88.0, CubicFeet.ToGallons(14.1278));
    }
}

func TestConvertKnownCubicFeetToFluidOunces(t * testing.T) {
    if !cmp.Equal(CubicFeet.ToFluidOunces(14.0), 13952.6, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 13952.6, CubicFeet.ToFluidOunces(14.0));
    }
    if !cmp.Equal(CubicFeet.ToFluidOunces(7.0), 6976.3, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6976.3, CubicFeet.ToFluidOunces(7.0));
    }
    if !cmp.Equal(CubicFeet.ToFluidOunces(0.34777769), 346.6, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 346.6, CubicFeet.ToFluidOunces(0.34777769));
    }
}

func TestConvertKnownCubicFeetToUSTeaspoons(t * testing.T) {
    if !cmp.Equal(CubicFeet.ToUSTeaspoons(5.0), 28725.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 28725.2, CubicFeet.ToUSTeaspoons(5.0));
    }
    if !cmp.Equal(CubicFeet.ToUSTeaspoons(0.4), 2298.02, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2298.02, CubicFeet.ToUSTeaspoons(0.4));
    }
    if !cmp.Equal(CubicFeet.ToUSTeaspoons(9.2), 52854.3679, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 52854.3679, CubicFeet.ToUSTeaspoons(9.2));
    }
}

func TestConvertKnownCubicFeetToUSTablespoons(t * testing.T) {
    if !cmp.Equal(CubicFeet.ToUSTablespoons(1.4), 2681.02, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2681.02, CubicFeet.ToUSTablespoons(1.4));
    }
    if !cmp.Equal(CubicFeet.ToUSTablespoons(4.0), 7660.04, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7660.04, CubicFeet.ToUSTablespoons(4.0));
    }
    if !cmp.Equal(CubicFeet.ToUSTablespoons(0.6443821), 1234.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1234.0, CubicFeet.ToUSTablespoons(0.6443821));
    }
}

func TestConvertKnownCubicFeetToUSQuarts(t * testing.T) {
    if !cmp.Equal(CubicFeet.ToUSQuarts(6.0), 179.532, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 179.532, CubicFeet.ToUSQuarts(6.0));
    }
    if !cmp.Equal(CubicFeet.ToUSQuarts(12.0), 359.065, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 359.065, CubicFeet.ToUSQuarts(12.0));
    }
    if !cmp.Equal(CubicFeet.ToUSQuarts(25.9674), 777.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 777.0, CubicFeet.ToUSQuarts(25.9674));
    }
}

func TestConvertKnownCubicFeetToUSPints(t * testing.T) {
    if !cmp.Equal(CubicFeet.ToUSPints(6.9), 412.925, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 412.925, CubicFeet.ToUSPints(6.9));
    }
    if !cmp.Equal(CubicFeet.ToUSPints(23.0), 1376.42, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1376.42, CubicFeet.ToUSPints(23.0));
    }
    if !cmp.Equal(CubicFeet.ToUSPints(14.8385), 888.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 888.0, CubicFeet.ToUSPints(14.8385));
    }
}

func TestConvertKnownCubicFeetToUSGallons(t * testing.T) {
    if !cmp.Equal(CubicFeet.ToUSGallons(77.0), 576.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 576.0, CubicFeet.ToUSGallons(77.0));
    }
    if !cmp.Equal(CubicFeet.ToUSGallons(45.0), 336.623, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 336.623, CubicFeet.ToUSGallons(45.0));
    }
    if !cmp.Equal(CubicFeet.ToUSGallons(4.0), 29.9221, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 29.9221, CubicFeet.ToUSGallons(4.0));
    }
}

func TestConvertKnownCubicFeetToUSFluidOunces(t * testing.T) {
    if !cmp.Equal(CubicFeet.ToUSFluidOunces(20.0), 19150.119, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 19150.119, CubicFeet.ToUSFluidOunces(20.0));
    }
    if !cmp.Equal(CubicFeet.ToUSFluidOunces(0.359266), 344.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 344.0, CubicFeet.ToUSFluidOunces(0.359266));
    }
    if !cmp.Equal(CubicFeet.ToUSFluidOunces(0.699734), 670.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 670.0, CubicFeet.ToUSFluidOunces(0.699734));
    }
}

func TestConvertKnownCubicFeetToUSCups(t * testing.T) {
    if !cmp.Equal(CubicFeet.ToUSCups(77.0), 9084.99, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9084.99, CubicFeet.ToUSCups(77.0));
    }
    if !cmp.Equal(CubicFeet.ToUSCups(8.0), 943.895, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 943.895, CubicFeet.ToUSCups(8.0));
    }
    if !cmp.Equal(CubicFeet.ToUSCups(4.79714), 566.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 566.0, CubicFeet.ToUSCups(4.79714));
    }
}

func TestConvertKnownCubicFeetToCubicMetres(t * testing.T) {
    if !cmp.Equal(CubicFeet.ToCubicMetres(28.2517), 0.8, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.8, CubicFeet.ToCubicMetres(28.2517));
    }
    if !cmp.Equal(CubicFeet.ToCubicMetres(45.0), 1.27426, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.27426, CubicFeet.ToCubicMetres(45.0));
    }
    if !cmp.Equal(CubicFeet.ToCubicMetres(2719.23), 77.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 77.0, CubicFeet.ToCubicMetres(2719.23));
    }
}

func TestConvertKnownCubicFeetToCubicInches(t * testing.T) {
    if !cmp.Equal(CubicFeet.ToCubicInches(6.8), 11750.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 11750.4, CubicFeet.ToCubicInches(6.8));
    }
    if !cmp.Equal(CubicFeet.ToCubicInches(5666.0), 9790848.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9790848.0, CubicFeet.ToCubicInches(5666.0));
    }
    if !cmp.Equal(CubicFeet.ToCubicInches(0.7), 1209.6, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1209.6, CubicFeet.ToCubicInches(0.7));
    }
}

func TestConvertKnownCubicFeetToOilBarrels(t * testing.T) {
    if !cmp.Equal(CubicFeet.ToOilBarrels(67.0), 11.9332, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 11.9332, CubicFeet.ToOilBarrels(67.0));
    }
    if !cmp.Equal(CubicFeet.ToOilBarrels(44.0), 7.83673, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.83673, CubicFeet.ToOilBarrels(44.0));
    }
    if !cmp.Equal(CubicFeet.ToOilBarrels(67.375), 12.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12.0, CubicFeet.ToOilBarrels(67.375));
    }
}

func TestConvertKnownCubicInchesToMillilitres(t * testing.T) {
    if !cmp.Equal(CubicInches.ToMillilitres(3.9), 63.9095, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 63.9095, CubicInches.ToMillilitres(3.9));
    }
    if !cmp.Equal(CubicInches.ToMillilitres(4.0), 65.5483, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 65.5483, CubicInches.ToMillilitres(4.0));
    }
    if !cmp.Equal(CubicInches.ToMillilitres(5.37009), 88.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 88.0, CubicInches.ToMillilitres(5.37009));
    }
}

func TestConvertKnownCubicInchesToLitres(t * testing.T) {
    if !cmp.Equal(CubicInches.ToLitres(560.0), 9.17676, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.17676, CubicInches.ToLitres(560.0));
    }
    if !cmp.Equal(CubicInches.ToLitres(555.0), 9.09482, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.09482, CubicInches.ToLitres(555.0));
    }
    if !cmp.Equal(CubicInches.ToLitres(7444.9), 122.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 122.0, CubicInches.ToLitres(7444.9));
    }
}

func TestConvertKnownCubicInchesToKilolitres(t * testing.T) {
    if !cmp.Equal(CubicInches.ToKilolitres(560.0), 0.009176, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.009176, CubicInches.ToKilolitres(560.0));
    }
    if !cmp.Equal(CubicInches.ToKilolitres(5555.0), 0.09103014, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.09103014, CubicInches.ToKilolitres(5555.0));
    }
    if !cmp.Equal(CubicInches.ToKilolitres(100000.0), 1.6387064, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.6387064, CubicInches.ToKilolitres(100000.0));
    }
}

func TestConvertKnownCubicInchesToTeaspoons(t * testing.T) {
    if !cmp.Equal(CubicInches.ToTeaspoons(5.0), 13.8419, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 13.8419, CubicInches.ToTeaspoons(5.0));
    }
    if !cmp.Equal(CubicInches.ToTeaspoons(6.0), 16.6102, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 16.6102, CubicInches.ToTeaspoons(6.0));
    }
    if !cmp.Equal(CubicInches.ToTeaspoons(11.5591), 32.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 32.0, CubicInches.ToTeaspoons(11.5591));
    }
}

func TestConvertKnownCubicInchesToTablespoons(t * testing.T) {
    if !cmp.Equal(CubicInches.ToTablespoons(34.0), 31.3749, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 31.3749, CubicInches.ToTablespoons(34.0));
    }
    if !cmp.Equal(CubicInches.ToTablespoons(11.9204), 11.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 11.0, CubicInches.ToTablespoons(11.9204));
    }
    if !cmp.Equal(CubicInches.ToTablespoons(99.0), 91.3562246, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 91.3562246, CubicInches.ToTablespoons(99.0));
    }
}

func TestConvertKnownCubicInchesToQuarts(t * testing.T) {
    if !cmp.Equal(CubicInches.ToQuarts(800.0), 11.5349, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 11.5349, CubicInches.ToQuarts(800.0));
    }
    if !cmp.Equal(CubicInches.ToQuarts(77.0), 1.11023, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.11023, CubicInches.ToQuarts(77.0));
    }
    if !cmp.Equal(CubicInches.ToQuarts(4577.42), 66.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 66.0, CubicInches.ToQuarts(4577.42));
    }
}

func TestConvertKnownCubicInchesToPints(t * testing.T) {
    if !cmp.Equal(CubicInches.ToPints(89.5), 2.58093, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.58093, CubicInches.ToPints(89.5));
    }
    if !cmp.Equal(CubicInches.ToPints(23095.2), 666.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 666.0, CubicInches.ToPints(23095.2));
    }
    if !cmp.Equal(CubicInches.ToPints(2670.16), 77.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 77.0, CubicInches.ToPints(2670.16));
    }
}

func TestConvertKnownCubicInchesToGallons(t * testing.T) {
    if !cmp.Equal(CubicInches.ToGallons(900.0), 3.24419, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.24419, CubicInches.ToGallons(900.0));
    }
    if !cmp.Equal(CubicInches.ToGallons(666.0), 2.4007, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.4007, CubicInches.ToGallons(666.0));
    }
    if !cmp.Equal(CubicInches.ToGallons(21361.3), 77.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 77.0, CubicInches.ToGallons(21361.3));
    }
}

func TestConvertKnownCubicInchesToFluidOunces(t * testing.T) {
    if !cmp.Equal(CubicInches.ToFluidOunces(77.0), 44.4093, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 44.4093, CubicInches.ToFluidOunces(77.0));
    }
    if !cmp.Equal(CubicInches.ToFluidOunces(55.0), 31.7209, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 31.7209, CubicInches.ToFluidOunces(55.0));
    }
    if !cmp.Equal(CubicInches.ToFluidOunces(27.7419), 16.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 16.0, CubicInches.ToFluidOunces(27.7419));
    }
}

func TestConvertKnownCubicInchesToUSTeaspoons(t * testing.T) {
    if !cmp.Equal(CubicInches.ToUSTeaspoons(678.0), 2254.13, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2254.13, CubicInches.ToUSTeaspoons(678.0));
    }
    if !cmp.Equal(CubicInches.ToUSTeaspoons(55.0), 182.857, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 182.857, CubicInches.ToUSTeaspoons(55.0));
    }
    if !cmp.Equal(CubicInches.ToUSTeaspoons(26.4687), 88.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 88.0, CubicInches.ToUSTeaspoons(26.4687));
    }
}

func TestConvertKnownCubicInchesToUSTablespoons(t * testing.T) {
    if !cmp.Equal(CubicInches.ToUSTablespoons(66.0), 73.1429, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 73.1429, CubicInches.ToUSTablespoons(66.0));
    }
    if !cmp.Equal(CubicInches.ToUSTablespoons(55.0), 60.9524, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 60.9524, CubicInches.ToUSTablespoons(55.0));
    }
    if !cmp.Equal(CubicInches.ToUSTablespoons(10.8281), 12.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12.0, CubicInches.ToUSTablespoons(10.8281));
    }
}

func TestConvertKnownCubicInchesToUSQuarts(t * testing.T) {
    if !cmp.Equal(CubicInches.ToUSQuarts(345.0), 5.97403, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.97403, CubicInches.ToUSQuarts(345.0));
    }
    if !cmp.Equal(CubicInches.ToUSQuarts(33.0), 0.571429, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.571429, CubicInches.ToUSQuarts(33.0));
    }
    if !cmp.Equal(CubicInches.ToUSQuarts(3176.25), 55.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 55.0, CubicInches.ToUSQuarts(3176.25));
    }
}

func TestConvertKnownCubicInchesToUSPints(t * testing.T) {
    if !cmp.Equal(CubicInches.ToUSPints(89.0), 3.08225, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.08225, CubicInches.ToUSPints(89.0));
    }
    if !cmp.Equal(CubicInches.ToUSPints(3176.25), 110.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 110.0, CubicInches.ToUSPints(3176.25));
    }
    if !cmp.Equal(CubicInches.ToUSPints(462.0), 16.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 16.0, CubicInches.ToUSPints(462.0));
    }
}

func TestConvertKnownCubicInchesToUSGallons(t * testing.T) {
    if !cmp.Equal(CubicInches.ToUSGallons(600.0), 2.5974, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.5974, CubicInches.ToUSGallons(600.0));
    }
    if !cmp.Equal(CubicInches.ToUSGallons(462), 2.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.0, CubicInches.ToUSGallons(462));
    }
    if !cmp.Equal(CubicInches.ToUSGallons(899.0), 3.89177, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.89177, CubicInches.ToUSGallons(899.0));
    }
}

func TestConvertKnownCubicInchesToUSFluidOunces(t * testing.T) {
    if !cmp.Equal(CubicInches.ToUSFluidOunces(900.0), 498.700607, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 498.700607, CubicInches.ToUSFluidOunces(900.0));
    }
    if !cmp.Equal(CubicInches.ToUSFluidOunces(777.0), 430.544858, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 430.544858, CubicInches.ToUSFluidOunces(777.0));
    }
    if !cmp.Equal(CubicInches.ToUSFluidOunces(178.664), 98.99982822, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 98.99982822, CubicInches.ToUSFluidOunces(178.664));
    }
}

func TestConvertKnownCubicInchesToUSCups(t * testing.T) {
    if !cmp.Equal(CubicInches.ToUSCups(7.0), 0.477956, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.477956, CubicInches.ToUSCups(7.0));
    }
    if !cmp.Equal(CubicInches.ToUSCups(77.0), 5.25752, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.25752, CubicInches.ToUSCups(77.0));
    }
    if !cmp.Equal(CubicInches.ToUSCups(123.0), 8.39837, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8.39837, CubicInches.ToUSCups(123.0));
    }
}

func TestConvertKnownCubicInchesToCubicMetres(t * testing.T) {
    if !cmp.Equal(CubicInches.ToCubicMetres(24409.5), 0.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.4, CubicInches.ToCubicMetres(24409.5));
    }
    if !cmp.Equal(CubicInches.ToCubicMetres(7777.0), 0.1274422, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.1274422, CubicInches.ToCubicMetres(7777.0));
    }
    if !cmp.Equal(CubicInches.ToCubicMetres(366142), 6.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.0, CubicInches.ToCubicMetres(366142));
    }
}

func TestConvertKnownCubicInchesToCubicFeet(t * testing.T) {
    if !cmp.Equal(CubicInches.ToCubicFeet(11750.4), 6.8, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.8, CubicInches.ToCubicFeet(11750.4));
    }
    if !cmp.Equal(CubicInches.ToCubicFeet(57024.0), 33.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 33.0, CubicInches.ToCubicFeet(57024.0));
    }
    if !cmp.Equal(CubicInches.ToCubicFeet(1234.0), 0.7141204, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.7141204, CubicInches.ToCubicFeet(1234.0));
    }
}

func TestConvertKnownCubicInchesToOilBarrels(t * testing.T) {
    if !cmp.Equal(CubicInches.ToOilBarrels(90000.0), 9.2764378, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.2764378, CubicInches.ToOilBarrels(90000.0));
    }
    if !cmp.Equal(CubicInches.ToOilBarrels(8888.0), 0.9160998, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.9160998, CubicInches.ToOilBarrels(8888.0));
    }
    if !cmp.Equal(CubicInches.ToOilBarrels(11642.4), 1.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.2, CubicInches.ToOilBarrels(11642.4));
    }
}

func TestConvertKnownCubicMetresToMillilitres(t * testing.T) {
    if !cmp.Equal(CubicMetres.ToMillilitres(0.01), 10000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 10000.0, CubicMetres.ToMillilitres(0.01));
    }
    if !cmp.Equal(CubicMetres.ToMillilitres(0.2306735), 230673.5, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 230673.5, CubicMetres.ToMillilitres(0.2306735));
    }
    if !cmp.Equal(CubicMetres.ToMillilitres(0.009), 9000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9000.0, CubicMetres.ToMillilitres(0.009));
    }
}

func TestConvertKnownCubicMetresToLitres(t * testing.T) {
    if !cmp.Equal(CubicMetres.ToLitres(0.1), 100.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 100.0, CubicMetres.ToLitres(0.1));
    }
    if !cmp.Equal(CubicMetres.ToLitres(0.009), 9.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.0, CubicMetres.ToLitres(0.009));
    }
    if !cmp.Equal(CubicMetres.ToLitres(0.08989), 89.89, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 89.89, CubicMetres.ToLitres(0.08989));
    }
}

func TestConvertKnownCubicMetresToKilolitres(t * testing.T) {
    if !cmp.Equal(CubicMetres.ToKilolitres(0.9), 0.9, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.9, CubicMetres.ToKilolitres(0.9));
    }
    if !cmp.Equal(CubicMetres.ToKilolitres(100.9), 100.9, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 100.9, CubicMetres.ToKilolitres(100.9));
    }
    if !cmp.Equal(CubicMetres.ToKilolitres(666.9), 666.9, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 666.9, CubicMetres.ToKilolitres(666.9));
    }
}

func TestConvertKnownCubicMetresToTeaspoons(t * testing.T) {
    if !cmp.Equal(CubicMetres.ToTeaspoons(0.1), 16893.6, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 16893.6, CubicMetres.ToTeaspoons(0.1));
    }
    if !cmp.Equal(CubicMetres.ToTeaspoons(3.0), 506808.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 506808.0, CubicMetres.ToTeaspoons(3.0));
    }
    if !cmp.Equal(CubicMetres.ToTeaspoons(0.91), 153731.76, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 153731.76, CubicMetres.ToTeaspoons(0.91));
    }
}

func TestConvertKnownCubicMetresToTablespoons(t * testing.T) {
    if !cmp.Equal(CubicMetres.ToTablespoons(0.9), 50680.8899, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 50680.8899, CubicMetres.ToTablespoons(0.9));
    }
    if !cmp.Equal(CubicMetres.ToTablespoons(0.1), 5631.21, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5631.21, CubicMetres.ToTablespoons(0.1));
    }
    if !cmp.Equal(CubicMetres.ToTablespoons(9.0), 506808.89, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 506808.89, CubicMetres.ToTablespoons(9.0));
    }
}

func TestConvertKnownCubicMetresToQuarts(t * testing.T) {
    if !cmp.Equal(CubicMetres.ToQuarts(0.8), 703.902, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 703.902, CubicMetres.ToQuarts(0.8));
    }
    if !cmp.Equal(CubicMetres.ToQuarts(0.4), 351.951, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 351.951, CubicMetres.ToQuarts(0.4));
    }
    if !cmp.Equal(CubicMetres.ToQuarts(6.0), 5279.26, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5279.26, CubicMetres.ToQuarts(6.0));
    }
}

func TestConvertKnownCubicMetresToPints(t * testing.T) {
    if !cmp.Equal(CubicMetres.ToPints(0.7), 1231.83, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1231.83, CubicMetres.ToPints(0.7));
    }
    if !cmp.Equal(CubicMetres.ToPints(4.5), 7918.875, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7918.875, CubicMetres.ToPints(4.5));
    }
    if !cmp.Equal(CubicMetres.ToPints(0.06), 105.5852, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 105.5852, CubicMetres.ToPints(0.06));
    }
}

func TestConvertKnownCubicMetresToGallons(t * testing.T) {
    if !cmp.Equal(CubicMetres.ToGallons(0.2), 43.9938, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 43.9938, CubicMetres.ToGallons(0.2));
    }
    if !cmp.Equal(CubicMetres.ToGallons(0.4), 87.9877, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 87.9877, CubicMetres.ToGallons(0.4));
    }
    if !cmp.Equal(CubicMetres.ToGallons(0.0272765), 6.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.0, CubicMetres.ToGallons(0.0272765));
    }
}

func TestConvertKnownCubicMetresToFluidOunces(t * testing.T) {
    if !cmp.Equal(CubicMetres.ToFluidOunces(0.7), 24636.569, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 24636.569, CubicMetres.ToFluidOunces(0.7));
    }
    if !cmp.Equal(CubicMetres.ToFluidOunces(0.09), 3167.557, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3167.557, CubicMetres.ToFluidOunces(0.09));
    }
    if !cmp.Equal(CubicMetres.ToFluidOunces(4.0), 140780.399, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 140780.399, CubicMetres.ToFluidOunces(4.0));
    }
}

func TestConvertKnownCubicMetresToUSTeaspoons(t * testing.T) {
    if !cmp.Equal(CubicMetres.ToUSTeaspoons(0.5), 101442.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 101442.0, CubicMetres.ToUSTeaspoons(0.5));
    }
    if !cmp.Equal(CubicMetres.ToUSTeaspoons(2), 405768.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 405768.0, CubicMetres.ToUSTeaspoons(2));
    }
    if !cmp.Equal(CubicMetres.ToUSTeaspoons(0.3), 60865.199, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 60865.199, CubicMetres.ToUSTeaspoons(0.3));
    }
}

func TestConvertKnownCubicMetresToUSTablespoons(t * testing.T) {
    if !cmp.Equal(CubicMetres.ToUSTablespoons(0.2), 13525.6, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 13525.6, CubicMetres.ToUSTablespoons(0.2));
    }
    if !cmp.Equal(CubicMetres.ToUSTablespoons(0.9), 60865.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 60865.2, CubicMetres.ToUSTablespoons(0.9));
    }
    if !cmp.Equal(CubicMetres.ToUSTablespoons(2.0), 135256.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 135256.0, CubicMetres.ToUSTablespoons(2.0));
    }
}

func TestConvertKnownCubicMetresToUSQuarts(t * testing.T) {
    if !cmp.Equal(CubicMetres.ToUSQuarts(0.2), 211.338, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 211.338, CubicMetres.ToUSQuarts(0.2));
    }
    if !cmp.Equal(CubicMetres.ToUSQuarts(4.0), 4226.76, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4226.76, CubicMetres.ToUSQuarts(4.0));
    }
    if !cmp.Equal(CubicMetres.ToUSQuarts(0.851718), 900.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 900.0, CubicMetres.ToUSQuarts(0.851718));
    }
}

func TestConvertKnownCubicMetresToUSPints(t * testing.T) {
    if !cmp.Equal(CubicMetres.ToUSPints(0.4), 845.351, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 845.351, CubicMetres.ToUSPints(0.4));
    }
    if !cmp.Equal(CubicMetres.ToUSPints(7.0), 14793.66, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 14793.66, CubicMetres.ToUSPints(7.0));
    }
    if !cmp.Equal(CubicMetres.ToUSPints(6.0), 12680.280, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12680.280, CubicMetres.ToUSPints(6.0));
    }
}

func TestConvertKnownCubicMetresToUSGallons(t * testing.T) {
    if !cmp.Equal(CubicMetres.ToUSGallons(0.7), 184.92, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 184.92, CubicMetres.ToUSGallons(0.7));
    }
    if !cmp.Equal(CubicMetres.ToUSGallons(0.851718), 225.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 225.0, CubicMetres.ToUSGallons(0.851718));
    }
    if !cmp.Equal(CubicMetres.ToUSGallons(0.02), 5.283441, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.283441, CubicMetres.ToUSGallons(0.02));
    }
}

func TestConvertKnownCubicMetresToUSFluidOunces(t * testing.T) {
    if !cmp.Equal(CubicMetres.ToUSFluidOunces(0.9), 30432.6, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 30432.6, CubicMetres.ToUSFluidOunces(0.9));
    }
    if !cmp.Equal(CubicMetres.ToUSFluidOunces(0.3), 10144.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 10144.2, CubicMetres.ToUSFluidOunces(0.3));
    }
    if !cmp.Equal(CubicMetres.ToUSFluidOunces(3.3), 111586.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 111586.2, CubicMetres.ToUSFluidOunces(3.3));
    }
}

func TestConvertKnownCubicMetresToUSCups(t * testing.T) {
    if !cmp.Equal(CubicMetres.ToUSCups(7.0), 29166.7, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 29166.7, CubicMetres.ToUSCups(7.0));
    }
    if !cmp.Equal(CubicMetres.ToUSCups(11.0), 45833.37, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 45833.37, CubicMetres.ToUSCups(11.0));
    }
    if !cmp.Equal(CubicMetres.ToUSCups(66.0), 275000.22, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 275000.22, CubicMetres.ToUSCups(66.0));
    }
}

func TestConvertKnownCubicMetresToCubicFeet(t * testing.T) {
    if !cmp.Equal(CubicMetres.ToCubicFeet(0.8), 28.2517, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 28.2517, CubicMetres.ToCubicFeet(0.8));
    }
    if !cmp.Equal(CubicMetres.ToCubicFeet(5.0), 176.573, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 176.573, CubicMetres.ToCubicFeet(5.0));
    }
    if !cmp.Equal(CubicMetres.ToCubicFeet(12.12), 428.014163, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 428.014163, CubicMetres.ToCubicFeet(12.12));
    }
}

func TestConvertKnownCubicMetresToCubicInches(t * testing.T) {
    if !cmp.Equal(CubicMetres.ToCubicInches(0.4), 24409.48, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 24409.48, CubicMetres.ToCubicInches(0.4));
    }
    if !cmp.Equal(CubicMetres.ToCubicInches(3.0), 183071.099, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 183071.099, CubicMetres.ToCubicInches(3.0));
    }
    if !cmp.Equal(CubicMetres.ToCubicInches(0.99), 60413.4629, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 60413.4629, CubicMetres.ToCubicInches(0.99));
    }
}

func TestConvertKnownCubicMetresToOilBarrels(t * testing.T) {
    if !cmp.Equal(CubicMetres.ToOilBarrels(0.09), 0.566083, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.566083, CubicMetres.ToOilBarrels(0.09));
    }
    if !cmp.Equal(CubicMetres.ToOilBarrels(5.0), 31.4491, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 31.4491, CubicMetres.ToOilBarrels(5.0));
    }
    if !cmp.Equal(CubicMetres.ToOilBarrels(1.2), 7.547772, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.547772, CubicMetres.ToOilBarrels(1.2));
    }
}

func TestConvertKnownFluidOuncesToMillilitres(t * testing.T) {
    if !cmp.Equal(FluidOunces.ToMillilitres(12.0), 340.957, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 340.957, FluidOunces.ToMillilitres(12.0));
    }
    if !cmp.Equal(FluidOunces.ToMillilitres(6.01), 170.7625, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 170.7625, FluidOunces.ToMillilitres(6.01));
    }
    if !cmp.Equal(FluidOunces.ToMillilitres(0.78), 22.16219, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 22.16219, FluidOunces.ToMillilitres(0.78));
    }
}

func TestConvertKnownFluidOuncesToLitres(t * testing.T) {
    if !cmp.Equal(FluidOunces.ToLitres(800.0), 22.7305, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 22.7305, FluidOunces.ToLitres(800.0));
    }
    if !cmp.Equal(FluidOunces.ToLitres(4.5), 0.127859, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.127859, FluidOunces.ToLitres(4.5));
    }
    if !cmp.Equal(FluidOunces.ToLitres(109.0), 3.09702, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.09702, FluidOunces.ToLitres(109.0));
    }
}

func TestConvertKnownFluidOuncesToKilolitres(t * testing.T) {
    if !cmp.Equal(FluidOunces.ToKilolitres(56909.0), 1.616959, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.616959, FluidOunces.ToKilolitres(56909.0));
    }
    if !cmp.Equal(FluidOunces.ToKilolitres(9009.0), 0.2559733, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.2559733, FluidOunces.ToKilolitres(9009.0));
    }
    if !cmp.Equal(FluidOunces.ToKilolitres(123456.0), 3.50776304, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.50776304, FluidOunces.ToKilolitres(123456.0));
    }
}

func TestConvertKnownFluidOuncesToTeaspoons(t * testing.T) {
    if !cmp.Equal(FluidOunces.ToTeaspoons(123.0), 590.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 590.4, FluidOunces.ToTeaspoons(123.0));
    }
    if !cmp.Equal(FluidOunces.ToTeaspoons(9.12), 43.77598, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 43.77598, FluidOunces.ToTeaspoons(9.12));
    }
    if !cmp.Equal(FluidOunces.ToTeaspoons(0.2), 0.96, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.96, FluidOunces.ToTeaspoons(0.2));
    }
}

func TestConvertKnownFluidOuncesToTablespoons(t * testing.T) {
    if !cmp.Equal(FluidOunces.ToTablespoons(7.0), 11.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 11.2, FluidOunces.ToTablespoons(7.0));
    }
    if !cmp.Equal(FluidOunces.ToTablespoons(165.4), 264.63989, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 264.63989, FluidOunces.ToTablespoons(165.4));
    }
    if !cmp.Equal(FluidOunces.ToTablespoons(80.1), 128.1599, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 128.1599, FluidOunces.ToTablespoons(80.1));
    }
}

func TestConvertKnownFluidOuncesToQuarts(t * testing.T) {
    if !cmp.Equal(FluidOunces.ToQuarts(89.0), 2.225, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.225, FluidOunces.ToQuarts(89.0));
    }
    if !cmp.Equal(FluidOunces.ToQuarts(5.9), 0.1475, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.1475, FluidOunces.ToQuarts(5.9));
    }
    if !cmp.Equal(FluidOunces.ToQuarts(1300.0), 32.5, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 32.5, FluidOunces.ToQuarts(1300.0));
    }
}

func TestConvertKnownFluidOuncesToPints(t * testing.T) {
    if !cmp.Equal(FluidOunces.ToPints(1300.0), 65.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 65.0, FluidOunces.ToPints(1300.0));
    }
    if !cmp.Equal(FluidOunces.ToPints(5.7), 0.285, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.285, FluidOunces.ToPints(5.7));
    }
    if !cmp.Equal(FluidOunces.ToPints(1900.0), 95.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 95.0, FluidOunces.ToPints(1900.0));
    }
}

func TestConvertKnownFluidOuncesToGallons(t * testing.T) {
    if !cmp.Equal(FluidOunces.ToGallons(1900.0), 11.875, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 11.875, FluidOunces.ToGallons(1900.0));
    }
    if !cmp.Equal(FluidOunces.ToGallons(5.6), 0.035, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.035, FluidOunces.ToGallons(5.6));
    }
    if !cmp.Equal(FluidOunces.ToGallons(12345.0), 77.15625, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 77.15625, FluidOunces.ToGallons(12345.0));
    }
}

func TestConvertKnownFluidOuncesToUSTeaspoons(t * testing.T) {
    if !cmp.Equal(FluidOunces.ToUSTeaspoons(12345.0), 71163.512, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 71163.512, FluidOunces.ToUSTeaspoons(12345.0));
    }
    if !cmp.Equal(FluidOunces.ToUSTeaspoons(8.9), 51.3046, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 51.3046, FluidOunces.ToUSTeaspoons(8.9));
    }
    if !cmp.Equal(FluidOunces.ToUSTeaspoons(0.005), 0.028822808, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.028822808, FluidOunces.ToUSTeaspoons(0.005));
    }
}

func TestConvertKnownFluidOuncesToUSTablespoons(t * testing.T) {
    if !cmp.Equal(FluidOunces.ToUSTablespoons(190.0), 365.089, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 365.089, FluidOunces.ToUSTablespoons(190.0));
    }
    if !cmp.Equal(FluidOunces.ToUSTablespoons(6.8), 13.0663, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 13.0663, FluidOunces.ToUSTablespoons(6.8));
    }
    if !cmp.Equal(FluidOunces.ToUSTablespoons(2340.0), 4496.357, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4496.357, FluidOunces.ToUSTablespoons(2340.0));
    }
}

func TestConvertKnownFluidOuncesToUSQuarts(t * testing.T) {
    if !cmp.Equal(FluidOunces.ToUSQuarts(45.0), 1.35107, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.35107, FluidOunces.ToUSQuarts(45.0));
    }
    if !cmp.Equal(FluidOunces.ToUSQuarts(1090.0), 32.72589, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 32.72589, FluidOunces.ToUSQuarts(1090.0));
    }
    if !cmp.Equal(FluidOunces.ToUSQuarts(777.0), 23.3285, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 23.3285, FluidOunces.ToUSQuarts(777.0));
    }
}

func TestConvertKnownFluidOuncesToUSPints(t * testing.T) {
    if !cmp.Equal(FluidOunces.ToUSPints(678.0), 40.7122, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 40.7122, FluidOunces.ToUSPints(678.0));
    }
    if !cmp.Equal(FluidOunces.ToUSPints(4.5), 0.270214, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.270214, FluidOunces.ToUSPints(4.5));
    }
    if !cmp.Equal(FluidOunces.ToUSPints(1900.0), 114.0902, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 114.0902, FluidOunces.ToUSPints(1900.0));
    }
}

func TestConvertKnownFluidOuncesToUSGallons(t * testing.T) {
    if !cmp.Equal(FluidOunces.ToUSGallons(1890.0), 14.18622, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 14.18622, FluidOunces.ToUSGallons(1890.0));
    }
    if !cmp.Equal(FluidOunces.ToUSGallons(5.8), 0.0435344, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0435344, FluidOunces.ToUSGallons(5.8));
    }
    if !cmp.Equal(FluidOunces.ToUSGallons(10090.0), 75.734905, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 75.734905, FluidOunces.ToUSGallons(10090.0));
    }
}

func TestConvertKnownFluidOuncesToUSFluidOunces(t * testing.T) {
    if !cmp.Equal(FluidOunces.ToUSFluidOunces(190.0), 182.544, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 182.544, FluidOunces.ToUSFluidOunces(190.0));
    }
    if !cmp.Equal(FluidOunces.ToUSFluidOunces(54.8), 52.64964, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 52.64964, FluidOunces.ToUSFluidOunces(54.8));
    }
    if !cmp.Equal(FluidOunces.ToUSFluidOunces(1.7), 1.63329, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.63329, FluidOunces.ToUSFluidOunces(1.7));
    }
}

func TestConvertKnownFluidOuncesToUSCups(t * testing.T) {
    if !cmp.Equal(FluidOunces.ToUSCups(6.0), 0.72057, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.72057, FluidOunces.ToUSCups(6.0));
    }
    if !cmp.Equal(FluidOunces.ToUSCups(1800.0), 216.171, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 216.171, FluidOunces.ToUSCups(1800.0));
    }
    if !cmp.Equal(FluidOunces.ToUSCups(6.9), 0.828655, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.828655, FluidOunces.ToUSCups(6.9));
    }
}

func TestConvertKnownFluidOuncesToCubicMetres(t * testing.T) {
    if !cmp.Equal(FluidOunces.ToCubicMetres(316756.0), 9.00000284, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.00000284, FluidOunces.ToCubicMetres(316756.0));
    }
    if !cmp.Equal(FluidOunces.ToCubicMetres(8000.0), 0.2365882, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.2365882, FluidOunces.ToCubicMetres(8000.0));
    }
    if !cmp.Equal(FluidOunces.ToCubicMetres(123456.0), 3.5077610, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.5077610, FluidOunces.ToCubicMetres(123456.0));
    }
}

func TestConvertKnownFluidOuncesToCubicFeet(t * testing.T) {
    if !cmp.Equal(FluidOunces.ToCubicFeet(888.0), 0.891017, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.891017, FluidOunces.ToCubicFeet(888.0));
    }
    if !cmp.Equal(FluidOunces.ToCubicFeet(100900.0), 101.242841, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 101.242841, FluidOunces.ToCubicFeet(100900.0));
    }
    if !cmp.Equal(FluidOunces.ToCubicFeet(678.0), 0.680304, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.680304, FluidOunces.ToCubicFeet(678.0));
    }
}

func TestConvertKnownFluidOuncesToCubicInches(t * testing.T) {
    if !cmp.Equal(FluidOunces.ToCubicInches(7.0), 12.1371, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12.1371, FluidOunces.ToCubicInches(7.0));
    }
    if !cmp.Equal(FluidOunces.ToCubicInches(900), 1560.48, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1560.48, FluidOunces.ToCubicInches(900));
    }
    if !cmp.Equal(FluidOunces.ToCubicInches(6.0), 10.4032, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 10.4032, FluidOunces.ToCubicInches(6.0));
    }
}

func TestConvertKnownFluidOuncesToOilBarrels(t * testing.T) {
    if !cmp.Equal(FluidOunces.ToOilBarrels(430859.0), 77.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 77.0, FluidOunces.ToOilBarrels(430859.0));
    }
    if !cmp.Equal(FluidOunces.ToOilBarrels(777.0), 0.13886, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.13886, FluidOunces.ToOilBarrels(777.0));
    }
    if !cmp.Equal(FluidOunces.ToOilBarrels(1234.0), 0.2205316, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.2205316, FluidOunces.ToOilBarrels(1234.0));
    }
}

func TestConvertKnownGallonsToMillilitres(t * testing.T) {
    if !cmp.Equal(Gallons.ToMillilitres(1.3), 5909.92, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5909.92, Gallons.ToMillilitres(1.3));
    }
    if !cmp.Equal(Gallons.ToMillilitres(0.45), 2045.741, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2045.741, Gallons.ToMillilitres(0.45));
    }
    if !cmp.Equal(Gallons.ToMillilitres(1.8), 8182.96, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8182.96, Gallons.ToMillilitres(1.8));
    }
}

func TestConvertKnownGallonsToLitres(t * testing.T) {
    if !cmp.Equal(Gallons.ToLitres(123.0), 559.169, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 559.169, Gallons.ToLitres(123.0));
    }
    if !cmp.Equal(Gallons.ToLitres(9.3), 42.2786, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 42.2786, Gallons.ToLitres(9.3));
    }
    if !cmp.Equal(Gallons.ToLitres(0.67), 3.04588, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.04588, Gallons.ToLitres(0.67));
    }
}

func TestConvertKnownGallonsToKilolitres(t * testing.T) {
    if !cmp.Equal(Gallons.ToKilolitres(1009.0), 4.587005, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.587005, Gallons.ToKilolitres(1009.0));
    }
    if !cmp.Equal(Gallons.ToKilolitres(9.6), 0.0436425, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0436425, Gallons.ToKilolitres(9.6));
    }
    if !cmp.Equal(Gallons.ToKilolitres(123456.0), 561.242087, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 561.242087, Gallons.ToKilolitres(123456.0));
    }
}

func TestConvertKnownGallonsToTeaspoons(t * testing.T) {
    if !cmp.Equal(Gallons.ToTeaspoons(6.0), 4608.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4608.0, Gallons.ToTeaspoons(6.0));
    }
    if !cmp.Equal(Gallons.ToTeaspoons(78.12), 59996.16, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 59996.16, Gallons.ToTeaspoons(78.12));
    }
    if !cmp.Equal(Gallons.ToTeaspoons(0.34), 261.1199, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 261.1199, Gallons.ToTeaspoons(0.34));
    }
}

func TestConvertKnownGallonsToTablespoons(t * testing.T) {
    if !cmp.Equal(Gallons.ToTablespoons(0.9), 230.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 230.4, Gallons.ToTablespoons(0.9));
    }
    if !cmp.Equal(Gallons.ToTablespoons(1.6), 409.6, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 409.6, Gallons.ToTablespoons(1.6));
    }
    if !cmp.Equal(Gallons.ToTablespoons(0.33), 84.47997, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 84.47997, Gallons.ToTablespoons(0.33));
    }
}

func TestConvertKnownGallonsToQuarts(t * testing.T) {
    if !cmp.Equal(Gallons.ToQuarts(109.0), 436.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 436.0, Gallons.ToQuarts(109.0));
    }
    if !cmp.Equal(Gallons.ToQuarts(5.8), 23.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 23.2, Gallons.ToQuarts(5.8));
    }
    if !cmp.Equal(Gallons.ToQuarts(0.23), 0.92, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.92, Gallons.ToQuarts(0.23));
    }
}

func TestConvertKnownGallonsToPints(t * testing.T) {
    if !cmp.Equal(Gallons.ToPints(0.23), 1.84, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.84, Gallons.ToPints(0.23));
    }
    if !cmp.Equal(Gallons.ToPints(190.0), 1520.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1520.0, Gallons.ToPints(190.0));
    }
    if !cmp.Equal(Gallons.ToPints(24.7), 197.6, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 197.6, Gallons.ToPints(24.7));
    }
}

func TestConvertKnownGallonsToFluidOunces(t * testing.T) {
    if !cmp.Equal(Gallons.ToFluidOunces(24.7), 3952.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3952.0, Gallons.ToFluidOunces(24.7));
    }
    if !cmp.Equal(Gallons.ToFluidOunces(13.09), 2094.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2094.4, Gallons.ToFluidOunces(13.09));
    }
    if !cmp.Equal(Gallons.ToFluidOunces(5.8), 928.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 928.0, Gallons.ToFluidOunces(5.8));
    }
}

func TestConvertKnownGallonsToUSTeaspoons(t * testing.T) {
    if !cmp.Equal(Gallons.ToUSTeaspoons(5.8), 5349.51, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5349.51, Gallons.ToUSTeaspoons(5.8));
    }
    if !cmp.Equal(Gallons.ToUSTeaspoons(0.44), 405.8251, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 405.8251, Gallons.ToUSTeaspoons(0.44));
    }
    if !cmp.Equal(Gallons.ToUSTeaspoons(1.9), 1752.43, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1752.43, Gallons.ToUSTeaspoons(1.9));
    }
}

func TestConvertKnownGallonsToUSTablespoons(t * testing.T) {
    if !cmp.Equal(Gallons.ToUSTablespoons(1.8), 553.398, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 553.398, Gallons.ToUSTablespoons(1.8));
    }
    if !cmp.Equal(Gallons.ToUSTablespoons(0.33), 101.4562, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 101.4562, Gallons.ToUSTablespoons(0.33));
    }
    if !cmp.Equal(Gallons.ToUSTablespoons(100.0), 30744.33080, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 30744.33080, Gallons.ToUSTablespoons(100.0));
    }
}

func TestConvertKnownGallonsToUSQuarts(t * testing.T) {
    if !cmp.Equal(Gallons.ToUSQuarts(78.0), 374.696, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 374.696, Gallons.ToUSQuarts(78.0));
    }
    if !cmp.Equal(Gallons.ToUSQuarts(1.7), 8.16646, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8.16646, Gallons.ToUSQuarts(1.7));
    }
    if !cmp.Equal(Gallons.ToUSQuarts(16.9), 81.18421, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 81.18421, Gallons.ToUSQuarts(16.9));
    }
}

func TestConvertKnownGallonsToUSPints(t * testing.T) {
    if !cmp.Equal(Gallons.ToUSPints(13.4), 128.7418, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 128.7418, Gallons.ToUSPints(13.4));
    }
    if !cmp.Equal(Gallons.ToUSPints(8.12), 78.01371, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 78.01371, Gallons.ToUSPints(8.12));
    }
    if !cmp.Equal(Gallons.ToUSPints(0.99), 9.511523, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.511523, Gallons.ToUSPints(0.99));
    }
}

func TestConvertKnownGallonsToUSGallons(t * testing.T) {
    if !cmp.Equal(Gallons.ToUSGallons(1.5), 1.80142, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.80142, Gallons.ToUSGallons(1.5));
    }
    if !cmp.Equal(Gallons.ToUSGallons(0.78), 0.9367409, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.9367409, Gallons.ToUSGallons(0.78));
    }
    if !cmp.Equal(Gallons.ToUSGallons(103.0), 123.698, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 123.698, Gallons.ToUSGallons(103.0));
    }
}

func TestConvertKnownGallonsToUSFluidOunces(t * testing.T) {
    if !cmp.Equal(Gallons.ToUSFluidOunces(111.0), 17063.1, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 17063.1, Gallons.ToUSFluidOunces(111.0));
    }
    if !cmp.Equal(Gallons.ToUSFluidOunces(89.9), 13819.57, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 13819.57, Gallons.ToUSFluidOunces(89.9));
    }
    if !cmp.Equal(Gallons.ToUSFluidOunces(1.2), 184.466, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 184.466, Gallons.ToUSFluidOunces(1.2));
    }
}

func TestConvertKnownGallonsToUSCups(t * testing.T) {
    if !cmp.Equal(Gallons.ToUSCups(1.2), 23.0582, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 23.0582, Gallons.ToUSCups(1.2));
    }
    if !cmp.Equal(Gallons.ToUSCups(0.55), 10.56836, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 10.56836, Gallons.ToUSCups(0.55));
    }
    if !cmp.Equal(Gallons.ToUSCups(890.0), 17101.534007630, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 17101.534007630, Gallons.ToUSCups(890.0));
    }
}

func TestConvertKnownGallonsToCubicMetres(t * testing.T) {
    if !cmp.Equal(Gallons.ToCubicMetres(9898.62), 45.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 45.0, Gallons.ToCubicMetres(9898.62));
    }
    if !cmp.Equal(Gallons.ToCubicMetres(12345.0), 56.121481, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 56.121481, Gallons.ToCubicMetres(12345.0));
    }
    if !cmp.Equal(Gallons.ToCubicMetres(80.0), 0.363687, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.363687, Gallons.ToCubicMetres(80.0));
    }
}

func TestConvertKnownGallonsToCubicFeet(t * testing.T) {
    if !cmp.Equal(Gallons.ToCubicFeet(55.0), 8.8299, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8.8299, Gallons.ToCubicFeet(55.0));
    }
    if !cmp.Equal(Gallons.ToCubicFeet(90.5), 14.5292, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 14.5292, Gallons.ToCubicFeet(90.5));
    }
    if !cmp.Equal(Gallons.ToCubicFeet(123.0), 19.7469, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 19.7469, Gallons.ToCubicFeet(123.0));
    }
}

func TestConvertKnownGallonsToCubicInches(t * testing.T) {
    if !cmp.Equal(Gallons.ToCubicInches(66.0), 18309.6539, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 18309.6539, Gallons.ToCubicInches(66.0));
    }
    if !cmp.Equal(Gallons.ToCubicInches(2.4007), 666.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 666.0, Gallons.ToCubicInches(2.4007));
    }
    if !cmp.Equal(Gallons.ToCubicInches(77.0), 21361.2629, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 21361.2629, Gallons.ToCubicInches(77.0));
    }
}

func TestConvertKnownGallonsToOilBarrels(t * testing.T) {
    if !cmp.Equal(Gallons.ToOilBarrels(174.862), 5.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.0, Gallons.ToOilBarrels(174.862));
    }
    if !cmp.Equal(Gallons.ToOilBarrels(19409.6), 555.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 555.0, Gallons.ToOilBarrels(19409.6));
    }
    if !cmp.Equal(Gallons.ToOilBarrels(24.4806), 0.7, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.7, Gallons.ToOilBarrels(24.4806));
    }
}

func TestConvertKnownKilolitresToMillilitres(t * testing.T) {
    if !cmp.Equal(Kilolitres.ToMillilitres(0.09), 90000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 90000.0, Kilolitres.ToMillilitres(0.09));
    }
    if !cmp.Equal(Kilolitres.ToMillilitres(0.00123), 1230.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1230.0, Kilolitres.ToMillilitres(0.00123));
    }
    if !cmp.Equal(Kilolitres.ToMillilitres(1.2), 1.2e+6, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.2e+6, Kilolitres.ToMillilitres(1.2));
    }
}

func TestConvertKnownKilolitresToLitres(t * testing.T) {
    if !cmp.Equal(Kilolitres.ToLitres(1.2), 1200.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1200.0, Kilolitres.ToLitres(1.2));
    }
    if !cmp.Equal(Kilolitres.ToLitres(0.8), 800.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 800.0, Kilolitres.ToLitres(0.8));
    }
    if !cmp.Equal(Kilolitres.ToLitres(456.0), 456000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 456000.0, Kilolitres.ToLitres(456.0));
    }
}

func TestConvertKnownKilolitresToTeaspoons(t * testing.T) {
    if !cmp.Equal(Kilolitres.ToTeaspoons(0.7), 118255.41900799, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 118255.41900799, Kilolitres.ToTeaspoons(0.7));
    }
    if !cmp.Equal(Kilolitres.ToTeaspoons(0.01), 1689.363, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1689.363, Kilolitres.ToTeaspoons(0.01));
    }
    if !cmp.Equal(Kilolitres.ToTeaspoons(4.5), 760213.407908, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 760213.407908, Kilolitres.ToTeaspoons(4.5));
    }
}

func TestConvertKnownKilolitresToTablespoons(t * testing.T) {
    if !cmp.Equal(Kilolitres.ToTablespoons(0.3), 16893.631286856, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 16893.631286856, Kilolitres.ToTablespoons(0.3));
    }
    if !cmp.Equal(Kilolitres.ToTablespoons(2.9), 163305.10243961, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 163305.10243961, Kilolitres.ToTablespoons(2.9));
    }
    if !cmp.Equal(Kilolitres.ToTablespoons(0.067), 3772.911, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3772.911, Kilolitres.ToTablespoons(0.067));
    }
}

func TestConvertKnownKilolitresToQuarts(t * testing.T) {
    if !cmp.Equal(Kilolitres.ToQuarts(0.09), 79.18893, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 79.18893, Kilolitres.ToQuarts(0.09));
    }
    if !cmp.Equal(Kilolitres.ToQuarts(2.3), 2023.72, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2023.72, Kilolitres.ToQuarts(2.3));
    }
    if !cmp.Equal(Kilolitres.ToQuarts(0.67), 589.5176, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 589.5176, Kilolitres.ToQuarts(0.67));
    }
}

func TestConvertKnownKilolitresToPints(t * testing.T) {
    if !cmp.Equal(Kilolitres.ToPints(0.4), 703.902, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 703.902, Kilolitres.ToPints(0.4));
    }
    if !cmp.Equal(Kilolitres.ToPints(67.0), 117903.46835618, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 117903.46835618, Kilolitres.ToPints(67.0));
    }
    if !cmp.Equal(Kilolitres.ToPints(9.3), 16365.7, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 16365.7, Kilolitres.ToPints(9.3));
    }
}

func TestConvertKnownKilolitresToGallons(t * testing.T) {
    if !cmp.Equal(Kilolitres.ToGallons(109.0), 23976.638149, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 23976.638149, Kilolitres.ToGallons(109.0));
    }
    if !cmp.Equal(Kilolitres.ToGallons(7.2), 1583.78, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1583.78, Kilolitres.ToGallons(7.2));
    }
    if !cmp.Equal(Kilolitres.ToGallons(0.4), 87.9877, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 87.9877, Kilolitres.ToGallons(0.4));
    }
}

func TestConvertKnownKilolitresToFluidOunces(t * testing.T) {
    if !cmp.Equal(Kilolitres.ToFluidOunces(0.2), 7039.02, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7039.02, Kilolitres.ToFluidOunces(0.2));
    }
    if !cmp.Equal(Kilolitres.ToFluidOunces(4.8), 168936.31286856, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 168936.31286856, Kilolitres.ToFluidOunces(4.8));
    }
    if !cmp.Equal(Kilolitres.ToFluidOunces(6.0), 211170.391085, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 211170.391085, Kilolitres.ToFluidOunces(6.0));
    }
}

func TestConvertKnownKilolitresToUSTeaspoons(t * testing.T) {
    if !cmp.Equal(Kilolitres.ToUSTeaspoons(4.0), 811536.5448442, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 811536.5448442, Kilolitres.ToUSTeaspoons(4.0));
    }
    if !cmp.Equal(Kilolitres.ToUSTeaspoons(0.2), 40576.82724221160, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 40576.82724221160, Kilolitres.ToUSTeaspoons(0.2));
    }
    if !cmp.Equal(Kilolitres.ToUSTeaspoons(2.4), 486921.92690653, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 486921.92690653, Kilolitres.ToUSTeaspoons(2.4));
    }
}

func TestConvertKnownKilolitresToUSTablespoons(t * testing.T) {
    if !cmp.Equal(Kilolitres.ToUSTablespoons(1.3), 87916.45902479, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 87916.45902479, Kilolitres.ToUSTablespoons(1.3));
    }
    if !cmp.Equal(Kilolitres.ToUSTablespoons(0.6), 40576.82724221, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 40576.82724221, Kilolitres.ToUSTablespoons(0.6));
    }
    if !cmp.Equal(Kilolitres.ToUSTablespoons(0.03), 2028.841, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2028.841, Kilolitres.ToUSTablespoons(0.03));
    }
}

func TestConvertKnownKilolitresToUSQuarts(t * testing.T) {
    if !cmp.Equal(Kilolitres.ToUSQuarts(0.09), 95.10194, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 95.10194, Kilolitres.ToUSQuarts(0.09));
    }
    if !cmp.Equal(Kilolitres.ToUSQuarts(2.5), 2641.72, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2641.72, Kilolitres.ToUSQuarts(2.5));
    }
    if !cmp.Equal(Kilolitres.ToUSQuarts(178.9), 189041.52, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 189041.52, Kilolitres.ToUSQuarts(178.9));
    }
}

func TestConvertKnownKilolitresToUSPints(t * testing.T) {
    if !cmp.Equal(Kilolitres.ToUSPints(67.0), 141596.2200639, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 141596.2200639, Kilolitres.ToUSPints(67.0));
    }
    if !cmp.Equal(Kilolitres.ToUSPints(4.7), 9932.87, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9932.87, Kilolitres.ToUSPints(4.7));
    }
    if !cmp.Equal(Kilolitres.ToUSPints(108.9), 230146.69, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 230146.69, Kilolitres.ToUSPints(108.9));
    }
}

func TestConvertKnownKilolitresToUSGallons(t * testing.T) {
    if !cmp.Equal(Kilolitres.ToUSGallons(1.6), 422.675, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 422.675, Kilolitres.ToUSGallons(1.6));
    }
    if !cmp.Equal(Kilolitres.ToUSGallons(57.0), 15057.8, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 15057.8, Kilolitres.ToUSGallons(57.0));
    }
    if !cmp.Equal(Kilolitres.ToUSGallons(0.88), 232.4714, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 232.4714, Kilolitres.ToUSGallons(0.88));
    }
}

func TestConvertKnownKilolitresToUSFluidOunces(t * testing.T) {
    if !cmp.Equal(Kilolitres.ToUSFluidOunces(0.07), 2366.982, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2366.982, Kilolitres.ToUSFluidOunces(0.07));
    }
    if !cmp.Equal(Kilolitres.ToUSFluidOunces(4.2), 142018.89516765, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 142018.89516765, Kilolitres.ToUSFluidOunces(4.2));
    }
    if !cmp.Equal(Kilolitres.ToUSFluidOunces(12.0), 405768.27190759, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 405768.27190759, Kilolitres.ToUSFluidOunces(12.0));
    }
}

func TestConvertKnownKilolitresToUSCups(t * testing.T) {
    if !cmp.Equal(Kilolitres.ToUSCups(12.0), 50721.03405276, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 50721.03405276, Kilolitres.ToUSCups(12.0));
    }
    if !cmp.Equal(Kilolitres.ToUSCups(0.8), 3381.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3381.4, Kilolitres.ToUSCups(0.8));
    }
    if !cmp.Equal(Kilolitres.ToUSCups(6.2), 26205.86759392, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 26205.86759392, Kilolitres.ToUSCups(6.2));
    }
}

func TestConvertKnownKilolitresToCubicMetres(t * testing.T) {
    if !cmp.Equal(Kilolitres.ToCubicMetres(1000.0), 1000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1000.0, Kilolitres.ToCubicMetres(1000.0));
    }
    if !cmp.Equal(Kilolitres.ToCubicMetres(0.9), 0.9, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.9, Kilolitres.ToCubicMetres(0.9));
    }
    if !cmp.Equal(Kilolitres.ToCubicMetres(6.09), 6.09, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.09, Kilolitres.ToCubicMetres(6.09));
    }
}

func TestConvertKnownKilolitresToCubicFeet(t * testing.T) {
    if !cmp.Equal(Kilolitres.ToCubicFeet(0.0566337), 2.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.0, Kilolitres.ToCubicFeet(0.0566337));
    }
    if !cmp.Equal(Kilolitres.ToCubicFeet(7.9), 278.986, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 278.986, Kilolitres.ToCubicFeet(7.9));
    }
    if !cmp.Equal(Kilolitres.ToCubicFeet(88.0), 3107.69, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3107.69, Kilolitres.ToCubicFeet(88.0));
    }
}

func TestConvertKnownKilolitresToCubicInches(t * testing.T) {
    if !cmp.Equal(Kilolitres.ToCubicInches(6.0), 366142.19999, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 366142.19999, Kilolitres.ToCubicInches(6.0));
    }
    if !cmp.Equal(Kilolitres.ToCubicInches(0.1), 6102.37, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6102.37, Kilolitres.ToCubicInches(0.1));
    }
    if !cmp.Equal(Kilolitres.ToCubicInches(0.8), 48818.959, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 48818.959, Kilolitres.ToCubicInches(0.8));
    }
}

func TestConvertKnownKilolitresToOilBarrels(t * testing.T) {
    if !cmp.Equal(Kilolitres.ToOilBarrels(0.476962), 3.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.0, Kilolitres.ToOilBarrels(0.476962));
    }
    if !cmp.Equal(Kilolitres.ToOilBarrels(4.0), 25.1592, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 25.1592, Kilolitres.ToOilBarrels(4.0));
    }
    if !cmp.Equal(Kilolitres.ToOilBarrels(6.0), 37.7389, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 37.7389, Kilolitres.ToOilBarrels(6.0));
    }
}

func TestConvertKnownLitresToMillilitres(t * testing.T) {
    if !cmp.Equal(Litres.ToMillilitres(34.0), 34000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 34000.0, Litres.ToMillilitres(34.0));
    }
    if !cmp.Equal(Litres.ToMillilitres(0.67), 670.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 670.0, Litres.ToMillilitres(0.67));
    }
    if !cmp.Equal(Litres.ToMillilitres(1.09), 1090.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1090.0, Litres.ToMillilitres(1.09));
    }
}

func TestConvertKnownLitresToKilolitres(t * testing.T) {
    if !cmp.Equal(Litres.ToKilolitres(200.0), 0.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.2, Litres.ToKilolitres(200.0));
    }
    if !cmp.Equal(Litres.ToKilolitres(12345.0), 12.345, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12.345, Litres.ToKilolitres(12345.0));
    }
    if !cmp.Equal(Litres.ToKilolitres(80.0), 0.08, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.08, Litres.ToKilolitres(80.0));
    }
}

func TestConvertKnownLitresToTeaspoons(t * testing.T) {
    if !cmp.Equal(Litres.ToTeaspoons(3.0), 506.809, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 506.809, Litres.ToTeaspoons(3.0));
    }
    if !cmp.Equal(Litres.ToTeaspoons(0.2), 33.7873, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 33.7873, Litres.ToTeaspoons(0.2));
    }
    if !cmp.Equal(Litres.ToTeaspoons(4.2), 709.533, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 709.533, Litres.ToTeaspoons(4.2));
    }
}

func TestConvertKnownLitresToTablespoons(t * testing.T) {
    if !cmp.Equal(Litres.ToTablespoons(3.0), 168.936, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 168.936, Litres.ToTablespoons(3.0));
    }
    if !cmp.Equal(Litres.ToTablespoons(0.4), 22.5248, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 22.5248, Litres.ToTablespoons(0.4));
    }
    if !cmp.Equal(Litres.ToTablespoons(67.0), 3772.91, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3772.91, Litres.ToTablespoons(67.0));
    }
}

func TestConvertKnownLitresToQuarts(t * testing.T) {
    if !cmp.Equal(Litres.ToQuarts(54.0), 47.5134, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 47.5134, Litres.ToQuarts(54.0));
    }
    if !cmp.Equal(Litres.ToQuarts(2.0), 1.75975, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.75975, Litres.ToQuarts(2.0));
    }
    if !cmp.Equal(Litres.ToQuarts(0.7), 0.615914, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.615914, Litres.ToQuarts(0.7));
    }
}

func TestConvertKnownLitresToPints(t * testing.T) {
    if !cmp.Equal(Litres.ToPints(0.5), 0.879877, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.879877, Litres.ToPints(0.5));
    }
    if !cmp.Equal(Litres.ToPints(145.0), 255.164, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 255.164, Litres.ToPints(145.0));
    }
    if !cmp.Equal(Litres.ToPints(9.1), 16.0138, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 16.0138, Litres.ToPints(9.1));
    }
}

func TestConvertKnownLitresToGallons(t * testing.T) {
    if !cmp.Equal(Litres.ToGallons(12.9), 2.837603, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.837603, Litres.ToGallons(12.9));
    }
    if !cmp.Equal(Litres.ToGallons(109.0), 23.9766, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 23.9766, Litres.ToGallons(109.0));
    }
    if !cmp.Equal(Litres.ToGallons(67.0), 14.7379, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 14.7379, Litres.ToGallons(67.0));
    }
}

func TestConvertKnownLitresToFluidOunces(t * testing.T) {
    if !cmp.Equal(Litres.ToFluidOunces(5.0), 175.975, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 175.975, Litres.ToFluidOunces(5.0));
    }
    if !cmp.Equal(Litres.ToFluidOunces(0.3), 10.5585, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 10.5585, Litres.ToFluidOunces(0.3));
    }
    if !cmp.Equal(Litres.ToFluidOunces(1.1), 38.7146, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 38.7146, Litres.ToFluidOunces(1.1));
    }
}

func TestConvertKnownLitresToUSTeaspoons(t * testing.T) {
    if !cmp.Equal(Litres.ToUSTeaspoons(12.0), 2434.61, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2434.61, Litres.ToUSTeaspoons(12.0));
    }
    if !cmp.Equal(Litres.ToUSTeaspoons(0.7), 142.019, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 142.019, Litres.ToUSTeaspoons(0.7));
    }
    if !cmp.Equal(Litres.ToUSTeaspoons(89.9), 18239.29, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 18239.29, Litres.ToUSTeaspoons(89.9));
    }
}

func TestConvertKnownLitresToUSTablespoons(t * testing.T) {
    if !cmp.Equal(Litres.ToUSTablespoons(12.0), 811.537, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 811.537, Litres.ToUSTablespoons(12.0));
    }
    if !cmp.Equal(Litres.ToUSTablespoons(5.6), 378.717, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 378.717, Litres.ToUSTablespoons(5.6));
    }
    if !cmp.Equal(Litres.ToUSTablespoons(0.5), 33.814, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 33.814, Litres.ToUSTablespoons(0.5));
    }
}

func TestConvertKnownLitresToUSQuarts(t * testing.T) {
    if !cmp.Equal(Litres.ToUSQuarts(12.0), 12.6803, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12.6803, Litres.ToUSQuarts(12.0));
    }
    if !cmp.Equal(Litres.ToUSQuarts(1.09), 1.15179, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.15179, Litres.ToUSQuarts(1.09));
    }
    if !cmp.Equal(Litres.ToUSQuarts(5.5), 5.81179, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.81179, Litres.ToUSQuarts(5.5));
    }
}

func TestConvertKnownLitresToUSPints(t * testing.T) {
    if !cmp.Equal(Litres.ToUSPints(3.4), 7.18548, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.18548, Litres.ToUSPints(3.4));
    }
    if !cmp.Equal(Litres.ToUSPints(0.8), 1.6907, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.6907, Litres.ToUSPints(0.8));
    }
    if !cmp.Equal(Litres.ToUSPints(3000.0), 6340.129, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6340.129, Litres.ToUSPints(3000.0));
    }
}

func TestConvertKnownLitresToUSGallons(t * testing.T) {
    if !cmp.Equal(Litres.ToUSGallons(109.1), 28.821171, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 28.821171, Litres.ToUSGallons(109.1));
    }
    if !cmp.Equal(Litres.ToUSGallons(41.5), 10.96314, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 10.96314, Litres.ToUSGallons(41.5));
    }
    if !cmp.Equal(Litres.ToUSGallons(0.8), 0.211338, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.211338, Litres.ToUSGallons(0.8));
    }
}

func TestConvertKnownLitresToUSFluidOunces(t * testing.T) {
    if !cmp.Equal(Litres.ToUSFluidOunces(81.0), 2738.94, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2738.94, Litres.ToUSFluidOunces(81.0));
    }
    if !cmp.Equal(Litres.ToUSFluidOunces(7.3), 246.842, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 246.842, Litres.ToUSFluidOunces(7.3));
    }
    if !cmp.Equal(Litres.ToUSFluidOunces(0.65), 21.97911, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 21.97911, Litres.ToUSFluidOunces(0.65));
    }
}

func TestConvertKnownLitresToUSCups(t * testing.T) {
    if !cmp.Equal(Litres.ToUSCups(0.9), 3.80408, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.80408, Litres.ToUSCups(0.9));
    }
    if !cmp.Equal(Litres.ToUSCups(103.9), 439.15962, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 439.15962, Litres.ToUSCups(103.9));
    }
    if !cmp.Equal(Litres.ToUSCups(71.6), 302.6355, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 302.6355, Litres.ToUSCups(71.6));
    }
}

func TestConvertKnownLitresToCubicMetres(t * testing.T) {
    if !cmp.Equal(Litres.ToCubicMetres(400.5), 0.4005, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.4005, Litres.ToCubicMetres(400.5));
    }
    if !cmp.Equal(Litres.ToCubicMetres(900.0), 0.9, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.9, Litres.ToCubicMetres(900.0));
    }
    if !cmp.Equal(Litres.ToCubicMetres(6090.0), 6.09, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.09, Litres.ToCubicMetres(6090.0));
    }
}

func TestConvertKnownLitresToCubicFeet(t * testing.T) {
    if !cmp.Equal(Litres.ToCubicFeet(5.0), 0.176573, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.176573, Litres.ToCubicFeet(5.0));
    }
    if !cmp.Equal(Litres.ToCubicFeet(84.9505), 3.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.0, Litres.ToCubicFeet(84.9505));
    }
    if !cmp.Equal(Litres.ToCubicFeet(6.0), 0.211888, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.211888, Litres.ToCubicFeet(6.0));
    }
}

func TestConvertKnownLitresToCubicInches(t * testing.T) {
    if !cmp.Equal(Litres.ToCubicInches(666.0), 40641.7842, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 40641.7842, Litres.ToCubicInches(666.0));
    }
    if !cmp.Equal(Litres.ToCubicInches(788.0), 48086.675599, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 48086.675599, Litres.ToCubicInches(788.0));
    }
    if !cmp.Equal(Litres.ToCubicInches(4.0), 244.095, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 244.095, Litres.ToCubicInches(4.0));
    }
}

func TestConvertKnownLitresToOilBarrels(t * testing.T) {
    if !cmp.Equal(Litres.ToOilBarrels(8744.3), 55.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 55.0, Litres.ToOilBarrels(8744.3));
    }
    if !cmp.Equal(Litres.ToOilBarrels(1234.0), 7.761626, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.761626, Litres.ToOilBarrels(1234.0));
    }
    if !cmp.Equal(Litres.ToOilBarrels(953.924), 6.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.0, Litres.ToOilBarrels(953.924));
    }
}

func TestConvertKnownMillilitresToLitres(t * testing.T) {
    if !cmp.Equal(Millilitres.ToLitres(1900.0), 1.9, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.9, Millilitres.ToLitres(1900.0));
    }
    if !cmp.Equal(Millilitres.ToLitres(56789.0), 56.789, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 56.789, Millilitres.ToLitres(56789.0));
    }
    if !cmp.Equal(Millilitres.ToLitres(567.0), 0.567, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.567, Millilitres.ToLitres(567.0));
    }
}

func TestConvertKnownMillilitresToKilolitres(t * testing.T) {
    if !cmp.Equal(Millilitres.ToKilolitres(10060000.0), 10.06, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 10.06, Millilitres.ToKilolitres(10060000.0));
    }
    if !cmp.Equal(Millilitres.ToKilolitres(987654.0), 0.987654, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.987654, Millilitres.ToKilolitres(987654.0));
    }
    if !cmp.Equal(Millilitres.ToKilolitres(405000.0), 0.405, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.405, Millilitres.ToKilolitres(405000.0));
    }
}

func TestConvertKnownMillilitresToTeaspoons(t * testing.T) {
    if !cmp.Equal(Millilitres.ToTeaspoons(1.0), 0.168936, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.168936, Millilitres.ToTeaspoons(1.0));
    }
    if !cmp.Equal(Millilitres.ToTeaspoons(56.0), 9.46043, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.46043, Millilitres.ToTeaspoons(56.0));
    }
    if !cmp.Equal(Millilitres.ToTeaspoons(12.3), 2.077917, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.077917, Millilitres.ToTeaspoons(12.3));
    }
}

func TestConvertKnownMillilitresToTablespoons(t * testing.T) {
    if !cmp.Equal(Millilitres.ToTablespoons(109.0), 6.13802, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.13802, Millilitres.ToTablespoons(109.0));
    }
    if !cmp.Equal(Millilitres.ToTablespoons(88.0), 4.95547, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.95547, Millilitres.ToTablespoons(88.0));
    }
    if !cmp.Equal(Millilitres.ToTablespoons(12.0), 0.675745, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.675745, Millilitres.ToTablespoons(12.0));
    }
}

func TestConvertKnownMillilitresToQuarts(t * testing.T) {
    if !cmp.Equal(Millilitres.ToQuarts(890.0), 0.783091, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.783091, Millilitres.ToQuarts(890.0));
    }
    if !cmp.Equal(Millilitres.ToQuarts(12345.0), 10.862081, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 10.862081, Millilitres.ToQuarts(12345.0));
    }
    if !cmp.Equal(Millilitres.ToQuarts(129.0), 0.113504, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.113504, Millilitres.ToQuarts(129.0));
    }
}

func TestConvertKnownMillilitresToPints(t * testing.T) {
    if !cmp.Equal(Millilitres.ToPints(124.0), 0.218209, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.218209, Millilitres.ToPints(124.0));
    }
    if !cmp.Equal(Millilitres.ToPints(99.0), 0.174216, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.174216, Millilitres.ToPints(99.0));
    }
    if !cmp.Equal(Millilitres.ToPints(607.3), 1.0686986, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.0686986, Millilitres.ToPints(607.3));
    }
}

func TestConvertKnownMillilitresToGallons(t * testing.T) {
    if !cmp.Equal(Millilitres.ToGallons(1234.0), 0.2714421, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.2714421, Millilitres.ToGallons(1234.0));
    }
    if !cmp.Equal(Millilitres.ToGallons(9000.0), 1.979723, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.979723, Millilitres.ToGallons(9000.0));
    }
    if !cmp.Equal(Millilitres.ToGallons(10209.98), 2.2458816257, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.2458816257, Millilitres.ToGallons(10209.98));
    }
}

func TestConvertKnownMillilitresToFluidOunces(t * testing.T) {
    if !cmp.Equal(Millilitres.ToFluidOunces(78.0), 2.74522, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.74522, Millilitres.ToFluidOunces(78.0));
    }
    if !cmp.Equal(Millilitres.ToFluidOunces(12.9), 0.4540165, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.4540165, Millilitres.ToFluidOunces(12.9));
    }
    if !cmp.Equal(Millilitres.ToFluidOunces(1009.0), 35.51184, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 35.51184, Millilitres.ToFluidOunces(1009.0));
    }
}

func TestConvertKnownMillilitresToUSTeaspoons(t * testing.T) {
    if !cmp.Equal(Millilitres.ToUSTeaspoons(100.0), 20.2884, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 20.2884, Millilitres.ToUSTeaspoons(100.0));
    }
    if !cmp.Equal(Millilitres.ToUSTeaspoons(12.3), 2.495476, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.495476, Millilitres.ToUSTeaspoons(12.3));
    }
    if !cmp.Equal(Millilitres.ToUSTeaspoons(69.0), 13.999, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 13.999, Millilitres.ToUSTeaspoons(69.0));
    }
}

func TestConvertKnownMillilitresToUSTablespoons(t * testing.T) {
    if !cmp.Equal(Millilitres.ToUSTablespoons(38.0), 2.56987, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.56987, Millilitres.ToUSTablespoons(38.0));
    }
    if !cmp.Equal(Millilitres.ToUSTablespoons(1023.0), 69.18349, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 69.18349, Millilitres.ToUSTablespoons(1023.0));
    }
    if !cmp.Equal(Millilitres.ToUSTablespoons(88.8), 6.00537, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.00537, Millilitres.ToUSTablespoons(88.8));
    }
}

func TestConvertKnownMillilitresToUSQuarts(t * testing.T) {
    if !cmp.Equal(Millilitres.ToUSQuarts(1009.0), 1.066198, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.066198, Millilitres.ToUSQuarts(1009.0));
    }
    if !cmp.Equal(Millilitres.ToUSQuarts(4567.0), 4.825895, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.825895, Millilitres.ToUSQuarts(4567.0));
    }
    if !cmp.Equal(Millilitres.ToUSQuarts(8009.0), 8.463016, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8.463016, Millilitres.ToUSQuarts(8009.0));
    }
}

func TestConvertKnownMillilitresToUSPints(t * testing.T) {
    if !cmp.Equal(Millilitres.ToUSPints(110.0), 0.232471, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.232471, Millilitres.ToUSPints(110.0));
    }
    if !cmp.Equal(Millilitres.ToUSPints(2032.0), 4.294381, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.294381, Millilitres.ToUSPints(2032.0));
    }
    if !cmp.Equal(Millilitres.ToUSPints(1000.9), 2.11527846, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.11527846, Millilitres.ToUSPints(1000.9));
    }
}

func TestConvertKnownMillilitresToUSGallons(t * testing.T) {
    if !cmp.Equal(Millilitres.ToUSGallons(5000.0), 1.32086, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.32086, Millilitres.ToUSGallons(5000.0));
    }
    if !cmp.Equal(Millilitres.ToUSGallons(123456.0), 32.6136249, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 32.6136249, Millilitres.ToUSGallons(123456.0));
    }
    if !cmp.Equal(Millilitres.ToUSGallons(900.0), 0.237755, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.237755, Millilitres.ToUSGallons(900.0));
    }
}

func TestConvertKnownMillilitresToUSFluidOunces(t * testing.T) {
    if !cmp.Equal(Millilitres.ToUSFluidOunces(67.0), 2.26554, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.26554, Millilitres.ToUSFluidOunces(67.0));
    }
    if !cmp.Equal(Millilitres.ToUSFluidOunces(12.6), 0.4260567, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.4260567, Millilitres.ToUSFluidOunces(12.6));
    }
    if !cmp.Equal(Millilitres.ToUSFluidOunces(11009.0), 372.25858, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 372.25858, Millilitres.ToUSFluidOunces(11009.0));
    }
}

func TestConvertKnownMillilitresToUSCups(t * testing.T) {
    if !cmp.Equal(Millilitres.ToUSCups(348.0), 1.47091, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.47091, Millilitres.ToUSCups(348.0));
    }
    if !cmp.Equal(Millilitres.ToUSCups(12.9), 0.05452511, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.05452511, Millilitres.ToUSCups(12.9));
    }
    if !cmp.Equal(Millilitres.ToUSCups(700.0), 2.95873, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.95873, Millilitres.ToUSCups(700.0));
    }
}

func TestConvertKnownMillilitresToCubicMetres(t * testing.T) {
    if !cmp.Equal(Millilitres.ToCubicMetres(9999999.0), 9.999999, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.999999, Millilitres.ToCubicMetres(9999999.0));
    }
    if !cmp.Equal(Millilitres.ToCubicMetres(123456.0), 0.123456, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.123456, Millilitres.ToCubicMetres(123456.0));
    }
    if !cmp.Equal(Millilitres.ToCubicMetres(400500.0), 0.4005, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.4005, Millilitres.ToCubicMetres(400500.0));
    }
}

func TestConvertKnownMillilitresToCubicFeet(t * testing.T) {
    if !cmp.Equal(Millilitres.ToCubicFeet(254852.0), 9.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.0, Millilitres.ToCubicFeet(254852.0));
    }
    if !cmp.Equal(Millilitres.ToCubicFeet(6000.0), 0.211888, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.211888, Millilitres.ToCubicFeet(6000.0));
    }
    if !cmp.Equal(Millilitres.ToCubicFeet(70792.1), 2.5, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.5, Millilitres.ToCubicFeet(70792.1));
    }
}

func TestConvertKnownMillilitresToCubicInches(t * testing.T) {
    if !cmp.Equal(Millilitres.ToCubicInches(777.0), 47.4154, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 47.4154, Millilitres.ToCubicInches(777.0));
    }
    if !cmp.Equal(Millilitres.ToCubicInches(98.3224), 5.999987, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.999987, Millilitres.ToCubicInches(98.3224));
    }
    if !cmp.Equal(Millilitres.ToCubicInches(12.0), 0.732285, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.732285, Millilitres.ToCubicInches(12.0));
    }
}

func TestConvertKnownMillilitresToOilBarrels(t * testing.T) {
    if !cmp.Equal(Millilitres.ToOilBarrels(47696.2), 0.3, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.3, Millilitres.ToOilBarrels(47696.2));
    }
    if !cmp.Equal(Millilitres.ToOilBarrels(143089.0), 0.9, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.9, Millilitres.ToOilBarrels(143089.0));
    }
    if !cmp.Equal(Millilitres.ToOilBarrels(317.97459), 0.002, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.002, Millilitres.ToOilBarrels(317.97459));
    }
}

func TestConvertKnownOilBarrelsToMillilitres(t * testing.T) {
    if !cmp.Equal(OilBarrels.ToMillilitres(0.8), 127189.6, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 127189.6, OilBarrels.ToMillilitres(0.8));
    }
    if !cmp.Equal(OilBarrels.ToMillilitres(6.0), 953922.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 953922.0, OilBarrels.ToMillilitres(6.0));
    }
    if !cmp.Equal(OilBarrels.ToMillilitres(0.06289182), 9998.981786, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9998.981786, OilBarrels.ToMillilitres(0.06289182));
    }
}

func TestConvertKnownOilBarrelsToLitres(t * testing.T) {
    if !cmp.Equal(OilBarrels.ToLitres(12.0), 1907.85, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1907.85, OilBarrels.ToLitres(12.0));
    }
    if !cmp.Equal(OilBarrels.ToLitres(6.0), 953.924, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 953.924, OilBarrels.ToLitres(6.0));
    }
    if !cmp.Equal(OilBarrels.ToLitres(77.0), 12242.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12242.0, OilBarrels.ToLitres(77.0));
    }
}

func TestConvertKnownOilBarrelsToKilolitres(t * testing.T) {
    if !cmp.Equal(OilBarrels.ToKilolitres(12.0), 1.90785, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.90785, OilBarrels.ToKilolitres(12.0));
    }
    if !cmp.Equal(OilBarrels.ToKilolitres(8.0), 1.2719, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.2719, OilBarrels.ToKilolitres(8.0));
    }
    if !cmp.Equal(OilBarrels.ToKilolitres(77.0), 12.242, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12.242, OilBarrels.ToKilolitres(77.0));
    }
}

func TestConvertKnownOilBarrelsToTeaspoons(t * testing.T) {
    if !cmp.Equal(OilBarrels.ToTeaspoons(0.6), 16115.219, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 16115.219, OilBarrels.ToTeaspoons(0.6));
    }
    if !cmp.Equal(OilBarrels.ToTeaspoons(4.0), 107434.8, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 107434.8, OilBarrels.ToTeaspoons(4.0));
    }
    if !cmp.Equal(OilBarrels.ToTeaspoons(6.7), 179953.29, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 179953.29, OilBarrels.ToTeaspoons(6.7));
    }
}

func TestConvertKnownOilBarrelsToTablespoons(t * testing.T) {
    if !cmp.Equal(OilBarrels.ToTablespoons(0.7), 6267.04, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6267.04, OilBarrels.ToTablespoons(0.7));
    }
    if !cmp.Equal(OilBarrels.ToTablespoons(8.0), 71623.279, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 71623.279, OilBarrels.ToTablespoons(8.0));
    }
    if !cmp.Equal(OilBarrels.ToTablespoons(10.052487), 89999.011387, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 89999.011387, OilBarrels.ToTablespoons(10.052487));
    }
}

func TestConvertKnownOilBarrelsToQuarts(t * testing.T) {
    if !cmp.Equal(OilBarrels.ToQuarts(88.0), 12310.232, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12310.232, OilBarrels.ToQuarts(88.0));
    }
    if !cmp.Equal(OilBarrels.ToQuarts(12.0), 1678.67, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1678.67, OilBarrels.ToQuarts(12.0));
    }
    if !cmp.Equal(OilBarrels.ToQuarts(6.0), 839.336, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 839.336, OilBarrels.ToQuarts(6.0));
    }
}

func TestConvertKnownOilBarrelsToPints(t * testing.T) {
    if !cmp.Equal(OilBarrels.ToPints(8.0), 2238.23, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2238.23, OilBarrels.ToPints(8.0));
    }
    if !cmp.Equal(OilBarrels.ToPints(6.0), 1678.67, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1678.67, OilBarrels.ToPints(6.0));
    }
    if !cmp.Equal(OilBarrels.ToPints(0.275218), 77.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 77.0, OilBarrels.ToPints(0.275218));
    }
}

func TestConvertKnownOilBarrelsToGallons(t * testing.T) {
    if !cmp.Equal(OilBarrels.ToGallons(4.0), 139.889, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 139.889, OilBarrels.ToGallons(4.0));
    }
    if !cmp.Equal(OilBarrels.ToGallons(6.0), 209.834, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 209.834, OilBarrels.ToGallons(6.0));
    }
    if !cmp.Equal(OilBarrels.ToGallons(18.0), 629.502, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 629.502, OilBarrels.ToGallons(18.0));
    }
}

func TestConvertKnownOilBarrelsToFluidOunces(t * testing.T) {
    if !cmp.Equal(OilBarrels.ToFluidOunces(0.5), 2797.79, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2797.79, OilBarrels.ToFluidOunces(0.5));
    }
    if !cmp.Equal(OilBarrels.ToFluidOunces(6.0), 33573.4199, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 33573.4199, OilBarrels.ToFluidOunces(6.0));
    }
    if !cmp.Equal(OilBarrels.ToFluidOunces(77.0), 430858.889, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 430858.889, OilBarrels.ToFluidOunces(77.0));
    }
}

func TestConvertKnownOilBarrelsToUSTeaspoons(t * testing.T) {
    if !cmp.Equal(OilBarrels.ToUSTeaspoons(0.3), 9676.8, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9676.8, OilBarrels.ToUSTeaspoons(0.3));
    }
    if !cmp.Equal(OilBarrels.ToUSTeaspoons(7.0), 225792.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 225792.0, OilBarrels.ToUSTeaspoons(7.0));
    }
    if !cmp.Equal(OilBarrels.ToUSTeaspoons(1.5), 48384.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 48384.0, OilBarrels.ToUSTeaspoons(1.5));
    }
}

func TestConvertKnownOilBarrelsToUSTablespoons(t * testing.T) {
    if !cmp.Equal(OilBarrels.ToUSTablespoons(0.2), 2150.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2150.4, OilBarrels.ToUSTablespoons(0.2));
    }
    if !cmp.Equal(OilBarrels.ToUSTablespoons(6.0), 64512.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 64512.0, OilBarrels.ToUSTablespoons(6.0));
    }
    if !cmp.Equal(OilBarrels.ToUSTablespoons(77.0), 827904.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 827904.0, OilBarrels.ToUSTablespoons(77.0));
    }
}

func TestConvertKnownOilBarrelsToUSQuarts(t * testing.T) {
    if !cmp.Equal(OilBarrels.ToUSQuarts(4.5), 756.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 756.0, OilBarrels.ToUSQuarts(4.5));
    }
    if !cmp.Equal(OilBarrels.ToUSQuarts(77.0), 12936.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12936.0, OilBarrels.ToUSQuarts(77.0));
    }
    if !cmp.Equal(OilBarrels.ToUSQuarts(0.7), 117.6, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 117.6, OilBarrels.ToUSQuarts(0.7));
    }
}

func TestConvertKnownOilBarrelsToUSPints(t * testing.T) {
    if !cmp.Equal(OilBarrels.ToUSPints(7.8), 2620.8, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2620.8, OilBarrels.ToUSPints(7.8));
    }
    if !cmp.Equal(OilBarrels.ToUSPints(0.7), 235.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 235.2, OilBarrels.ToUSPints(0.7));
    }
    if !cmp.Equal(OilBarrels.ToUSPints(3.0), 1008.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1008.0, OilBarrels.ToUSPints(3.0));
    }
}

func TestConvertKnownOilBarrelsToUSGallons(t * testing.T) {
    if !cmp.Equal(OilBarrels.ToUSGallons(78.0), 3276.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3276.0, OilBarrels.ToUSGallons(78.0));
    }
    if !cmp.Equal(OilBarrels.ToUSGallons(3.0), 126.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 126.0, OilBarrels.ToUSGallons(3.0));
    }
    if !cmp.Equal(OilBarrels.ToUSGallons(777.0), 32634.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 32634.0, OilBarrels.ToUSGallons(777.0));
    }
}

func TestConvertKnownOilBarrelsToUSFluidOunces(t * testing.T) {
    if !cmp.Equal(OilBarrels.ToUSFluidOunces(4.9), 26342.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 26342.4, OilBarrels.ToUSFluidOunces(4.9));
    }
    if !cmp.Equal(OilBarrels.ToUSFluidOunces(0.4), 2150.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2150.4, OilBarrels.ToUSFluidOunces(0.4));
    }
    if !cmp.Equal(OilBarrels.ToUSFluidOunces(3.0), 16128.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 16128.0, OilBarrels.ToUSFluidOunces(3.0));
    }
}

func TestConvertKnownOilBarrelsToUSCups(t * testing.T) {
    if !cmp.Equal(OilBarrels.ToUSCups(55.0), 36434.5849, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 36434.5849, OilBarrels.ToUSCups(55.0));
    }
    if !cmp.Equal(OilBarrels.ToUSCups(0.686847), 455.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 455.0, OilBarrels.ToUSCups(0.686847));
    }
    if !cmp.Equal(OilBarrels.ToUSCups(9.2), 6094.51, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6094.51, OilBarrels.ToUSCups(9.2));
    }
}

func TestConvertKnownOilBarrelsToCubicMetres(t * testing.T) {
    if !cmp.Equal(OilBarrels.ToCubicMetres(7.0), 1.1129112, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.1129112, OilBarrels.ToCubicMetres(7.0));
    }
    if !cmp.Equal(OilBarrels.ToCubicMetres(3.0), 0.476962, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.476962, OilBarrels.ToCubicMetres(3.0));
    }
    if !cmp.Equal(OilBarrels.ToCubicMetres(78.0), 12.401, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12.401, OilBarrels.ToCubicMetres(78.0));
    }
}

func TestConvertKnownOilBarrelsToCubicFeet(t * testing.T) {
    if !cmp.Equal(OilBarrels.ToCubicFeet(88.0), 494.083, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 494.083, OilBarrels.ToCubicFeet(88.0));
    }
    if !cmp.Equal(OilBarrels.ToCubicFeet(3.0), 16.8438, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 16.8438, OilBarrels.ToCubicFeet(3.0));
    }
    if !cmp.Equal(OilBarrels.ToCubicFeet(11.0), 61.7604, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 61.7604, OilBarrels.ToCubicFeet(11.0));
    }
}

func TestConvertKnownOilBarrelsToCubicInches(t * testing.T) {
    if !cmp.Equal(OilBarrels.ToCubicInches(100.4), 974080.8, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 974080.8, OilBarrels.ToCubicInches(100.4));
    }
    if !cmp.Equal(OilBarrels.ToCubicInches(5.0), 48510.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 48510.0, OilBarrels.ToCubicInches(5.0));
    }
    if !cmp.Equal(OilBarrels.ToCubicInches(66.0), 640332.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 640332.0, OilBarrels.ToCubicInches(66.0));
    }
}

func TestConvertKnownPintsToMillilitres(t * testing.T) {
    if !cmp.Equal(Pints.ToMillilitres(0.7), 397.783, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 397.783, Pints.ToMillilitres(0.7));
    }
    if !cmp.Equal(Pints.ToMillilitres(5.6), 3182.26, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3182.26, Pints.ToMillilitres(5.6));
    }
    if !cmp.Equal(Pints.ToMillilitres(6.0), 3409.57, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3409.57, Pints.ToMillilitres(6.0));
    }
}

func TestConvertKnownPintsToLitres(t * testing.T) {
    if !cmp.Equal(Pints.ToLitres(6.0), 3.40957, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.40957, Pints.ToLitres(6.0));
    }
    if !cmp.Equal(Pints.ToLitres(0.123), 0.069896134, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.069896134, Pints.ToLitres(0.123));
    }
    if !cmp.Equal(Pints.ToLitres(45.9), 26.08319, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 26.08319, Pints.ToLitres(45.9));
    }
}

func TestConvertKnownPintsToKilolitres(t * testing.T) {
    if !cmp.Equal(Pints.ToKilolitres(456.0), 0.259127, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.259127, Pints.ToKilolitres(456.0));
    }
    if !cmp.Equal(Pints.ToKilolitres(10450.0), 5.9383301, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.9383301, Pints.ToKilolitres(10450.0));
    }
    if !cmp.Equal(Pints.ToKilolitres(9000.9), 5.11486269, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.11486269, Pints.ToKilolitres(9000.9));
    }
}

func TestConvertKnownPintsToTeaspoons(t * testing.T) {
    if !cmp.Equal(Pints.ToTeaspoons(5.0), 480.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 480.0, Pints.ToTeaspoons(5.0));
    }
    if !cmp.Equal(Pints.ToTeaspoons(0.3), 28.8, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 28.8, Pints.ToTeaspoons(0.3));
    }
    if !cmp.Equal(Pints.ToTeaspoons(190.0), 18240.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 18240.0, Pints.ToTeaspoons(190.0));
    }
}

func TestConvertKnownPintsToTablespoons(t * testing.T) {
    if !cmp.Equal(Pints.ToTablespoons(187.0), 5984.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5984.0, Pints.ToTablespoons(187.0));
    }
    if !cmp.Equal(Pints.ToTablespoons(54.5), 1743.999, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1743.999, Pints.ToTablespoons(54.5));
    }
    if !cmp.Equal(Pints.ToTablespoons(0.33), 10.56, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 10.56, Pints.ToTablespoons(0.33));
    }
}

func TestConvertKnownPintsToQuarts(t * testing.T) {
    if !cmp.Equal(Pints.ToQuarts(5.6), 2.8, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.8, Pints.ToQuarts(5.6));
    }
    if !cmp.Equal(Pints.ToQuarts(109.0), 54.5, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 54.5, Pints.ToQuarts(109.0));
    }
    if !cmp.Equal(Pints.ToQuarts(0.3), 0.15, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.15, Pints.ToQuarts(0.3));
    }
}

func TestConvertKnownPintsToGallons(t * testing.T) {
    if !cmp.Equal(Pints.ToGallons(0.3), 0.0375, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0375, Pints.ToGallons(0.3));
    }
    if !cmp.Equal(Pints.ToGallons(800.0), 100.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 100.0, Pints.ToGallons(800.0));
    }
    if !cmp.Equal(Pints.ToGallons(1.5), 0.1875, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.1875, Pints.ToGallons(1.5));
    }
}

func TestConvertKnownPintsToFluidOunces(t * testing.T) {
    if !cmp.Equal(Pints.ToFluidOunces(1.5), 30.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 30.0, Pints.ToFluidOunces(1.5));
    }
    if !cmp.Equal(Pints.ToFluidOunces(789.0), 15780.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 15780.0, Pints.ToFluidOunces(789.0));
    }
    if !cmp.Equal(Pints.ToFluidOunces(1020.8), 20416.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 20416.0, Pints.ToFluidOunces(1020.8));
    }
}

func TestConvertKnownPintsToUSTeaspoons(t * testing.T) {
    if !cmp.Equal(Pints.ToUSTeaspoons(1020.8), 117689.298303295, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 117689.298303295, Pints.ToUSTeaspoons(1020.8));
    }
    if !cmp.Equal(Pints.ToUSTeaspoons(0.4), 46.1165, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 46.1165, Pints.ToUSTeaspoons(0.4));
    }
    if !cmp.Equal(Pints.ToUSTeaspoons(104.0), 11990.2890120912, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 11990.2890120912, Pints.ToUSTeaspoons(104.0));
    }
}

func TestConvertKnownPintsToUSTablespoons(t * testing.T) {
    if !cmp.Equal(Pints.ToUSTablespoons(104.0), 3996.76, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3996.76, Pints.ToUSTablespoons(104.0));
    }
    if !cmp.Equal(Pints.ToUSTablespoons(5.6), 215.21, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 215.21, Pints.ToUSTablespoons(5.6));
    }
    if !cmp.Equal(Pints.ToUSTablespoons(0.4), 15.3722, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 15.3722, Pints.ToUSTablespoons(0.4));
    }
}

func TestConvertKnownPintsToUSQuarts(t * testing.T) {
    if !cmp.Equal(Pints.ToUSQuarts(0.55), 0.3302612, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.3302612, Pints.ToUSQuarts(0.55));
    }
    if !cmp.Equal(Pints.ToUSQuarts(80.6), 48.39828, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 48.39828, Pints.ToUSQuarts(80.6));
    }
    if !cmp.Equal(Pints.ToUSQuarts(12.0), 7.2057, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.2057, Pints.ToUSQuarts(12.0));
    }
}

func TestConvertKnownPintsToUSPints(t * testing.T) {
    if !cmp.Equal(Pints.ToUSPints(12.0), 14.4114, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 14.4114, Pints.ToUSPints(12.0));
    }
    if !cmp.Equal(Pints.ToUSPints(4.7), 5.64446, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.64446, Pints.ToUSPints(4.7));
    }
    if !cmp.Equal(Pints.ToUSPints(0.44), 0.528418, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.528418, Pints.ToUSPints(0.44));
    }
}

func TestConvertKnownPintsToUSGallons(t * testing.T) {
    if !cmp.Equal(Pints.ToUSGallons(1.2), 0.180142, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.180142, Pints.ToUSGallons(1.2));
    }
    if !cmp.Equal(Pints.ToUSGallons(9000.0), 1351.069, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1351.069, Pints.ToUSGallons(9000.0));
    }
    if !cmp.Equal(Pints.ToUSGallons(108.4), 16.272871, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 16.272871, Pints.ToUSGallons(108.4));
    }
}

func TestConvertKnownPintsToUSFluidOunces(t * testing.T) {
    if !cmp.Equal(Pints.ToUSFluidOunces(108.0), 2075.24, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2075.24, Pints.ToUSFluidOunces(108.0));
    }
    if !cmp.Equal(Pints.ToUSFluidOunces(23.4), 449.6357, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 449.6357, Pints.ToUSFluidOunces(23.4));
    }
    if !cmp.Equal(Pints.ToUSFluidOunces(8.65), 166.2115, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 166.2115, Pints.ToUSFluidOunces(8.65));
    }
}

func TestConvertKnownPintsToUSCups(t * testing.T) {
    if !cmp.Equal(Pints.ToUSCups(23.0), 55.2437, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 55.2437, Pints.ToUSCups(23.0));
    }
    if !cmp.Equal(Pints.ToUSCups(3.0), 7.2057, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.2057, Pints.ToUSCups(3.0));
    }
    if !cmp.Equal(Pints.ToUSCups(50.6), 121.5361, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 121.5361, Pints.ToUSCups(50.6));
    }
}

func TestConvertKnownPintsToCubicMetres(t * testing.T) {
    if !cmp.Equal(Pints.ToCubicMetres(21117.0), 12.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12.0, Pints.ToCubicMetres(21117.0));
    }
    if !cmp.Equal(Pints.ToCubicMetres(14078.0), 8.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8.0, Pints.ToCubicMetres(14078.0));
    }
    if !cmp.Equal(Pints.ToCubicMetres(9999.0), 5.682044, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.682044, Pints.ToCubicMetres(9999.0));
    }
}

func TestConvertKnownPintsToCubicFeet(t * testing.T) {
    if !cmp.Equal(Pints.ToCubicFeet(44.0), 0.88299, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.88299, Pints.ToCubicFeet(44.0));
    }
    if !cmp.Equal(Pints.ToCubicFeet(1234.0), 24.76386, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 24.76386, Pints.ToCubicFeet(1234.0));
    }
    if !cmp.Equal(Pints.ToCubicFeet(8000.0), 160.5436, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 160.5436, Pints.ToCubicFeet(8000.0));
    }
}

func TestConvertKnownPintsToCubicInches(t * testing.T) {
    if !cmp.Equal(Pints.ToCubicInches(5.0), 173.387, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 173.387, Pints.ToCubicInches(5.0));
    }
    if !cmp.Equal(Pints.ToCubicInches(777.0), 26944.33979, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 26944.33979, Pints.ToCubicInches(777.0));
    }
    if !cmp.Equal(Pints.ToCubicInches(35.58511), 1234.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1234.0, Pints.ToCubicInches(35.58511));
    }
}

func TestConvertKnownPintsToOilBarrels(t * testing.T) {
    if !cmp.Equal(Pints.ToOilBarrels(1398.89), 5.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.0, Pints.ToOilBarrels(1398.89));
    }
    if !cmp.Equal(Pints.ToOilBarrels(122.0), 0.436059, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.436059, Pints.ToOilBarrels(122.0));
    }
    if !cmp.Equal(Pints.ToOilBarrels(559.557), 2.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.0, Pints.ToOilBarrels(559.557));
    }
}

func TestConvertKnownQuartsToMillilitres(t * testing.T) {
    if !cmp.Equal(Quarts.ToMillilitres(1.4), 1591.13, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1591.13, Quarts.ToMillilitres(1.4));
    }
    if !cmp.Equal(Quarts.ToMillilitres(800.0), 909218.37579999, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 909218.37579999, Quarts.ToMillilitres(800.0));
    }
    if !cmp.Equal(Quarts.ToMillilitres(0.7), 795.566, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 795.566, Quarts.ToMillilitres(0.7));
    }
}

func TestConvertKnownQuartsToLitres(t * testing.T) {
    if !cmp.Equal(Quarts.ToLitres(675.0), 767.153, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 767.153, Quarts.ToLitres(675.0));
    }
    if !cmp.Equal(Quarts.ToLitres(45.8), 52.05273, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 52.05273, Quarts.ToLitres(45.8));
    }
    if !cmp.Equal(Quarts.ToLitres(0.8), 0.909218, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.909218, Quarts.ToLitres(0.8));
    }
}

func TestConvertKnownQuartsToKilolitres(t * testing.T) {
    if !cmp.Equal(Quarts.ToKilolitres(8009.0), 9.102409, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.102409, Quarts.ToKilolitres(8009.0));
    }
    if !cmp.Equal(Quarts.ToKilolitres(12345.0), 14.03037, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 14.03037, Quarts.ToKilolitres(12345.0));
    }
    if !cmp.Equal(Quarts.ToKilolitres(601.0), 0.68305, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.68305, Quarts.ToKilolitres(601.0));
    }
}

func TestConvertKnownQuartsToTeaspoons(t * testing.T) {
    if !cmp.Equal(Quarts.ToTeaspoons(6.0), 1152.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1152.0, Quarts.ToTeaspoons(6.0));
    }
    if !cmp.Equal(Quarts.ToTeaspoons(0.9), 172.8, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 172.8, Quarts.ToTeaspoons(0.9));
    }
    if !cmp.Equal(Quarts.ToTeaspoons(0.03), 5.759998, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.759998, Quarts.ToTeaspoons(0.03));
    }
}

func TestConvertKnownQuartsToTablespoons(t * testing.T) {
    if !cmp.Equal(Quarts.ToTablespoons(5.9), 377.6, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 377.6, Quarts.ToTablespoons(5.9));
    }
    if !cmp.Equal(Quarts.ToTablespoons(0.34), 21.75999, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 21.75999, Quarts.ToTablespoons(0.34));
    }
    if !cmp.Equal(Quarts.ToTablespoons(2.9), 185.6, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 185.6, Quarts.ToTablespoons(2.9));
    }
}

func TestConvertKnownQuartsToPints(t * testing.T) {
    if !cmp.Equal(Quarts.ToPints(4.5), 9.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.0, Quarts.ToPints(4.5));
    }
    if !cmp.Equal(Quarts.ToPints(102.8), 205.6, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 205.6, Quarts.ToPints(102.8));
    }
    if !cmp.Equal(Quarts.ToPints(0.46), 0.92, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.92, Quarts.ToPints(0.46));
    }
}

func TestConvertKnownQuartsToGallons(t * testing.T) {
    if !cmp.Equal(Quarts.ToGallons(0.46), 0.115, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.115, Quarts.ToGallons(0.46));
    }
    if !cmp.Equal(Quarts.ToGallons(190.0), 47.5, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 47.5, Quarts.ToGallons(190.0));
    }
    if !cmp.Equal(Quarts.ToGallons(67.6), 16.9, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 16.9, Quarts.ToGallons(67.6));
    }
}

func TestConvertKnownQuartsToFluidOunces(t * testing.T) {
    if !cmp.Equal(Quarts.ToFluidOunces(67.6), 2704.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2704.0, Quarts.ToFluidOunces(67.6));
    }
    if !cmp.Equal(Quarts.ToFluidOunces(1009.0), 40360.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 40360.0, Quarts.ToFluidOunces(1009.0));
    }
    if !cmp.Equal(Quarts.ToFluidOunces(6.2), 248.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 248.0, Quarts.ToFluidOunces(6.2));
    }
}

func TestConvertKnownQuartsToUSTeaspoons(t * testing.T) {
    if !cmp.Equal(Quarts.ToUSTeaspoons(6.2), 1429.61, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1429.61, Quarts.ToUSTeaspoons(6.2));
    }
    if !cmp.Equal(Quarts.ToUSTeaspoons(0.7), 161.408, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 161.408, Quarts.ToUSTeaspoons(0.7));
    }
    if !cmp.Equal(Quarts.ToUSTeaspoons(80.3), 18515.77, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 18515.77, Quarts.ToUSTeaspoons(80.3));
    }
}

func TestConvertKnownQuartsToUSTablespoons(t * testing.T) {
    if !cmp.Equal(Quarts.ToUSTablespoons(80.0), 6148.86, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6148.86, Quarts.ToUSTablespoons(80.0));
    }
    if !cmp.Equal(Quarts.ToUSTablespoons(5.7), 438.107, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 438.107, Quarts.ToUSTablespoons(5.7));
    }
    if !cmp.Equal(Quarts.ToUSTablespoons(0.44), 33.81875, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 33.81875, Quarts.ToUSTablespoons(0.44));
    }
}

func TestConvertKnownQuartsToUSQuarts(t * testing.T) {
    if !cmp.Equal(Quarts.ToUSQuarts(0.44), 0.528418, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.528418, Quarts.ToUSQuarts(0.44));
    }
    if !cmp.Equal(Quarts.ToUSQuarts(12.7), 15.25206, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 15.25206, Quarts.ToUSQuarts(12.7));
    }
    if !cmp.Equal(Quarts.ToUSQuarts(109.0), 130.904, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 130.904, Quarts.ToUSQuarts(109.0));
    }
}

func TestConvertKnownQuartsToUSPints(t * testing.T) {
    if !cmp.Equal(Quarts.ToUSPints(18.0), 43.2342, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 43.2342, Quarts.ToUSPints(18.0));
    }
    if !cmp.Equal(Quarts.ToUSPints(2.5), 6.00475, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.00475, Quarts.ToUSPints(2.5));
    }
    if !cmp.Equal(Quarts.ToUSPints(0.4), 0.96076, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.96076, Quarts.ToUSPints(0.4));
    }
}

func TestConvertKnownQuartsToUSGallons(t * testing.T) {
    if !cmp.Equal(Quarts.ToUSGallons(4.8), 1.44114, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.44114, Quarts.ToUSGallons(4.8));
    }
    if !cmp.Equal(Quarts.ToUSGallons(0.3), 0.0900712, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0900712, Quarts.ToUSGallons(0.3));
    }
    if !cmp.Equal(Quarts.ToUSGallons(1.5), 0.450356, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.450356, Quarts.ToUSGallons(1.5));
    }
}

func TestConvertKnownQuartsToUSFluidOunces(t * testing.T) {
    if !cmp.Equal(Quarts.ToUSFluidOunces(6.0), 230.582, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 230.582, Quarts.ToUSFluidOunces(6.0));
    }
    if !cmp.Equal(Quarts.ToUSFluidOunces(0.46), 17.67798, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 17.67798, Quarts.ToUSFluidOunces(0.46));
    }
    if !cmp.Equal(Quarts.ToUSFluidOunces(2.0), 76.8608, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 76.8608, Quarts.ToUSFluidOunces(2.0));
    }
}

func TestConvertKnownQuartsToUSCups(t * testing.T) {
    if !cmp.Equal(Quarts.ToUSCups(2.0), 9.6076, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.6076, Quarts.ToUSCups(2.0));
    }
    if !cmp.Equal(Quarts.ToUSCups(800.9), 3847.3632, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3847.3632, Quarts.ToUSCups(800.9));
    }
    if !cmp.Equal(Quarts.ToUSCups(0.23), 1.104874, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.104874, Quarts.ToUSCups(0.23));
    }
}

func TestConvertKnownQuartsToCubicMetres(t * testing.T) {
    if !cmp.Equal(Quarts.ToCubicMetres(7918.89), 9.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.0, Quarts.ToCubicMetres(7918.89));
    }
    if !cmp.Equal(Quarts.ToCubicMetres(1200.0), 1.363827, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.363827, Quarts.ToCubicMetres(1200.0));
    }
    if !cmp.Equal(Quarts.ToCubicMetres(8000.0), 9.09218, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.09218, Quarts.ToCubicMetres(8000.0));
    }
}

func TestConvertKnownQuartsToCubicFeet(t * testing.T) {
    if !cmp.Equal(Quarts.ToCubicFeet(20.0), 0.802718, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.802718, Quarts.ToCubicFeet(20.0));
    }
    if !cmp.Equal(Quarts.ToCubicFeet(800.0), 32.1087, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 32.1087, Quarts.ToCubicFeet(800.0));
    }
    if !cmp.Equal(Quarts.ToCubicFeet(67.0), 2.68911, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.68911, Quarts.ToCubicFeet(67.0));
    }
}

func TestConvertKnownQuartsToCubicInches(t * testing.T) {
    if !cmp.Equal(Quarts.ToCubicInches(777.0), 53888.75729, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 53888.75729, Quarts.ToCubicInches(777.0));
    }
    if !cmp.Equal(Quarts.ToCubicInches(8.16093), 566.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 566.0, Quarts.ToCubicInches(8.16093));
    }
    if !cmp.Equal(Quarts.ToCubicInches(76.0), 5270.97, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5270.97, Quarts.ToCubicInches(76.0));
    }
}

func TestConvertKnownQuartsToOilBarrels(t * testing.T) {
    if !cmp.Equal(Quarts.ToOilBarrels(839.336), 6.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.0, Quarts.ToOilBarrels(839.336));
    }
    if !cmp.Equal(Quarts.ToOilBarrels(41.9668), 0.3, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.3, Quarts.ToOilBarrels(41.9668));
    }
    if !cmp.Equal(Quarts.ToOilBarrels(22.0), 0.157267, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.157267, Quarts.ToOilBarrels(22.0));
    }
}

func TestConvertKnownTablespoonsToMillilitres(t * testing.T) {
    if !cmp.Equal(Tablespoons.ToMillilitres(2.7), 47.9471, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 47.9471, Tablespoons.ToMillilitres(2.7));
    }
    if !cmp.Equal(Tablespoons.ToMillilitres(0.65), 11.54281, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 11.54281, Tablespoons.ToMillilitres(0.65));
    }
    if !cmp.Equal(Tablespoons.ToMillilitres(80.1), 1422.43, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1422.43, Tablespoons.ToMillilitres(80.1));
    }
}

func TestConvertKnownTablespoonsToLitres(t * testing.T) {
    if !cmp.Equal(Tablespoons.ToLitres(55.0), 0.976699, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.976699, Tablespoons.ToLitres(55.0));
    }
    if !cmp.Equal(Tablespoons.ToLitres(190.0), 3.37405, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.37405, Tablespoons.ToLitres(190.0));
    }
    if !cmp.Equal(Tablespoons.ToLitres(4000.0), 71.0397889, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 71.0397889, Tablespoons.ToLitres(4000.0));
    }
}

func TestConvertKnownTablespoonsToKilolitres(t * testing.T) {
    if !cmp.Equal(Tablespoons.ToKilolitres(10000.0), 0.1775817, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.1775817, Tablespoons.ToKilolitres(10000.0));
    }
    if !cmp.Equal(Tablespoons.ToKilolitres(98765.0), 1.7538858, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.7538858, Tablespoons.ToKilolitres(98765.0));
    }
    if !cmp.Equal(Tablespoons.ToKilolitres(666999.0), 11.8446826, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 11.8446826, Tablespoons.ToKilolitres(666999.0));
    }
}

func TestConvertKnownTablespoonsToTeaspoons(t * testing.T) {
    if !cmp.Equal(Tablespoons.ToTeaspoons(12.0), 36.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 36.0, Tablespoons.ToTeaspoons(12.0));
    }
    if !cmp.Equal(Tablespoons.ToTeaspoons(0.24), 0.72, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.72, Tablespoons.ToTeaspoons(0.24));
    }
    if !cmp.Equal(Tablespoons.ToTeaspoons(19.9), 59.7, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 59.7, Tablespoons.ToTeaspoons(19.9));
    }
}

func TestConvertKnownTablespoonsToQuarts(t * testing.T) {
    if !cmp.Equal(Tablespoons.ToQuarts(190.0), 2.96875, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.96875, Tablespoons.ToQuarts(190.0));
    }
    if !cmp.Equal(Tablespoons.ToQuarts(9.0), 0.140625, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.140625, Tablespoons.ToQuarts(9.0));
    }
    if !cmp.Equal(Tablespoons.ToQuarts(3.7), 0.0578125, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0578125, Tablespoons.ToQuarts(3.7));
    }
}

func TestConvertKnownTablespoonsToPints(t * testing.T) {
    if !cmp.Equal(Tablespoons.ToPints(4.7), 0.146875, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.146875, Tablespoons.ToPints(4.7));
    }
    if !cmp.Equal(Tablespoons.ToPints(190.0), 5.9375, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.9375, Tablespoons.ToPints(190.0));
    }
    if !cmp.Equal(Tablespoons.ToPints(1090.9), 34.0906391, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 34.0906391, Tablespoons.ToPints(1090.9));
    }
}

func TestConvertKnownTablespoonsToGallons(t * testing.T) {
    if !cmp.Equal(Tablespoons.ToGallons(8000.0), 31.25001, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 31.25001, Tablespoons.ToGallons(8000.0));
    }
    if !cmp.Equal(Tablespoons.ToGallons(54.0), 0.210938, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.210938, Tablespoons.ToGallons(54.0));
    }
    if !cmp.Equal(Tablespoons.ToGallons(99.3), 0.3878908, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.3878908, Tablespoons.ToGallons(99.3));
    }
}

func TestConvertKnownTablespoonsToFluidOunces(t * testing.T) {
    if !cmp.Equal(Tablespoons.ToFluidOunces(80.8), 50.50002, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 50.50002, Tablespoons.ToFluidOunces(80.8));
    }
    if !cmp.Equal(Tablespoons.ToFluidOunces(9009.0), 5630.627, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5630.627, Tablespoons.ToFluidOunces(9009.0));
    }
    if !cmp.Equal(Tablespoons.ToFluidOunces(12.6), 7.875003, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.875003, Tablespoons.ToFluidOunces(12.6));
    }
}

func TestConvertKnownTablespoonsToUSTeaspoons(t * testing.T) {
    if !cmp.Equal(Tablespoons.ToUSTeaspoons(12.0), 43.2342, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 43.2342, Tablespoons.ToUSTeaspoons(12.0));
    }
    if !cmp.Equal(Tablespoons.ToUSTeaspoons(0.6), 2.16171, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.16171, Tablespoons.ToUSTeaspoons(0.6));
    }
    if !cmp.Equal(Tablespoons.ToUSTeaspoons(52.9), 190.5909, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 190.5909, Tablespoons.ToUSTeaspoons(52.9));
    }
}

func TestConvertKnownTablespoonsToUSTablespoons(t * testing.T) {
    if !cmp.Equal(Tablespoons.ToUSTablespoons(67.0), 80.4637, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 80.4637, Tablespoons.ToUSTablespoons(67.0));
    }
    if !cmp.Equal(Tablespoons.ToUSTablespoons(5.8), 6.96551, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.96551, Tablespoons.ToUSTablespoons(5.8));
    }
    if !cmp.Equal(Tablespoons.ToUSTablespoons(0.23), 0.2762186, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.2762186, Tablespoons.ToUSTablespoons(0.23));
    }
}

func TestConvertKnownTablespoonsToUSQuarts(t * testing.T) {
    if !cmp.Equal(Tablespoons.ToUSQuarts(54.0), 1.0133, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.0133, Tablespoons.ToUSQuarts(54.0));
    }
    if !cmp.Equal(Tablespoons.ToUSQuarts(1005.9), 18.875563, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 18.875563, Tablespoons.ToUSQuarts(1005.9));
    }
    if !cmp.Equal(Tablespoons.ToUSQuarts(0.9), 0.0168884, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0168884, Tablespoons.ToUSQuarts(0.9));
    }
}

func TestConvertKnownTablespoonsToUSPints(t * testing.T) {
    if !cmp.Equal(Tablespoons.ToUSPints(34.0), 1.27601, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.27601, Tablespoons.ToUSPints(34.0));
    }
    if !cmp.Equal(Tablespoons.ToUSPints(109.3), 4.1019963, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.1019963, Tablespoons.ToUSPints(109.3));
    }
    if !cmp.Equal(Tablespoons.ToUSPints(190.0), 7.13064, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.13064, Tablespoons.ToUSPints(190.0));
    }
}

func TestConvertKnownTablespoonsToUSGallons(t * testing.T) {
    if !cmp.Equal(Tablespoons.ToUSGallons(900.0), 4.22209, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.22209, Tablespoons.ToUSGallons(900.0));
    }
    if !cmp.Equal(Tablespoons.ToUSGallons(2.8), 0.0131354, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0131354, Tablespoons.ToUSGallons(2.8));
    }
    if !cmp.Equal(Tablespoons.ToUSGallons(1469.0), 6.891391, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.891391, Tablespoons.ToUSGallons(1469.0));
    }
}

func TestConvertKnownTablespoonsToUSFluidOunces(t * testing.T) {
    if !cmp.Equal(Tablespoons.ToUSFluidOunces(1009.0), 605.8795, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 605.8795, Tablespoons.ToUSFluidOunces(1009.0));
    }
    if !cmp.Equal(Tablespoons.ToUSFluidOunces(8.2), 4.9239, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.9239, Tablespoons.ToUSFluidOunces(8.2));
    }
    if !cmp.Equal(Tablespoons.ToUSFluidOunces(190.5), 114.39053, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 114.39053, Tablespoons.ToUSFluidOunces(190.5));
    }
}

func TestConvertKnownTablespoonsToUSCups(t * testing.T) {
    if !cmp.Equal(Tablespoons.ToUSCups(109.0), 8.18147, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8.18147, Tablespoons.ToUSCups(109.0));
    }
    if !cmp.Equal(Tablespoons.ToUSCups(3.4), 0.255202, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.255202, Tablespoons.ToUSCups(3.4));
    }
    if !cmp.Equal(Tablespoons.ToUSCups(1000.0), 75.0594, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 75.0594, Tablespoons.ToUSCups(1000.0));
    }
}

func TestConvertKnownTablespoonsToCubicMetres(t * testing.T) {
    if !cmp.Equal(Tablespoons.ToCubicMetres(10000.0), 0.1775817, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.1775817, Tablespoons.ToCubicMetres(10000.0));
    }
    if !cmp.Equal(Tablespoons.ToCubicMetres(3378.726), 0.059999995422, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.059999995422, Tablespoons.ToCubicMetres(3378.726));
    }
    if !cmp.Equal(Tablespoons.ToCubicMetres(800009.0), 14.2066969, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 14.2066969, Tablespoons.ToCubicMetres(800009.0));
    }
}

func TestConvertKnownTablespoonsToCubicFeet(t * testing.T) {
    if !cmp.Equal(Tablespoons.ToCubicFeet(780.0), 0.489157, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.489157, Tablespoons.ToCubicFeet(780.0));
    }
    if !cmp.Equal(Tablespoons.ToCubicFeet(6378.32), 4.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.0, Tablespoons.ToCubicFeet(6378.32));
    }
    if !cmp.Equal(Tablespoons.ToCubicFeet(8451.28), 5.3, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.3, Tablespoons.ToCubicFeet(8451.28));
    }
}

func TestConvertKnownTablespoonsToCubicInches(t * testing.T) {
    if !cmp.Equal(Tablespoons.ToCubicInches(66.0), 71.5222, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 71.5222, Tablespoons.ToCubicInches(66.0));
    }
    if !cmp.Equal(Tablespoons.ToCubicInches(123.0), 133.291, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 133.291, Tablespoons.ToCubicInches(123.0));
    }
    if !cmp.Equal(Tablespoons.ToCubicInches(56.0), 60.6855, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 60.6855, Tablespoons.ToCubicInches(56.0));
    }
}

func TestConvertKnownTablespoonsToOilBarrels(t * testing.T) {
    if !cmp.Equal(Tablespoons.ToOilBarrels(44764.5), 5.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.0, Tablespoons.ToOilBarrels(44764.5));
    }
    if !cmp.Equal(Tablespoons.ToOilBarrels(12222.0), 1.3651429, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.3651429, Tablespoons.ToOilBarrels(12222.0));
    }
    if !cmp.Equal(Tablespoons.ToOilBarrels(800.0), 0.0893564, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0893564, Tablespoons.ToOilBarrels(800.0));
    }
}

func TestConvertKnownTeaspoonsToMillilitres(t * testing.T) {
    if !cmp.Equal(Teaspoons.ToMillilitres(0.6), 3.55163, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.55163, Teaspoons.ToMillilitres(0.6));
    }
    if !cmp.Equal(Teaspoons.ToMillilitres(1.3), 7.69521, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.69521, Teaspoons.ToMillilitres(1.3));
    }
    if !cmp.Equal(Teaspoons.ToMillilitres(0.07), 0.4143573, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.4143573, Teaspoons.ToMillilitres(0.07));
    }
}

func TestConvertKnownTeaspoonsToLitres(t * testing.T) {
    if !cmp.Equal(Teaspoons.ToLitres(32.0), 0.18942, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.18942, Teaspoons.ToLitres(32.0));
    }
    if !cmp.Equal(Teaspoons.ToLitres(180.0), 1.06549, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.06549, Teaspoons.ToLitres(180.0));
    }
    if !cmp.Equal(Teaspoons.ToLitres(4567.0), 27.03386, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 27.03386, Teaspoons.ToLitres(4567.0));
    }
}

func TestConvertKnownTeaspoonsToKilolitres(t * testing.T) {
    if !cmp.Equal(Teaspoons.ToKilolitres(236511.0), 1.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.4, Teaspoons.ToKilolitres(236511.0));
    }
    if !cmp.Equal(Teaspoons.ToKilolitres(33787.3), 0.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.2, Teaspoons.ToKilolitres(33787.3));
    }
    if !cmp.Equal(Teaspoons.ToKilolitres(1689.363), 0.01, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.01, Teaspoons.ToKilolitres(1689.363));
    }
}

func TestConvertKnownTeaspoonsToTablespoons(t * testing.T) {
    if !cmp.Equal(Teaspoons.ToTablespoons(12.0), 4.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.0, Teaspoons.ToTablespoons(12.0));
    }
    if !cmp.Equal(Teaspoons.ToTablespoons(900.8), 300.26667, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 300.26667, Teaspoons.ToTablespoons(900.8));
    }
    if !cmp.Equal(Teaspoons.ToTablespoons(1.23), 0.41, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.41, Teaspoons.ToTablespoons(1.23));
    }
}

func TestConvertKnownTeaspoonsToQuarts(t * testing.T) {
    if !cmp.Equal(Teaspoons.ToQuarts(109.0), 0.567709, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.567709, Teaspoons.ToQuarts(109.0));
    }
    if !cmp.Equal(Teaspoons.ToQuarts(4500.0), 23.43751, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 23.43751, Teaspoons.ToQuarts(4500.0));
    }
    if !cmp.Equal(Teaspoons.ToQuarts(89.0), 0.463542, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.463542, Teaspoons.ToQuarts(89.0));
    }
}

func TestConvertKnownTeaspoonsToPints(t * testing.T) {
    if !cmp.Equal(Teaspoons.ToPints(678.0), 7.0625, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.0625, Teaspoons.ToPints(678.0));
    }
    if !cmp.Equal(Teaspoons.ToPints(109.0), 1.13542, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.13542, Teaspoons.ToPints(109.0));
    }
    if !cmp.Equal(Teaspoons.ToPints(12.5), 0.1302084, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.1302084, Teaspoons.ToPints(12.5));
    }
}

func TestConvertKnownTeaspoonsToGallons(t * testing.T) {
    if !cmp.Equal(Teaspoons.ToGallons(190.0), 0.247396, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.247396, Teaspoons.ToGallons(190.0));
    }
    if !cmp.Equal(Teaspoons.ToGallons(8090.0), 10.53386, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 10.53386, Teaspoons.ToGallons(8090.0));
    }
    if !cmp.Equal(Teaspoons.ToGallons(238.9), 0.31106784, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.31106784, Teaspoons.ToGallons(238.9));
    }
}

func TestConvertKnownTeaspoonsToFluidOunces(t * testing.T) {
    if !cmp.Equal(Teaspoons.ToFluidOunces(109.0), 22.7083, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 22.7083, Teaspoons.ToFluidOunces(109.0));
    }
    if !cmp.Equal(Teaspoons.ToFluidOunces(55.7), 11.60417, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 11.60417, Teaspoons.ToFluidOunces(55.7));
    }
    if !cmp.Equal(Teaspoons.ToFluidOunces(609.0), 126.875, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 126.875, Teaspoons.ToFluidOunces(609.0));
    }
}

func TestConvertKnownTeaspoonsToUSTeaspoons(t * testing.T) {
    if !cmp.Equal(Teaspoons.ToUSTeaspoons(90.0), 108.086, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 108.086, Teaspoons.ToUSTeaspoons(90.0));
    }
    if !cmp.Equal(Teaspoons.ToUSTeaspoons(1.45), 1.741379, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.741379, Teaspoons.ToUSTeaspoons(1.45));
    }
    if !cmp.Equal(Teaspoons.ToUSTeaspoons(80.1), 96.19616, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 96.19616, Teaspoons.ToUSTeaspoons(80.1));
    }
}

func TestConvertKnownTeaspoonsToUSTablespoons(t * testing.T) {
    if !cmp.Equal(Teaspoons.ToUSTablespoons(56.0), 22.4177, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 22.4177, Teaspoons.ToUSTablespoons(56.0));
    }
    if !cmp.Equal(Teaspoons.ToUSTablespoons(7.0), 2.80222, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.80222, Teaspoons.ToUSTablespoons(7.0));
    }
    if !cmp.Equal(Teaspoons.ToUSTablespoons(109.0), 43.6345, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 43.6345, Teaspoons.ToUSTablespoons(109.0));
    }
}

func TestConvertKnownTeaspoonsToUSQuarts(t * testing.T) {
    if !cmp.Equal(Teaspoons.ToUSQuarts(199.0), 1.24474, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.24474, Teaspoons.ToUSQuarts(199.0));
    }
    if !cmp.Equal(Teaspoons.ToUSQuarts(5.9), 0.0369042, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0369042, Teaspoons.ToUSQuarts(5.9));
    }
    if !cmp.Equal(Teaspoons.ToUSQuarts(23.0), 0.143864, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.143864, Teaspoons.ToUSQuarts(23.0));
    }
}

func TestConvertKnownTeaspoonsToUSPints(t * testing.T) {
    if !cmp.Equal(Teaspoons.ToUSPints(106.0), 1.32605, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.32605, Teaspoons.ToUSPints(106.0));
    }
    if !cmp.Equal(Teaspoons.ToUSPints(34.0), 0.425337, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.425337, Teaspoons.ToUSPints(34.0));
    }
    if !cmp.Equal(Teaspoons.ToUSPints(6.21), 0.07656059, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.07656059, Teaspoons.ToUSPints(6.21));
    }
}

func TestConvertKnownTeaspoonsToUSGallons(t * testing.T) {
    if !cmp.Equal(Teaspoons.ToUSGallons(900.0), 1.40736, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.40736, Teaspoons.ToUSGallons(900.0));
    }
    if !cmp.Equal(Teaspoons.ToUSGallons(1234.6), 1.93059035, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.93059035, Teaspoons.ToUSGallons(1234.6));
    }
    if !cmp.Equal(Teaspoons.ToUSGallons(88.0), 0.137609, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.137609, Teaspoons.ToUSGallons(88.0));
    }
}

func TestConvertKnownTeaspoonsToUSFluidOunces(t * testing.T) {
    if !cmp.Equal(Teaspoons.ToUSFluidOunces(56.0), 11.2089, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 11.2089, Teaspoons.ToUSFluidOunces(56.0));
    }
    if !cmp.Equal(Teaspoons.ToUSFluidOunces(2.9), 0.580459, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.580459, Teaspoons.ToUSFluidOunces(2.9));
    }
    if !cmp.Equal(Teaspoons.ToUSFluidOunces(1020.0), 204.1616, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 204.1616, Teaspoons.ToUSFluidOunces(1020.0));
    }
}

func TestConvertKnownTeaspoonsToUSCups(t * testing.T) {
    if !cmp.Equal(Teaspoons.ToUSCups(8000.0), 200.1584, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 200.1584, Teaspoons.ToUSCups(8000.0));
    }
    if !cmp.Equal(Teaspoons.ToUSCups(34.0), 0.850673, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.850673, Teaspoons.ToUSCups(34.0));
    }
    if !cmp.Equal(Teaspoons.ToUSCups(109.9), 2.7496761, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.7496761, Teaspoons.ToUSCups(109.9));
    }
}

func TestConvertKnownTeaspoonsToCubicMetres(t * testing.T) {
    if !cmp.Equal(Teaspoons.ToCubicMetres(152043.0), 0.9, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.9, Teaspoons.ToCubicMetres(152043.0));
    }
    if !cmp.Equal(Teaspoons.ToCubicMetres(3378.726), 0.02, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.02, Teaspoons.ToCubicMetres(3378.726));
    }
    if !cmp.Equal(Teaspoons.ToCubicMetres(8000.0), 0.04735512, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.04735512, Teaspoons.ToCubicMetres(8000.0));
    }
}

func TestConvertKnownTeaspoonsToCubicFeet(t * testing.T) {
    if !cmp.Equal(Teaspoons.ToCubicFeet(600.0), 0.125425, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.125425, Teaspoons.ToCubicFeet(600.0));
    }
    if !cmp.Equal(Teaspoons.ToCubicFeet(1234.0), 0.257957, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.257957, Teaspoons.ToCubicFeet(1234.0));
    }
    if !cmp.Equal(Teaspoons.ToCubicFeet(880.0), 0.183956, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.183956, Teaspoons.ToCubicFeet(880.0));
    }
}

func TestConvertKnownTeaspoonsToCubicInches(t * testing.T) {
    if !cmp.Equal(Teaspoons.ToCubicInches(8.0), 2.88979, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.88979, Teaspoons.ToCubicInches(8.0));
    }
    if !cmp.Equal(Teaspoons.ToCubicInches(12.0), 4.33468, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.33468, Teaspoons.ToCubicInches(12.0));
    }
    if !cmp.Equal(Teaspoons.ToCubicInches(666.0), 240.575, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 240.575, Teaspoons.ToCubicInches(666.0));
    }
}

func TestConvertKnownTeaspoonsToOilBarrels(t * testing.T) {
    if !cmp.Equal(Teaspoons.ToOilBarrels(10743.5), 0.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.4, Teaspoons.ToOilBarrels(10743.5));
    }
    if !cmp.Equal(Teaspoons.ToOilBarrels(107435.0), 4.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.0, Teaspoons.ToOilBarrels(107435.0));
    }
    if !cmp.Equal(Teaspoons.ToOilBarrels(134294.0), 5.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.0, Teaspoons.ToOilBarrels(134294.0));
    }
}

func TestConvertKnownUSCupsToMillilitres(t * testing.T) {
    if !cmp.Equal(USCups.ToMillilitres(11.0), 2602.47, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2602.47, USCups.ToMillilitres(11.0));
    }
    if !cmp.Equal(USCups.ToMillilitres(109.0), 25788.1177, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 25788.1177, USCups.ToMillilitres(109.0));
    }
    if !cmp.Equal(USCups.ToMillilitres(4.5), 1064.65, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1064.65, USCups.ToMillilitres(4.5));
    }
}

func TestConvertKnownUSCupsToLitres(t * testing.T) {
    if !cmp.Equal(USCups.ToLitres(56.0), 13.2489, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 13.2489, USCups.ToLitres(56.0));
    }
    if !cmp.Equal(USCups.ToLitres(4.1), 0.970012, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.970012, USCups.ToLitres(4.1));
    }
    if !cmp.Equal(USCups.ToLitres(399.0), 94.3987, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 94.3987, USCups.ToLitres(399.0));
    }
}

func TestConvertKnownUSCupsToKilolitres(t * testing.T) {
    if !cmp.Equal(USCups.ToKilolitres(67.0), 0.0158514, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0158514, USCups.ToKilolitres(67.0));
    }
    if !cmp.Equal(USCups.ToKilolitres(1009.7), 0.238883142, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.238883142, USCups.ToKilolitres(1009.7));
    }
    if !cmp.Equal(USCups.ToKilolitres(918273.0), 217.25259, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 217.25259, USCups.ToKilolitres(918273.0));
    }
}

func TestConvertKnownUSCupsToTeaspoons(t * testing.T) {
    if !cmp.Equal(USCups.ToTeaspoons(4.0), 159.873, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 159.873, USCups.ToTeaspoons(4.0));
    }
    if !cmp.Equal(USCups.ToTeaspoons(0.2), 7.99367, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.99367, USCups.ToTeaspoons(0.2));
    }
    if !cmp.Equal(USCups.ToTeaspoons(6.12), 244.6063, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 244.6063, USCups.ToTeaspoons(6.12));
    }
}

func TestConvertKnownUSCupsToTablespoons(t * testing.T) {
    if !cmp.Equal(USCups.ToTablespoons(4.3), 57.288, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 57.288, USCups.ToTablespoons(4.3));
    }
    if !cmp.Equal(USCups.ToTablespoons(120.6), 1606.7274, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1606.7274, USCups.ToTablespoons(120.6));
    }
    if !cmp.Equal(USCups.ToTablespoons(0.66), 8.793036, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8.793036, USCups.ToTablespoons(0.66));
    }
}

func TestConvertKnownUSCupsToQuarts(t * testing.T) {
    if !cmp.Equal(USCups.ToQuarts(1009.0), 210.0421, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 210.0421, USCups.ToQuarts(1009.0));
    }
    if !cmp.Equal(USCups.ToQuarts(66.98), 13.943129, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 13.943129, USCups.ToQuarts(66.98));
    }
    if !cmp.Equal(USCups.ToQuarts(0.123), 0.025604731, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.025604731, USCups.ToQuarts(0.123));
    }
}

func TestConvertKnownUSCupsToPints(t * testing.T) {
    if !cmp.Equal(USCups.ToPints(5.0), 2.08169, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.08169, USCups.ToPints(5.0));
    }
    if !cmp.Equal(USCups.ToPints(0.43), 0.1790249, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.1790249, USCups.ToPints(0.43));
    }
    if !cmp.Equal(USCups.ToPints(800.4), 333.23621, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 333.23621, USCups.ToPints(800.4));
    }
}

func TestConvertKnownUSCupsToGallons(t * testing.T) {
    if !cmp.Equal(USCups.ToGallons(56.0), 2.91436, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.91436, USCups.ToGallons(56.0));
    }
    if !cmp.Equal(USCups.ToGallons(104.12), 5.41862726, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.41862726, USCups.ToGallons(104.12));
    }
    if !cmp.Equal(USCups.ToGallons(6.1), 0.317457, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.317457, USCups.ToGallons(6.1));
    }
}

func TestConvertKnownUSCupsToFluidOunces(t * testing.T) {
    if !cmp.Equal(USCups.ToFluidOunces(55.0), 457.971, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 457.971, USCups.ToFluidOunces(55.0));
    }
    if !cmp.Equal(USCups.ToFluidOunces(0.4), 3.3307, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.3307, USCups.ToFluidOunces(0.4));
    }
    if !cmp.Equal(USCups.ToFluidOunces(88.4), 736.084, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 736.084, USCups.ToFluidOunces(88.4));
    }
}

func TestConvertKnownUSCupsToUSTeaspoons(t * testing.T) {
    if !cmp.Equal(USCups.ToUSTeaspoons(12.0), 576.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 576.0, USCups.ToUSTeaspoons(12.0));
    }
    if !cmp.Equal(USCups.ToUSTeaspoons(5.12), 245.7601, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 245.7601, USCups.ToUSTeaspoons(5.12));
    }
    if !cmp.Equal(USCups.ToUSTeaspoons(6701.0), 321648.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 321648.0, USCups.ToUSTeaspoons(6701.0));
    }
}

func TestConvertKnownUSCupsToUSTablespoons(t * testing.T) {
    if !cmp.Equal(USCups.ToUSTablespoons(677.0), 10832.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 10832.0, USCups.ToUSTablespoons(677.0));
    }
    if !cmp.Equal(USCups.ToUSTablespoons(1.9), 30.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 30.4, USCups.ToUSTablespoons(1.9));
    }
    if !cmp.Equal(USCups.ToUSTablespoons(800.8), 12812.8, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12812.8, USCups.ToUSTablespoons(800.8));
    }
}

func TestConvertKnownUSCupsToUSQuarts(t * testing.T) {
    if !cmp.Equal(USCups.ToUSQuarts(800.8), 200.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 200.2, USCups.ToUSQuarts(800.8));
    }
    if !cmp.Equal(USCups.ToUSQuarts(4.84), 1.21, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.21, USCups.ToUSQuarts(4.84));
    }
    if !cmp.Equal(USCups.ToUSQuarts(0.99), 0.2475, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.2475, USCups.ToUSQuarts(0.99));
    }
}

func TestConvertKnownUSCupsToUSPints(t * testing.T) {
    if !cmp.Equal(USCups.ToUSPints(0.99), 0.495, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.495, USCups.ToUSPints(0.99));
    }
    if !cmp.Equal(USCups.ToUSPints(358.9), 179.45, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 179.45, USCups.ToUSPints(358.9));
    }
    if !cmp.Equal(USCups.ToUSPints(1000.0), 500.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 500.0, USCups.ToUSPints(1000.0));
    }
}

func TestConvertKnownUSCupsToUSGallons(t * testing.T) {
    if !cmp.Equal(USCups.ToUSGallons(1000.0), 62.5, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 62.5, USCups.ToUSGallons(1000.0));
    }
    if !cmp.Equal(USCups.ToUSGallons(0.78), 0.04875, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.04875, USCups.ToUSGallons(0.78));
    }
    if !cmp.Equal(USCups.ToUSGallons(123.123), 7.6951875, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.6951875, USCups.ToUSGallons(123.123));
    }
}

func TestConvertKnownUSCupsToUSFluidOunces(t * testing.T) {
    if !cmp.Equal(USCups.ToUSFluidOunces(123.123), 984.984, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 984.984, USCups.ToUSFluidOunces(123.123));
    }
    if !cmp.Equal(USCups.ToUSFluidOunces(4.0), 32.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 32.0, USCups.ToUSFluidOunces(4.0));
    }
    if !cmp.Equal(USCups.ToUSFluidOunces(0.9), 7.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.2, USCups.ToUSFluidOunces(0.9));
    }
}

func TestConvertKnownUSCupsToCubicMetres(t * testing.T) {
    if !cmp.Equal(USCups.ToCubicMetres(4555.0), 1.0932, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.0932, USCups.ToCubicMetres(4555.0));
    }
    if !cmp.Equal(USCups.ToCubicMetres(100900.0), 24.216, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 24.216, USCups.ToCubicMetres(100900.0));
    }
    if !cmp.Equal(USCups.ToCubicMetres(7800.0), 1.872, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.872, USCups.ToCubicMetres(7800.0));
    }
}

func TestConvertKnownUSCupsToCubicFeet(t * testing.T) {
    if !cmp.Equal(USCups.ToCubicFeet(88.0), 0.745846, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.745846, USCups.ToCubicFeet(88.0));
    }
    if !cmp.Equal(USCups.ToCubicFeet(471.947), 4.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.0, USCups.ToCubicFeet(471.947));
    }
    if !cmp.Equal(USCups.ToCubicFeet(123.0), 1.04249, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.04249, USCups.ToCubicFeet(123.0));
    }
}

func TestConvertKnownUSCupsToCubicInches(t * testing.T) {
    if !cmp.Equal(USCups.ToCubicInches(6.0), 87.8742, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 87.8742, USCups.ToCubicInches(6.0));
    }
    if !cmp.Equal(USCups.ToCubicInches(2.3), 33.6851, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 33.6851, USCups.ToCubicInches(2.3));
    }
    if !cmp.Equal(USCups.ToCubicInches(0.9), 13.1811, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 13.1811, USCups.ToCubicInches(0.9));
    }
}

func TestConvertKnownUSCupsToOilBarrels(t * testing.T) {
    if !cmp.Equal(USCups.ToOilBarrels(43721.5), 66.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 66.0, USCups.ToOilBarrels(43721.5));
    }
    if !cmp.Equal(USCups.ToOilBarrels(1111.0), 1.677115, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.677115, USCups.ToOilBarrels(1111.0));
    }
    if !cmp.Equal(USCups.ToOilBarrels(3312.24), 5.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.0, USCups.ToOilBarrels(3312.24));
    }
}

func TestConvertKnownUSFluidOuncesToMillilitres(t * testing.T) {
    if !cmp.Equal(USFluidOunces.ToMillilitres(0.98), 28.98206, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 28.98206, USFluidOunces.ToMillilitres(0.98));
    }
    if !cmp.Equal(USFluidOunces.ToMillilitres(8.2), 242.503, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 242.503, USFluidOunces.ToMillilitres(8.2));
    }
    if !cmp.Equal(USFluidOunces.ToMillilitres(100.3), 2966.225, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2966.225, USFluidOunces.ToMillilitres(100.3));
    }
}

func TestConvertKnownUSFluidOuncesToLitres(t * testing.T) {
    if !cmp.Equal(USFluidOunces.ToLitres(12.0), 0.354882, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.354882, USFluidOunces.ToLitres(12.0));
    }
    if !cmp.Equal(USFluidOunces.ToLitres(150.6), 4.4537736, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.4537736, USFluidOunces.ToLitres(150.6));
    }
    if !cmp.Equal(USFluidOunces.ToLitres(5.9), 0.174484, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.174484, USFluidOunces.ToLitres(5.9));
    }
}

func TestConvertKnownUSFluidOuncesToKilolitres(t * testing.T) {
    if !cmp.Equal(USFluidOunces.ToKilolitres(34.0), 0.0010055, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0010055, USFluidOunces.ToKilolitres(34.0));
    }
    if !cmp.Equal(USFluidOunces.ToKilolitres(109.1), 0.0032264721, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0032264721, USFluidOunces.ToKilolitres(109.1));
    }
    if !cmp.Equal(USFluidOunces.ToKilolitres(45678.0), 1.3508597, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.3508597, USFluidOunces.ToKilolitres(45678.0));
    }
}

func TestConvertKnownUSFluidOuncesToTeaspoons(t * testing.T) {
    if !cmp.Equal(USFluidOunces.ToTeaspoons(4.0), 19.9842, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 19.9842, USFluidOunces.ToTeaspoons(4.0));
    }
    if !cmp.Equal(USFluidOunces.ToTeaspoons(0.12), 0.5995252, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.5995252, USFluidOunces.ToTeaspoons(0.12));
    }
    if !cmp.Equal(USFluidOunces.ToTeaspoons(2.99), 14.93817, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 14.93817, USFluidOunces.ToTeaspoons(2.99));
    }
}

func TestConvertKnownUSFluidOuncesToTablespoons(t * testing.T) {
    if !cmp.Equal(USFluidOunces.ToTablespoons(800.0), 1332.28, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1332.28, USFluidOunces.ToTablespoons(800.0));
    }
    if !cmp.Equal(USFluidOunces.ToTablespoons(0.02), 0.03330695, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.03330695, USFluidOunces.ToTablespoons(0.02));
    }
    if !cmp.Equal(USFluidOunces.ToTablespoons(2.7), 4.49644, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.49644, USFluidOunces.ToTablespoons(2.7));
    }
}

func TestConvertKnownUSFluidOuncesToQuarts(t * testing.T) {
    if !cmp.Equal(USFluidOunces.ToQuarts(3.5), 0.0910737, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0910737, USFluidOunces.ToQuarts(3.5));
    }
    if !cmp.Equal(USFluidOunces.ToQuarts(0.76), 0.01977601, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.01977601, USFluidOunces.ToQuarts(0.76));
    }
    if !cmp.Equal(USFluidOunces.ToQuarts(2.0), 0.0520421, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0520421, USFluidOunces.ToQuarts(2.0));
    }
}

func TestConvertKnownUSFluidOuncesToPints(t * testing.T) {
    if !cmp.Equal(USFluidOunces.ToPints(12.0), 0.624506, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.624506, USFluidOunces.ToPints(12.0));
    }
    if !cmp.Equal(USFluidOunces.ToPints(0.4), 0.0208169, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0208169, USFluidOunces.ToPints(0.4));
    }
    if !cmp.Equal(USFluidOunces.ToPints(1.99), 0.1035639, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.1035639, USFluidOunces.ToPints(1.99));
    }
}

func TestConvertKnownUSFluidOuncesToGallons(t * testing.T) {
    if !cmp.Equal(USFluidOunces.ToGallons(3.0), 0.0195158, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0195158, USFluidOunces.ToGallons(3.0));
    }
    if !cmp.Equal(USFluidOunces.ToGallons(100.5), 0.65377934, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.65377934, USFluidOunces.ToGallons(100.5));
    }
    if !cmp.Equal(USFluidOunces.ToGallons(0.9), 0.00585474, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.00585474, USFluidOunces.ToGallons(0.9));
    }
}

func TestConvertKnownUSFluidOuncesToFluidOunces(t * testing.T) {
    if !cmp.Equal(USFluidOunces.ToFluidOunces(0.6), 0.624506, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.624506, USFluidOunces.ToFluidOunces(0.6));
    }
    if !cmp.Equal(USFluidOunces.ToFluidOunces(123.0), 128.024, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 128.024, USFluidOunces.ToFluidOunces(123.0));
    }
    if !cmp.Equal(USFluidOunces.ToFluidOunces(8009.0), 8336.109, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8336.109, USFluidOunces.ToFluidOunces(8009.0));
    }
}

func TestConvertKnownUSFluidOuncesToUSTeaspoons(t * testing.T) {
    if !cmp.Equal(USFluidOunces.ToUSTeaspoons(45.0), 270.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 270.0, USFluidOunces.ToUSTeaspoons(45.0));
    }
    if !cmp.Equal(USFluidOunces.ToUSTeaspoons(1.5), 9.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.0, USFluidOunces.ToUSTeaspoons(1.5));
    }
    if !cmp.Equal(USFluidOunces.ToUSTeaspoons(400.8), 2404.8008, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2404.8008, USFluidOunces.ToUSTeaspoons(400.8));
    }
}

func TestConvertKnownUSFluidOuncesToUSTablespoons(t * testing.T) {
    if !cmp.Equal(USFluidOunces.ToUSTablespoons(4.0), 8.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8.0, USFluidOunces.ToUSTablespoons(4.0));
    }
    if !cmp.Equal(USFluidOunces.ToUSTablespoons(170.2), 340.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 340.4, USFluidOunces.ToUSTablespoons(170.2));
    }
    if !cmp.Equal(USFluidOunces.ToUSTablespoons(8811.0), 17622.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 17622.0, USFluidOunces.ToUSTablespoons(8811.0));
    }
}

func TestConvertKnownUSFluidOuncesToUSQuarts(t * testing.T) {
    if !cmp.Equal(USFluidOunces.ToUSQuarts(8811.0), 275.3438, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 275.3438, USFluidOunces.ToUSQuarts(8811.0));
    }
    if !cmp.Equal(USFluidOunces.ToUSQuarts(4.2), 0.13125, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.13125, USFluidOunces.ToUSQuarts(4.2));
    }
    if !cmp.Equal(USFluidOunces.ToUSQuarts(109.0), 3.40625, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.40625, USFluidOunces.ToUSQuarts(109.0));
    }
}

func TestConvertKnownUSFluidOuncesToUSPints(t * testing.T) {
    if !cmp.Equal(USFluidOunces.ToUSPints(109.0), 6.8125, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.8125, USFluidOunces.ToUSPints(109.0));
    }
    if !cmp.Equal(USFluidOunces.ToUSPints(77.09), 4.818125, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.818125, USFluidOunces.ToUSPints(77.09));
    }
    if !cmp.Equal(USFluidOunces.ToUSPints(180.4), 11.275, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 11.275, USFluidOunces.ToUSPints(180.4));
    }
}

func TestConvertKnownUSFluidOuncesToUSGallons(t * testing.T) {
    if !cmp.Equal(USFluidOunces.ToUSGallons(45.0), 0.351563, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.351563, USFluidOunces.ToUSGallons(45.0));
    }
    if !cmp.Equal(USFluidOunces.ToUSGallons(1.8), 0.0140625, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0140625, USFluidOunces.ToUSGallons(1.8));
    }
    if !cmp.Equal(USFluidOunces.ToUSGallons(778.9), 6.0851562, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.0851562, USFluidOunces.ToUSGallons(778.9));
    }
}

func TestConvertKnownUSFluidOuncesToUSCups(t * testing.T) {
    if !cmp.Equal(USFluidOunces.ToUSCups(45.0), 5.625, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.625, USFluidOunces.ToUSCups(45.0));
    }
    if !cmp.Equal(USFluidOunces.ToUSCups(66.9), 8.3625, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8.3625, USFluidOunces.ToUSCups(66.9));
    }
    if !cmp.Equal(USFluidOunces.ToUSCups(0.29), 0.03625, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.03625, USFluidOunces.ToUSCups(0.29));
    }
}

func TestConvertKnownUSFluidOuncesToCubicMetres(t * testing.T) {
    if !cmp.Equal(USFluidOunces.ToCubicMetres(800900.0), 23.6854398, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 23.6854398, USFluidOunces.ToCubicMetres(800900.0));
    }
    if !cmp.Equal(USFluidOunces.ToCubicMetres(789.0), 0.0233335, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0233335, USFluidOunces.ToCubicMetres(789.0));
    }
    if !cmp.Equal(USFluidOunces.ToCubicMetres(100100.0), 2.96031031, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.96031031, USFluidOunces.ToCubicMetres(100100.0));
    }
}

func TestConvertKnownUSFluidOuncesToCubicFeet(t * testing.T) {
    if !cmp.Equal(USFluidOunces.ToCubicFeet(344.0), 0.359266, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.359266, USFluidOunces.ToCubicFeet(344.0));
    }
    if !cmp.Equal(USFluidOunces.ToCubicFeet(8009.0), 8.364434, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8.364434, USFluidOunces.ToCubicFeet(8009.0));
    }
    if !cmp.Equal(USFluidOunces.ToCubicFeet(3830.03), 4.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.0, USFluidOunces.ToCubicFeet(3830.03));
    }
}

func TestConvertKnownUSFluidOuncesToCubicInches(t * testing.T) {
    if !cmp.Equal(USFluidOunces.ToCubicInches(66.0), 119.109, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 119.109, USFluidOunces.ToCubicInches(66.0));
    }
    if !cmp.Equal(USFluidOunces.ToCubicInches(900.0), 1624.22, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1624.22, USFluidOunces.ToCubicInches(900.0));
    }
    if !cmp.Equal(USFluidOunces.ToCubicInches(8.0), 14.4375, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 14.4375, USFluidOunces.ToCubicInches(8.0));
    }
}

func TestConvertKnownUSFluidOuncesToOilBarrels(t * testing.T) {
    if !cmp.Equal(USFluidOunces.ToOilBarrels(32256.0), 6.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.0, USFluidOunces.ToOilBarrels(32256.0));
    }
    if !cmp.Equal(USFluidOunces.ToOilBarrels(1899.0), 0.3532366, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.3532366, USFluidOunces.ToOilBarrels(1899.0));
    }
    if !cmp.Equal(USFluidOunces.ToOilBarrels(6988.8), 1.3, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.3, USFluidOunces.ToOilBarrels(6988.8));
    }
}

func TestConvertKnownUSGallonsToMillilitres(t * testing.T) {
    if !cmp.Equal(USGallons.ToMillilitres(2.0), 7570.82, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7570.82, USGallons.ToMillilitres(2.0));
    }
    if !cmp.Equal(USGallons.ToMillilitres(0.1), 378.541, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 378.541, USGallons.ToMillilitres(0.1));
    }
    if !cmp.Equal(USGallons.ToMillilitres(56.0), 211983.0599039, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 211983.0599039, USGallons.ToMillilitres(56.0));
    }
}

func TestConvertKnownUSGallonsToLitres(t * testing.T) {
    if !cmp.Equal(USGallons.ToLitres(56.0), 211.983, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 211.983, USGallons.ToLitres(56.0));
    }
    if !cmp.Equal(USGallons.ToLitres(5.1), 19.3056, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 19.3056, USGallons.ToLitres(5.1));
    }
    if !cmp.Equal(USGallons.ToLitres(2.5), 9.46353, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.46353, USGallons.ToLitres(2.5));
    }
}

func TestConvertKnownUSGallonsToKilolitres(t * testing.T) {
    if !cmp.Equal(USGallons.ToKilolitres(111.0), 0.420181, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.420181, USGallons.ToKilolitres(111.0));
    }
    if !cmp.Equal(USGallons.ToKilolitres(9090.0), 34.40939, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 34.40939, USGallons.ToKilolitres(9090.0));
    }
    if !cmp.Equal(USGallons.ToKilolitres(12345.0), 46.730908, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 46.730908, USGallons.ToKilolitres(12345.0));
    }
}

func TestConvertKnownUSGallonsToTeaspoons(t * testing.T) {
    if !cmp.Equal(USGallons.ToTeaspoons(5.0), 3197.47, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3197.47, USGallons.ToTeaspoons(5.0));
    }
    if !cmp.Equal(USGallons.ToTeaspoons(0.4), 255.797, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 255.797, USGallons.ToTeaspoons(0.4));
    }
    if !cmp.Equal(USGallons.ToTeaspoons(8000.0), 5115948.07582550, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5115948.07582550, USGallons.ToTeaspoons(8000.0));
    }
}

func TestConvertKnownUSGallonsToTablespoons(t * testing.T) {
    if !cmp.Equal(USGallons.ToTablespoons(79.0), 16840.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 16840.0, USGallons.ToTablespoons(79.0));
    }
    if !cmp.Equal(USGallons.ToTablespoons(12.67), 2700.7943, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2700.7943, USGallons.ToTablespoons(12.67));
    }
    if !cmp.Equal(USGallons.ToTablespoons(55.1), 11745.36, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 11745.36, USGallons.ToTablespoons(55.1));
    }
}

func TestConvertKnownUSGallonsToQuarts(t * testing.T) {
    if !cmp.Equal(USGallons.ToQuarts(54.0), 179.858, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 179.858, USGallons.ToQuarts(54.0));
    }
    if !cmp.Equal(USGallons.ToQuarts(2.9), 9.65902, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.65902, USGallons.ToQuarts(2.9));
    }
    if !cmp.Equal(USGallons.ToQuarts(0.2), 0.666139, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.666139, USGallons.ToQuarts(0.2));
    }
}

func TestConvertKnownUSGallonsToPints(t * testing.T) {
    if !cmp.Equal(USGallons.ToPints(2.0), 13.3228, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 13.3228, USGallons.ToPints(2.0));
    }
    if !cmp.Equal(USGallons.ToPints(0.12), 0.7993672, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.7993672, USGallons.ToPints(0.12));
    }
    if !cmp.Equal(USGallons.ToPints(500.0), 3330.7, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3330.7, USGallons.ToPints(500.0));
    }
}

func TestConvertKnownUSGallonsToGallons(t * testing.T) {
    if !cmp.Equal(USGallons.ToGallons(23.0), 19.1515, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 19.1515, USGallons.ToGallons(23.0));
    }
    if !cmp.Equal(USGallons.ToGallons(8.2), 6.82793, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.82793, USGallons.ToGallons(8.2));
    }
    if !cmp.Equal(USGallons.ToGallons(1.09), 0.9076149, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.9076149, USGallons.ToGallons(1.09));
    }
}

func TestConvertKnownUSGallonsToFluidOunces(t * testing.T) {
    if !cmp.Equal(USGallons.ToFluidOunces(1.09), 145.2184, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 145.2184, USGallons.ToFluidOunces(1.09));
    }
    if !cmp.Equal(USGallons.ToFluidOunces(34.0), 4529.75, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4529.75, USGallons.ToFluidOunces(34.0));
    }
    if !cmp.Equal(USGallons.ToFluidOunces(666.0), 88729.724440098, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 88729.724440098, USGallons.ToFluidOunces(666.0));
    }
}

func TestConvertKnownUSGallonsToUSTeaspoons(t * testing.T) {
    if !cmp.Equal(USGallons.ToUSTeaspoons(4.0), 3072.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3072.0, USGallons.ToUSTeaspoons(4.0));
    }
    if !cmp.Equal(USGallons.ToUSTeaspoons(1.28), 983.0403, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 983.0403, USGallons.ToUSTeaspoons(1.28));
    }
    if !cmp.Equal(USGallons.ToUSTeaspoons(6.99), 5368.322, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5368.322, USGallons.ToUSTeaspoons(6.99));
    }
}

func TestConvertKnownUSGallonsToUSTablespoons(t * testing.T) {
    if !cmp.Equal(USGallons.ToUSTablespoons(34.0), 8704.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8704.0, USGallons.ToUSTablespoons(34.0));
    }
    if !cmp.Equal(USGallons.ToUSTablespoons(8.4), 2150.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2150.4, USGallons.ToUSTablespoons(8.4));
    }
    if !cmp.Equal(USGallons.ToUSTablespoons(0.091), 23.296, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 23.296, USGallons.ToUSTablespoons(0.091));
    }
}

func TestConvertKnownUSGallonsToUSQuarts(t * testing.T) {
    if !cmp.Equal(USGallons.ToUSQuarts(0.091), 0.364, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.364, USGallons.ToUSQuarts(0.091));
    }
    if !cmp.Equal(USGallons.ToUSQuarts(23.0), 92.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 92.0, USGallons.ToUSQuarts(23.0));
    }
    if !cmp.Equal(USGallons.ToUSQuarts(1000.8), 4003.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4003.2, USGallons.ToUSQuarts(1000.8));
    }
}

func TestConvertKnownUSGallonsToUSPints(t * testing.T) {
    if !cmp.Equal(USGallons.ToUSPints(1000.8), 8006.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8006.4, USGallons.ToUSPints(1000.8));
    }
    if !cmp.Equal(USGallons.ToUSPints(23.6), 188.8, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 188.8, USGallons.ToUSPints(23.6));
    }
    if !cmp.Equal(USGallons.ToUSPints(0.71), 5.68, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.68, USGallons.ToUSPints(0.71));
    }
}

func TestConvertKnownUSGallonsToUSFluidOunces(t * testing.T) {
    if !cmp.Equal(USGallons.ToUSFluidOunces(0.71), 90.88, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 90.88, USGallons.ToUSFluidOunces(0.71));
    }
    if !cmp.Equal(USGallons.ToUSFluidOunces(83.2), 10649.6, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 10649.6, USGallons.ToUSFluidOunces(83.2));
    }
    if !cmp.Equal(USGallons.ToUSFluidOunces(777.0), 99456.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 99456.0, USGallons.ToUSFluidOunces(777.0));
    }
}

func TestConvertKnownUSGallonsToUSCups(t * testing.T) {
    if !cmp.Equal(USGallons.ToUSCups(777.0), 12432.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12432.0, USGallons.ToUSCups(777.0));
    }
    if !cmp.Equal(USGallons.ToUSCups(5.71), 91.36, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 91.36, USGallons.ToUSCups(5.71));
    }
    if !cmp.Equal(USGallons.ToUSCups(0.98), 15.68, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 15.68, USGallons.ToUSCups(0.98));
    }
}

func TestConvertKnownUSGallonsToCubicMetres(t * testing.T) {
    if !cmp.Equal(USGallons.ToCubicMetres(1849.2), 7.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.0, USGallons.ToCubicMetres(1849.2));
    }
    if !cmp.Equal(USGallons.ToCubicMetres(87.0), 0.329331, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.329331, USGallons.ToCubicMetres(87.0));
    }
    if !cmp.Equal(USGallons.ToCubicMetres(123456.0), 467.331797, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 467.331797, USGallons.ToCubicMetres(123456.0));
    }
}

func TestConvertKnownUSGallonsToCubicFeet(t * testing.T) {
    if !cmp.Equal(USGallons.ToCubicFeet(6.0), 0.802083, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.802083, USGallons.ToCubicFeet(6.0));
    }
    if !cmp.Equal(USGallons.ToCubicFeet(24.0), 3.20833, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.20833, USGallons.ToCubicFeet(24.0));
    }
    if !cmp.Equal(USGallons.ToCubicFeet(5.0), 0.668403, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.668403, USGallons.ToCubicFeet(5.0));
    }
}

func TestConvertKnownUSGallonsToCubicInches(t * testing.T) {
    if !cmp.Equal(USGallons.ToCubicInches(6.0), 1386.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1386.0, USGallons.ToCubicInches(6.0));
    }
    if !cmp.Equal(USGallons.ToCubicInches(190.0), 43890.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 43890.0, USGallons.ToCubicInches(190.0));
    }
    if !cmp.Equal(USGallons.ToCubicInches(55.0), 12705.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12705.0, USGallons.ToCubicInches(55.0));
    }
}

func TestConvertKnownUSGallonsToOilBarrels(t * testing.T) {
    if !cmp.Equal(USGallons.ToOilBarrels(966.0), 23.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 23.0, USGallons.ToOilBarrels(966.0));
    }
    if !cmp.Equal(USGallons.ToOilBarrels(1234.0), 29.38095, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 29.38095, USGallons.ToOilBarrels(1234.0));
    }
    if !cmp.Equal(USGallons.ToOilBarrels(16.8), 0.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.4, USGallons.ToOilBarrels(16.8));
    }
}

func TestConvertKnownUSPintsToMillilitres(t * testing.T) {
    if !cmp.Equal(USPints.ToMillilitres(0.66), 312.2965, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 312.2965, USPints.ToMillilitres(0.66));
    }
    if !cmp.Equal(USPints.ToMillilitres(9.1), 4305.91, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4305.91, USPints.ToMillilitres(9.1));
    }
    if !cmp.Equal(USPints.ToMillilitres(0.8), 378.541, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 378.541, USPints.ToMillilitres(0.8));
    }
}

func TestConvertKnownUSPintsToLitres(t * testing.T) {
    if !cmp.Equal(USPints.ToLitres(1.5), 0.709765, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.709765, USPints.ToLitres(1.5));
    }
    if !cmp.Equal(USPints.ToLitres(0.6), 0.283906, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.283906, USPints.ToLitres(0.6));
    }
    if !cmp.Equal(USPints.ToLitres(1367.0), 646.8322, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 646.8322, USPints.ToLitres(1367.0));
    }
}

func TestConvertKnownUSPintsToKilolitres(t * testing.T) {
    if !cmp.Equal(USPints.ToKilolitres(1900.0), 0.8990353, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.8990353, USPints.ToKilolitres(1900.0));
    }
    if !cmp.Equal(USPints.ToKilolitres(8888.0), 4.205592, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.205592, USPints.ToKilolitres(8888.0));
    }
    if !cmp.Equal(USPints.ToKilolitres(123456.0), 58.4164747, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 58.4164747, USPints.ToKilolitres(123456.0));
    }
}

func TestConvertKnownUSPintsToTeaspoons(t * testing.T) {
    if !cmp.Equal(USPints.ToTeaspoons(6.0), 479.62, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 479.62, USPints.ToTeaspoons(6.0));
    }
    if !cmp.Equal(USPints.ToTeaspoons(0.08), 6.394935, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.394935, USPints.ToTeaspoons(0.08));
    }
    if !cmp.Equal(USPints.ToTeaspoons(3.1), 247.804, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 247.804, USPints.ToTeaspoons(3.1));
    }
}

func TestConvertKnownUSPintsToTablespoons(t * testing.T) {
    if !cmp.Equal(USPints.ToTablespoons(2.0), 53.2911, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 53.2911, USPints.ToTablespoons(2.0));
    }
    if !cmp.Equal(USPints.ToTablespoons(0.09), 2.398101, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.398101, USPints.ToTablespoons(0.09));
    }
    if !cmp.Equal(USPints.ToTablespoons(1678.0), 44711.25, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 44711.25, USPints.ToTablespoons(1678.0));
    }
}

func TestConvertKnownUSPintsToQuarts(t * testing.T) {
    if !cmp.Equal(USPints.ToQuarts(12.0), 4.99605, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.99605, USPints.ToQuarts(12.0));
    }
    if !cmp.Equal(USPints.ToQuarts(503.8), 209.75063, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 209.75063, USPints.ToQuarts(503.8));
    }
    if !cmp.Equal(USPints.ToQuarts(0.65), 0.2706191, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.2706191, USPints.ToQuarts(0.65));
    }
}

func TestConvertKnownUSPintsToPints(t * testing.T) {
    if !cmp.Equal(USPints.ToPints(0.9), 0.749407, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.749407, USPints.ToPints(0.9));
    }
    if !cmp.Equal(USPints.ToPints(102.0), 84.9328, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 84.9328, USPints.ToPints(102.0));
    }
    if !cmp.Equal(USPints.ToPints(8000.7), 6661.97635, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6661.97635, USPints.ToPints(8000.7));
    }
}

func TestConvertKnownUSPintsToGallons(t * testing.T) {
    if !cmp.Equal(USPints.ToGallons(80.0), 8.32674, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8.32674, USPints.ToGallons(80.0));
    }
    if !cmp.Equal(USPints.ToGallons(6.2), 0.645322, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.645322, USPints.ToGallons(6.2));
    }
    if !cmp.Equal(USPints.ToGallons(0.7), 0.072859, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.072859, USPints.ToGallons(0.7));
    }
}

func TestConvertKnownUSPintsToFluidOunces(t * testing.T) {
    if !cmp.Equal(USPints.ToFluidOunces(12.0), 199.842, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 199.842, USPints.ToFluidOunces(12.0));
    }
    if !cmp.Equal(USPints.ToFluidOunces(9.7), 161.539, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 161.539, USPints.ToFluidOunces(9.7));
    }
    if !cmp.Equal(USPints.ToFluidOunces(124.0), 2065.03, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2065.03, USPints.ToFluidOunces(124.0));
    }
}

func TestConvertKnownUSPintsToUSTeaspoons(t * testing.T) {
    if !cmp.Equal(USPints.ToUSTeaspoons(4.0), 384.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 384.0, USPints.ToUSTeaspoons(4.0));
    }
    if !cmp.Equal(USPints.ToUSTeaspoons(2.5), 240.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 240.0, USPints.ToUSTeaspoons(2.5));
    }
    if !cmp.Equal(USPints.ToUSTeaspoons(8001.9), 768182.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 768182.4, USPints.ToUSTeaspoons(8001.9));
    }
}

func TestConvertKnownUSPintsToUSTablespoons(t * testing.T) {
    if !cmp.Equal(USPints.ToUSTablespoons(80.0), 2560.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2560.0, USPints.ToUSTablespoons(80.0));
    }
    if !cmp.Equal(USPints.ToUSTablespoons(12.7), 406.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 406.4, USPints.ToUSTablespoons(12.7));
    }
    if !cmp.Equal(USPints.ToUSTablespoons(0.6), 19.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 19.2, USPints.ToUSTablespoons(0.6));
    }
}

func TestConvertKnownUSPintsToUSQuarts(t * testing.T) {
    if !cmp.Equal(USPints.ToUSQuarts(0.6), 0.3, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.3, USPints.ToUSQuarts(0.6));
    }
    if !cmp.Equal(USPints.ToUSQuarts(10090.0), 5045.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5045.0, USPints.ToUSQuarts(10090.0));
    }
    if !cmp.Equal(USPints.ToUSQuarts(4.56), 2.28, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.28, USPints.ToUSQuarts(4.56));
    }
}

func TestConvertKnownUSPintsToUSGallons(t * testing.T) {
    if !cmp.Equal(USPints.ToUSGallons(4.56), 0.57, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.57, USPints.ToUSGallons(4.56));
    }
    if !cmp.Equal(USPints.ToUSGallons(9000.0), 1125.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1125.0, USPints.ToUSGallons(9000.0));
    }
    if !cmp.Equal(USPints.ToUSGallons(47.2), 5.9, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.9, USPints.ToUSGallons(47.2));
    }
}

func TestConvertKnownUSPintsToUSFluidOunces(t * testing.T) {
    if !cmp.Equal(USPints.ToUSFluidOunces(47.2), 755.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 755.2, USPints.ToUSFluidOunces(47.2));
    }
    if !cmp.Equal(USPints.ToUSFluidOunces(1001.0), 16016.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 16016.0, USPints.ToUSFluidOunces(1001.0));
    }
    if !cmp.Equal(USPints.ToUSFluidOunces(23.9), 382.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 382.4, USPints.ToUSFluidOunces(23.9));
    }
}

func TestConvertKnownUSPintsToUSCups(t * testing.T) {
    if !cmp.Equal(USPints.ToUSCups(23.9), 47.8, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 47.8, USPints.ToUSCups(23.9));
    }
    if !cmp.Equal(USPints.ToUSCups(1009.0), 2018.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2018.0, USPints.ToUSCups(1009.0));
    }
    if !cmp.Equal(USPints.ToUSCups(45.9), 91.8, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 91.8, USPints.ToUSCups(45.9));
    }
}

func TestConvertKnownUSPintsToCubicMetres(t * testing.T) {
    if !cmp.Equal(USPints.ToCubicMetres(14793.6), 7.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.0, USPints.ToCubicMetres(14793.6));
    }
    if !cmp.Equal(USPints.ToCubicMetres(700.0), 0.331224, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.331224, USPints.ToCubicMetres(700.0));
    }
    if !cmp.Equal(USPints.ToCubicMetres(123456.0), 58.4164747, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 58.4164747, USPints.ToCubicMetres(123456.0));
    }
}

func TestConvertKnownUSPintsToCubicFeet(t * testing.T) {
    if !cmp.Equal(USPints.ToCubicFeet(66.0), 1.10286, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.10286, USPints.ToCubicFeet(66.0));
    }
    if !cmp.Equal(USPints.ToCubicFeet(2692.99), 45.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 45.0, USPints.ToCubicFeet(2692.99));
    }
    if !cmp.Equal(USPints.ToCubicFeet(123.0), 2.05534, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.05534, USPints.ToCubicFeet(123.0));
    }
}

func TestConvertKnownUSPintsToCubicInches(t * testing.T) {
    if !cmp.Equal(USPints.ToCubicInches(66.0), 1905.75, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1905.75, USPints.ToCubicInches(66.0));
    }
    if !cmp.Equal(USPints.ToCubicInches(900.0), 25987.5, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 25987.5, USPints.ToCubicInches(900.0));
    }
    if !cmp.Equal(USPints.ToCubicInches(6.7), 193.463, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 193.463, USPints.ToCubicInches(6.7));
    }
}

func TestConvertKnownUSPintsToOilBarrels(t * testing.T) {
    if !cmp.Equal(USPints.ToOilBarrels(223776.0), 666.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 666.0, USPints.ToOilBarrels(223776.0));
    }
    if !cmp.Equal(USPints.ToOilBarrels(1234.0), 3.672619, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.672619, USPints.ToOilBarrels(1234.0));
    }
    if !cmp.Equal(USPints.ToOilBarrels(302.4), 0.9, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.9, USPints.ToOilBarrels(302.4));
    }
}

func TestConvertKnownUSQuartsToMillilitres(t * testing.T) {
    if !cmp.Equal(USQuarts.ToMillilitres(9000.0), 8517176.51400, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8517176.51400, USQuarts.ToMillilitres(9000.0));
    }
    if !cmp.Equal(USQuarts.ToMillilitres(5.0), 4731.76, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4731.76, USQuarts.ToMillilitres(5.0));
    }
    if !cmp.Equal(USQuarts.ToMillilitres(0.7), 662.447, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 662.447, USQuarts.ToMillilitres(0.7));
    }
}

func TestConvertKnownUSQuartsToLitres(t * testing.T) {
    if !cmp.Equal(USQuarts.ToLitres(9.0), 8.51718, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8.51718, USQuarts.ToLitres(9.0));
    }
    if !cmp.Equal(USQuarts.ToLitres(1024.0), 969.0654, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 969.0654, USQuarts.ToLitres(1024.0));
    }
    if !cmp.Equal(USQuarts.ToLitres(0.8), 0.757082, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.757082, USQuarts.ToLitres(0.8));
    }
}

func TestConvertKnownUSQuartsToKilolitres(t * testing.T) {
    if !cmp.Equal(USQuarts.ToKilolitres(1000.0), 0.946353, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.946353, USQuarts.ToKilolitres(1000.0));
    }
    if !cmp.Equal(USQuarts.ToKilolitres(6789.0), 6.42479, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.42479, USQuarts.ToKilolitres(6789.0));
    }
    if !cmp.Equal(USQuarts.ToKilolitres(45.0), 0.0425859, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0425859, USQuarts.ToKilolitres(45.0));
    }
}

func TestConvertKnownUSQuartsToTeaspoons(t * testing.T) {
    if !cmp.Equal(USQuarts.ToTeaspoons(45.0), 7194.3, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7194.3, USQuarts.ToTeaspoons(45.0));
    }
    if !cmp.Equal(USQuarts.ToTeaspoons(6.5), 1039.18, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1039.18, USQuarts.ToTeaspoons(6.5));
    }
    if !cmp.Equal(USQuarts.ToTeaspoons(0.9), 143.886, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 143.886, USQuarts.ToTeaspoons(0.9));
    }
}

func TestConvertKnownUSQuartsToTablespoons(t * testing.T) {
    if !cmp.Equal(USQuarts.ToTablespoons(6.0), 319.747, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 319.747, USQuarts.ToTablespoons(6.0));
    }
    if !cmp.Equal(USQuarts.ToTablespoons(89.4), 4764.227, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4764.227, USQuarts.ToTablespoons(89.4));
    }
    if !cmp.Equal(USQuarts.ToTablespoons(4.67), 248.8696, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 248.8696, USQuarts.ToTablespoons(4.67));
    }
}

func TestConvertKnownUSQuartsToQuarts(t * testing.T) {
    if !cmp.Equal(USQuarts.ToQuarts(4.6), 3.8303, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.8303, USQuarts.ToQuarts(4.6));
    }
    if !cmp.Equal(USQuarts.ToQuarts(0.9), 0.749407, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.749407, USQuarts.ToQuarts(0.9));
    }
    if !cmp.Equal(USQuarts.ToQuarts(134.0), 111.578, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 111.578, USQuarts.ToQuarts(134.0));
    }
}

func TestConvertKnownUSQuartsToPints(t * testing.T) {
    if !cmp.Equal(USQuarts.ToPints(123.0), 204.838, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 204.838, USQuarts.ToPints(123.0));
    }
    if !cmp.Equal(USQuarts.ToPints(1090.9), 1816.72854, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1816.72854, USQuarts.ToPints(1090.9));
    }
    if !cmp.Equal(USQuarts.ToPints(56.0), 93.2595, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 93.2595, USQuarts.ToPints(56.0));
    }
}

func TestConvertKnownUSQuartsToGallons(t * testing.T) {
    if !cmp.Equal(USQuarts.ToGallons(56.0), 11.6574, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 11.6574, USQuarts.ToGallons(56.0));
    }
    if !cmp.Equal(USQuarts.ToGallons(7.12), 1.48216, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.48216, USQuarts.ToGallons(7.12));
    }
    if !cmp.Equal(USQuarts.ToGallons(800.0), 166.535, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 166.535, USQuarts.ToGallons(800.0));
    }
}

func TestConvertKnownUSQuartsToFluidOunces(t * testing.T) {
    if !cmp.Equal(USQuarts.ToFluidOunces(800.0), 26645.56289492, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 26645.56289492, USQuarts.ToFluidOunces(800.0));
    }
    if !cmp.Equal(USQuarts.ToFluidOunces(6.8), 226.487, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 226.487, USQuarts.ToFluidOunces(6.8));
    }
    if !cmp.Equal(USQuarts.ToFluidOunces(0.9), 29.9763, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 29.9763, USQuarts.ToFluidOunces(0.9));
    }
}

func TestConvertKnownUSQuartsToUSTeaspoons(t * testing.T) {
    if !cmp.Equal(USQuarts.ToUSTeaspoons(3.0), 576.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 576.0, USQuarts.ToUSTeaspoons(3.0));
    }
    if !cmp.Equal(USQuarts.ToUSTeaspoons(0.12), 23.04001, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 23.04001, USQuarts.ToUSTeaspoons(0.12));
    }
    if !cmp.Equal(USQuarts.ToUSTeaspoons(4.5), 864.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 864.0, USQuarts.ToUSTeaspoons(4.5));
    }
}

func TestConvertKnownUSQuartsToUSTablespoons(t * testing.T) {
    if !cmp.Equal(USQuarts.ToUSTablespoons(4.5), 288.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 288.0, USQuarts.ToUSTablespoons(4.5));
    }
    if !cmp.Equal(USQuarts.ToUSTablespoons(0.777), 49.728, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 49.728, USQuarts.ToUSTablespoons(0.777));
    }
    if !cmp.Equal(USQuarts.ToUSTablespoons(1.8), 115.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 115.2, USQuarts.ToUSTablespoons(1.8));
    }
}

func TestConvertKnownUSQuartsToUSPints(t * testing.T) {
    if !cmp.Equal(USQuarts.ToUSPints(1.8), 3.6, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.6, USQuarts.ToUSPints(1.8));
    }
    if !cmp.Equal(USQuarts.ToUSPints(900.0), 1800.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1800.0, USQuarts.ToUSPints(900.0));
    }
    if !cmp.Equal(USQuarts.ToUSPints(12.45), 24.9, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 24.9, USQuarts.ToUSPints(12.45));
    }
}

func TestConvertKnownUSQuartsToUSGallons(t * testing.T) {
    if !cmp.Equal(USQuarts.ToUSGallons(12.45), 3.1125, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.1125, USQuarts.ToUSGallons(12.45));
    }
    if !cmp.Equal(USQuarts.ToUSGallons(0.8), 0.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.2, USQuarts.ToUSGallons(0.8));
    }
    if !cmp.Equal(USQuarts.ToUSGallons(100.9), 25.225, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 25.225, USQuarts.ToUSGallons(100.9));
    }
}

func TestConvertKnownUSQuartsToUSFluidOunces(t * testing.T) {
    if !cmp.Equal(USQuarts.ToUSFluidOunces(100.9), 3228.8, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3228.8, USQuarts.ToUSFluidOunces(100.9));
    }
    if !cmp.Equal(USQuarts.ToUSFluidOunces(12345.0), 395040.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 395040.0, USQuarts.ToUSFluidOunces(12345.0));
    }
    if !cmp.Equal(USQuarts.ToUSFluidOunces(8.7), 278.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 278.4, USQuarts.ToUSFluidOunces(8.7));
    }
}

func TestConvertKnownUSQuartsToUSCups(t * testing.T) {
    if !cmp.Equal(USQuarts.ToUSCups(8.7), 34.8, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 34.8, USQuarts.ToUSCups(8.7));
    }
    if !cmp.Equal(USQuarts.ToUSCups(123.9), 495.6, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 495.6, USQuarts.ToUSCups(123.9));
    }
    if !cmp.Equal(USQuarts.ToUSCups(0.66), 2.64, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.64, USQuarts.ToUSCups(0.66));
    }
}

func TestConvertKnownUSQuartsToCubicMetres(t * testing.T) {
    if !cmp.Equal(USQuarts.ToCubicMetres(8453.51), 8.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8.0, USQuarts.ToCubicMetres(8453.51));
    }
    if !cmp.Equal(USQuarts.ToCubicMetres(5000.0), 4.731765, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.731765, USQuarts.ToCubicMetres(5000.0));
    }
    if !cmp.Equal(USQuarts.ToCubicMetres(123456.0), 116.832949, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 116.832949, USQuarts.ToCubicMetres(123456.0));
    }
}

func TestConvertKnownUSQuartsToCubicFeet(t * testing.T) {
    if !cmp.Equal(USQuarts.ToCubicFeet(44.0), 1.47049, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.47049, USQuarts.ToCubicFeet(44.0));
    }
    if !cmp.Equal(USQuarts.ToCubicFeet(2663.06), 89.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 89.0, USQuarts.ToCubicFeet(2663.06));
    }
    if !cmp.Equal(USQuarts.ToCubicFeet(444.0), 14.8385, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 14.8385, USQuarts.ToCubicFeet(444.0));
    }
}

func TestConvertKnownUSQuartsToCubicInches(t * testing.T) {
    if !cmp.Equal(USQuarts.ToCubicInches(44.0), 2541.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2541.0, USQuarts.ToCubicInches(44.0));
    }
    if !cmp.Equal(USQuarts.ToCubicInches(800.0), 46200.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 46200.0, USQuarts.ToCubicInches(800.0));
    }
    if !cmp.Equal(USQuarts.ToCubicInches(6.0), 346.5, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 346.5, USQuarts.ToCubicInches(6.0));
    }
}

func TestConvertKnownUSQuartsToOilBarrels(t * testing.T) {
    if !cmp.Equal(USQuarts.ToOilBarrels(9240.0), 55.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 55.0, USQuarts.ToOilBarrels(9240.0));
    }
    if !cmp.Equal(USQuarts.ToOilBarrels(1344.0), 8.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8.0, USQuarts.ToOilBarrels(1344.0));
    }
    if !cmp.Equal(USQuarts.ToOilBarrels(207312.0), 1234.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1234.0, USQuarts.ToOilBarrels(207312.0));
    }
}

func TestConvertKnownUSTablespoonsToMillilitres(t * testing.T) {
    if !cmp.Equal(USTablespoons.ToMillilitres(12.0), 177.441, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 177.441, USTablespoons.ToMillilitres(12.0));
    }
    if !cmp.Equal(USTablespoons.ToMillilitres(0.8), 11.8294, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 11.8294, USTablespoons.ToMillilitres(0.8));
    }
    if !cmp.Equal(USTablespoons.ToMillilitres(4500.0), 66540.44, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 66540.44, USTablespoons.ToMillilitres(4500.0));
    }
}

func TestConvertKnownUSTablespoonsToLitres(t * testing.T) {
    if !cmp.Equal(USTablespoons.ToLitres(567.0), 8.3841, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8.3841, USTablespoons.ToLitres(567.0));
    }
    if !cmp.Equal(USTablespoons.ToLitres(80.9), 1.196249, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.196249, USTablespoons.ToLitres(80.9));
    }
    if !cmp.Equal(USTablespoons.ToLitres(10000.0), 147.8676, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 147.8676, USTablespoons.ToLitres(10000.0));
    }
}

func TestConvertKnownUSTablespoonsToKilolitres(t * testing.T) {
    if !cmp.Equal(USTablespoons.ToKilolitres(9900.0), 0.146389, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.146389, USTablespoons.ToKilolitres(9900.0));
    }
    if !cmp.Equal(USTablespoons.ToKilolitres(123456.0), 1.82551483, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.82551483, USTablespoons.ToKilolitres(123456.0));
    }
    if !cmp.Equal(USTablespoons.ToKilolitres(18009.0), 0.26629485, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.26629485, USTablespoons.ToKilolitres(18009.0));
    }
}

func TestConvertKnownUSTablespoonsToTeaspoons(t * testing.T) {
    if !cmp.Equal(USTablespoons.ToTeaspoons(14.0), 34.9723, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 34.9723, USTablespoons.ToTeaspoons(14.0));
    }
    if !cmp.Equal(USTablespoons.ToTeaspoons(0.9), 2.24822, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.24822, USTablespoons.ToTeaspoons(0.9));
    }
    if !cmp.Equal(USTablespoons.ToTeaspoons(180.0), 449.644, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 449.644, USTablespoons.ToTeaspoons(180.0));
    }
}

func TestConvertKnownUSTablespoonsToTablespoons(t * testing.T) {
    if !cmp.Equal(USTablespoons.ToTablespoons(109.0), 90.7614, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 90.7614, USTablespoons.ToTablespoons(109.0));
    }
    if !cmp.Equal(USTablespoons.ToTablespoons(89.0), 74.108, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 74.108, USTablespoons.ToTablespoons(89.0));
    }
    if !cmp.Equal(USTablespoons.ToTablespoons(5.2), 4.3299, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.3299, USTablespoons.ToTablespoons(5.2));
    }
}

func TestConvertKnownUSTablespoonsToQuarts(t * testing.T) {
    if !cmp.Equal(USTablespoons.ToQuarts(345.0), 4.48863, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.48863, USTablespoons.ToQuarts(345.0));
    }
    if !cmp.Equal(USTablespoons.ToQuarts(89.9), 1.169647, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.169647, USTablespoons.ToQuarts(89.9));
    }
    if !cmp.Equal(USTablespoons.ToQuarts(12.88), 0.16757568, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.16757568, USTablespoons.ToQuarts(12.88));
    }
}

func TestConvertKnownUSTablespoonsToPints(t * testing.T) {
    if !cmp.Equal(USTablespoons.ToPints(12.0), 0.312253, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.312253, USTablespoons.ToPints(12.0));
    }
    if !cmp.Equal(USTablespoons.ToPints(809.7), 21.069259, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 21.069259, USTablespoons.ToPints(809.7));
    }
    if !cmp.Equal(USTablespoons.ToPints(0.4), 0.0104084, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0104084, USTablespoons.ToPints(0.4));
    }
}

func TestConvertKnownUSTablespoonsToGallons(t * testing.T) {
    if !cmp.Equal(USTablespoons.ToGallons(400.0), 1.30105, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.30105, USTablespoons.ToGallons(400.0));
    }
    if !cmp.Equal(USTablespoons.ToGallons(1200.9), 3.90608761, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.90608761, USTablespoons.ToGallons(1200.9));
    }
    if !cmp.Equal(USTablespoons.ToGallons(8.0), 0.0260211, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0260211, USTablespoons.ToGallons(8.0));
    }
}

func TestConvertKnownUSTablespoonsToFluidOunces(t * testing.T) {
    if !cmp.Equal(USTablespoons.ToFluidOunces(4.0), 2.08169, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.08169, USTablespoons.ToFluidOunces(4.0));
    }
    if !cmp.Equal(USTablespoons.ToFluidOunces(50.9), 26.48945, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 26.48945, USTablespoons.ToFluidOunces(50.9));
    }
    if !cmp.Equal(USTablespoons.ToFluidOunces(123.0), 64.0118, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 64.0118, USTablespoons.ToFluidOunces(123.0));
    }
}

func TestConvertKnownUSTablespoonsToUSTeaspoons(t * testing.T) {
    if !cmp.Equal(USTablespoons.ToUSTeaspoons(90.0), 270.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 270.0, USTablespoons.ToUSTeaspoons(90.0));
    }
    if !cmp.Equal(USTablespoons.ToUSTeaspoons(4.5), 13.5, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 13.5, USTablespoons.ToUSTeaspoons(4.5));
    }
    if !cmp.Equal(USTablespoons.ToUSTeaspoons(4608.0), 13824.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 13824.0, USTablespoons.ToUSTeaspoons(4608.0));
    }
}

func TestConvertKnownUSTablespoonsToUSQuarts(t * testing.T) {
    if !cmp.Equal(USTablespoons.ToUSQuarts(456.0), 7.125, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.125, USTablespoons.ToUSQuarts(456.0));
    }
    if !cmp.Equal(USTablespoons.ToUSQuarts(7.12), 0.11125, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.11125, USTablespoons.ToUSQuarts(7.12));
    }
    if !cmp.Equal(USTablespoons.ToUSQuarts(194.9), 3.0453125, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.0453125, USTablespoons.ToUSQuarts(194.9));
    }
}

func TestConvertKnownUSTablespoonsToUSPints(t * testing.T) {
    if !cmp.Equal(USTablespoons.ToUSPints(194.9), 6.090625, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.090625, USTablespoons.ToUSPints(194.9));
    }
    if !cmp.Equal(USTablespoons.ToUSPints(2000.0), 62.5, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 62.5, USTablespoons.ToUSPints(2000.0));
    }
    if !cmp.Equal(USTablespoons.ToUSPints(18.7), 0.584375, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.584375, USTablespoons.ToUSPints(18.7));
    }
}

func TestConvertKnownUSTablespoonsToUSGallons(t * testing.T) {
    if !cmp.Equal(USTablespoons.ToUSGallons(18.7), 0.07304687, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.07304687, USTablespoons.ToUSGallons(18.7));
    }
    if !cmp.Equal(USTablespoons.ToUSGallons(1900.0), 7.421875, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.421875, USTablespoons.ToUSGallons(1900.0));
    }
    if !cmp.Equal(USTablespoons.ToUSGallons(12345.0), 48.222656, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 48.222656, USTablespoons.ToUSGallons(12345.0));
    }
}

func TestConvertKnownUSTablespoonsToUSFluidOunces(t * testing.T) {
    if !cmp.Equal(USTablespoons.ToUSFluidOunces(1234.0), 617.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 617.0, USTablespoons.ToUSFluidOunces(1234.0));
    }
    if !cmp.Equal(USTablespoons.ToUSFluidOunces(89.3), 44.65, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 44.65, USTablespoons.ToUSFluidOunces(89.3));
    }
    if !cmp.Equal(USTablespoons.ToUSFluidOunces(90.99), 45.495, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 45.495, USTablespoons.ToUSFluidOunces(90.99));
    }
}

func TestConvertKnownUSTablespoonsToUSCups(t * testing.T) {
    if !cmp.Equal(USTablespoons.ToUSCups(90.99), 5.686875, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.686875, USTablespoons.ToUSCups(90.99));
    }
    if !cmp.Equal(USTablespoons.ToUSCups(1230.0), 76.875, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 76.875, USTablespoons.ToUSCups(1230.0));
    }
    if !cmp.Equal(USTablespoons.ToUSCups(9000.9), 562.55625, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 562.55625, USTablespoons.ToUSCups(9000.9));
    }
}

func TestConvertKnownUSTablespoonsToCubicMetres(t * testing.T) {
    if !cmp.Equal(USTablespoons.ToCubicMetres(541024.0), 8.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8.0, USTablespoons.ToCubicMetres(541024.0));
    }
    if !cmp.Equal(USTablespoons.ToCubicMetres(10200.0), 0.150825, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.150825, USTablespoons.ToCubicMetres(10200.0));
    }
    if !cmp.Equal(USTablespoons.ToCubicMetres(123456.0), 1.82551483, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.82551483, USTablespoons.ToCubicMetres(123456.0));
    }
}

func TestConvertKnownUSTablespoonsToCubicFeet(t * testing.T) {
    if !cmp.Equal(USTablespoons.ToCubicFeet(66.0), 0.0344645, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0344645, USTablespoons.ToCubicFeet(66.0));
    }
    if !cmp.Equal(USTablespoons.ToCubicFeet(7660.05), 4.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.0, USTablespoons.ToCubicFeet(7660.05));
    }
    if !cmp.Equal(USTablespoons.ToCubicFeet(1234.0), 0.6443821, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.6443821, USTablespoons.ToCubicFeet(1234.0));
    }
}

func TestConvertKnownUSTablespoonsToCubicInches(t * testing.T) {
    if !cmp.Equal(USTablespoons.ToCubicInches(900.0), 812.109, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 812.109, USTablespoons.ToCubicInches(900.0));
    }
    if !cmp.Equal(USTablespoons.ToCubicInches(10.0), 9.02344, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.02344, USTablespoons.ToCubicInches(10.0));
    }
    if !cmp.Equal(USTablespoons.ToCubicInches(4.0), 3.60938, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.60938, USTablespoons.ToCubicInches(4.0));
    }
}

func TestConvertKnownUSTablespoonsToOilBarrels(t * testing.T) {
    if !cmp.Equal(USTablespoons.ToOilBarrels(591360), 55.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 55.0, USTablespoons.ToOilBarrels(591360));
    }
    if !cmp.Equal(USTablespoons.ToOilBarrels(4300.8), 0.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.4, USTablespoons.ToOilBarrels(4300.8));
    }
    if !cmp.Equal(USTablespoons.ToOilBarrels(34406.4), 3.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.2, USTablespoons.ToOilBarrels(34406.4));
    }
}

func TestConvertKnownUSTeaspoonsToMillilitres(t * testing.T) {
    if !cmp.Equal(USTeaspoons.ToMillilitres(6.9), 34.0095, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 34.0095, USTeaspoons.ToMillilitres(6.9));
    }
    if !cmp.Equal(USTeaspoons.ToMillilitres(1.6), 7.88627, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.88627, USTeaspoons.ToMillilitres(1.6));
    }
    if !cmp.Equal(USTeaspoons.ToMillilitres(800.0), 3943.14, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3943.14, USTeaspoons.ToMillilitres(800.0));
    }
}

func TestConvertKnownUSTeaspoonsToLitres(t * testing.T) {
    if !cmp.Equal(USTeaspoons.ToLitres(7.0), 0.0345024, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0345024, USTeaspoons.ToLitres(7.0));
    }
    if !cmp.Equal(USTeaspoons.ToLitres(90.0), 0.443603, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.443603, USTeaspoons.ToLitres(90.0));
    }
    if !cmp.Equal(USTeaspoons.ToLitres(56.7), 0.2794698, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.2794698, USTeaspoons.ToLitres(56.7));
    }
}

func TestConvertKnownUSTeaspoonsToKilolitres(t * testing.T) {
    if !cmp.Equal(USTeaspoons.ToKilolitres(10009000.0), 49.33356028, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 49.33356028, USTeaspoons.ToKilolitres(10009000.0));
    }
    if !cmp.Equal(USTeaspoons.ToKilolitres(1234567.8), 6.08508592078, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.08508592078, USTeaspoons.ToKilolitres(1234567.8));
    }
    if !cmp.Equal(USTeaspoons.ToKilolitres(9800.0), 0.04830342, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.04830342, USTeaspoons.ToKilolitres(9800.0));
    }
}

func TestConvertKnownUSTeaspoonsToTeaspoons(t * testing.T) {
    if !cmp.Equal(USTeaspoons.ToTeaspoons(122.0), 101.586, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 101.586, USTeaspoons.ToTeaspoons(122.0));
    }
    if !cmp.Equal(USTeaspoons.ToTeaspoons(89.2), 74.27448, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 74.27448, USTeaspoons.ToTeaspoons(89.2));
    }
    if !cmp.Equal(USTeaspoons.ToTeaspoons(900.0), 749.406, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 749.406, USTeaspoons.ToTeaspoons(900.0));
    }
}

func TestConvertKnownUSTeaspoonsToTablespoons(t * testing.T) {
    if !cmp.Equal(USTeaspoons.ToTablespoons(500.0), 138.779, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 138.779, USTeaspoons.ToTablespoons(500.0));
    }
    if !cmp.Equal(USTeaspoons.ToTablespoons(12.34), 3.425064, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.425064, USTeaspoons.ToTablespoons(12.34));
    }
    if !cmp.Equal(USTeaspoons.ToTablespoons(667.0), 185.131, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 185.131, USTeaspoons.ToTablespoons(667.0));
    }
}

func TestConvertKnownUSTeaspoonsToQuarts(t * testing.T) {
    if !cmp.Equal(USTeaspoons.ToQuarts(78.0), 0.338274, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.338274, USTeaspoons.ToQuarts(78.0));
    }
    if !cmp.Equal(USTeaspoons.ToQuarts(900.1), 3.9035927, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.9035927, USTeaspoons.ToQuarts(900.1));
    }
    if !cmp.Equal(USTeaspoons.ToQuarts(116.9), 0.50697698, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.50697698, USTeaspoons.ToQuarts(116.9));
    }
}

func TestConvertKnownUSTeaspoonsToPints(t * testing.T) {
    if !cmp.Equal(USTeaspoons.ToPints(116.0), 1.00615, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.00615, USTeaspoons.ToPints(116.0));
    }
    if !cmp.Equal(USTeaspoons.ToPints(59.5), 0.5160844, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.5160844, USTeaspoons.ToPints(59.5));
    }
    if !cmp.Equal(USTeaspoons.ToPints(1900.0), 16.48, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 16.48, USTeaspoons.ToPints(1900.0));
    }
}

func TestConvertKnownUSTeaspoonsToGallons(t * testing.T) {
    if !cmp.Equal(USTeaspoons.ToGallons(199.0), 0.215758, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.215758, USTeaspoons.ToGallons(199.0));
    }
    if !cmp.Equal(USTeaspoons.ToGallons(12345.0), 13.384583, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 13.384583, USTeaspoons.ToGallons(12345.0));
    }
    if !cmp.Equal(USTeaspoons.ToGallons(90001.0), 97.580059, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 97.580059, USTeaspoons.ToGallons(90001.0));
    }
}

func TestConvertKnownUSTeaspoonsToFluidOunces(t * testing.T) {
    if !cmp.Equal(USTeaspoons.ToFluidOunces(123.0), 21.3373, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 21.3373, USTeaspoons.ToFluidOunces(123.0));
    }
    if !cmp.Equal(USTeaspoons.ToFluidOunces(89.0), 15.4392, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 15.4392, USTeaspoons.ToFluidOunces(89.0));
    }
    if !cmp.Equal(USTeaspoons.ToFluidOunces(1009.0), 175.035, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 175.035, USTeaspoons.ToFluidOunces(1009.0));
    }
}

func TestConvertKnownUSTeaspoonsToUSTablespoons(t * testing.T) {
    if !cmp.Equal(USTeaspoons.ToUSTablespoons(190.0), 63.3333, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 63.3333, USTeaspoons.ToUSTablespoons(190.0));
    }
    if !cmp.Equal(USTeaspoons.ToUSTablespoons(5.6), 1.86667, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.86667, USTeaspoons.ToUSTablespoons(5.6));
    }
    if !cmp.Equal(USTeaspoons.ToUSTablespoons(0.7), 0.233333, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.233333, USTeaspoons.ToUSTablespoons(0.7));
    }
}

func TestConvertKnownUSTeaspoonsToUSQuarts(t * testing.T) {
    if !cmp.Equal(USTeaspoons.ToUSQuarts(100.4), 0.5229165, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.5229165, USTeaspoons.ToUSQuarts(100.4));
    }
    if !cmp.Equal(USTeaspoons.ToUSQuarts(9000.0), 46.87498, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 46.87498, USTeaspoons.ToUSQuarts(9000.0));
    }
    if !cmp.Equal(USTeaspoons.ToUSQuarts(1234.0), 6.427081, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.427081, USTeaspoons.ToUSQuarts(1234.0));
    }
}

func TestConvertKnownUSTeaspoonsToUSPints(t * testing.T) {
    if !cmp.Equal(USTeaspoons.ToUSPints(109.0), 1.13542, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.13542, USTeaspoons.ToUSPints(109.0));
    }
    if !cmp.Equal(USTeaspoons.ToUSPints(3400.0), 35.41666, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 35.41666, USTeaspoons.ToUSPints(3400.0));
    }
    if !cmp.Equal(USTeaspoons.ToUSPints(10.7), 0.1114583, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.1114583, USTeaspoons.ToUSPints(10.7));
    }
}

func TestConvertKnownUSTeaspoonsToUSGallons(t * testing.T) {
    if !cmp.Equal(USTeaspoons.ToUSGallons(109.0), 0.141927, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.141927, USTeaspoons.ToUSGallons(109.0));
    }
    if !cmp.Equal(USTeaspoons.ToUSGallons(9876.0), 12.85937, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12.85937, USTeaspoons.ToUSGallons(9876.0));
    }
    if !cmp.Equal(USTeaspoons.ToUSGallons(10900.0), 14.192704, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 14.192704, USTeaspoons.ToUSGallons(10900.0));
    }
}

func TestConvertKnownUSTeaspoonsToUSFluidOunces(t * testing.T) {
    if !cmp.Equal(USTeaspoons.ToUSFluidOunces(180.0), 30.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 30.0, USTeaspoons.ToUSFluidOunces(180.0));
    }
    if !cmp.Equal(USTeaspoons.ToUSFluidOunces(5.6), 0.933333, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.933333, USTeaspoons.ToUSFluidOunces(5.6));
    }
    if !cmp.Equal(USTeaspoons.ToUSFluidOunces(900.5), 150.08328, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 150.08328, USTeaspoons.ToUSFluidOunces(900.5));
    }
}

func TestConvertKnownUSTeaspoonsToUSCups(t * testing.T) {
    if !cmp.Equal(USTeaspoons.ToUSCups(90.0), 1.875, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.875, USTeaspoons.ToUSCups(90.0));
    }
    if !cmp.Equal(USTeaspoons.ToUSCups(4500.8), 93.7666363, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 93.7666363, USTeaspoons.ToUSCups(4500.8));
    }
    if !cmp.Equal(USTeaspoons.ToUSCups(0.9), 0.01875, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.01875, USTeaspoons.ToUSCups(0.9));
    }
}

func TestConvertKnownUSTeaspoonsToCubicMetres(t * testing.T) {
    if !cmp.Equal(USTeaspoons.ToCubicMetres(405768.0), 2.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.0, USTeaspoons.ToCubicMetres(405768.0));
    }
    if !cmp.Equal(USTeaspoons.ToCubicMetres(80808.0), 0.39829617, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.39829617, USTeaspoons.ToCubicMetres(80808.0));
    }
    if !cmp.Equal(USTeaspoons.ToCubicMetres(123456.0), 0.608504748, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.608504748, USTeaspoons.ToCubicMetres(123456.0));
    }
}

func TestConvertKnownUSTeaspoonsToCubicFeet(t * testing.T) {
    if !cmp.Equal(USTeaspoons.ToCubicFeet(2000.0), 0.3481263, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.3481263, USTeaspoons.ToCubicFeet(2000.0));
    }
    if !cmp.Equal(USTeaspoons.ToCubicFeet(6894.05), 1.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.2, USTeaspoons.ToCubicFeet(6894.05));
    }
    if !cmp.Equal(USTeaspoons.ToCubicFeet(12345.0), 2.1488098, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.1488098, USTeaspoons.ToCubicFeet(12345.0));
    }
}

func TestConvertKnownUSTeaspoonsToCubicInches(t * testing.T) {
    if !cmp.Equal(USTeaspoons.ToCubicInches(23.2727), 7.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.0, USTeaspoons.ToCubicInches(23.2727));
    }
    if !cmp.Equal(USTeaspoons.ToCubicInches(219.429), 66.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 66.0, USTeaspoons.ToCubicInches(219.429));
    }
    if !cmp.Equal(USTeaspoons.ToCubicInches(39.8961), 12.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12.0, USTeaspoons.ToCubicInches(39.8961));
    }
}

func TestConvertKnownUSTeaspoonsToOilBarrels(t * testing.T) {
    if !cmp.Equal(USTeaspoons.ToOilBarrels(103219.0), 3.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.2, USTeaspoons.ToOilBarrels(103219.0));
    }
    if !cmp.Equal(USTeaspoons.ToOilBarrels(6666.0), 0.2066592, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.2066592, USTeaspoons.ToOilBarrels(6666.0));
    }
    if !cmp.Equal(USTeaspoons.ToOilBarrels(64512.0), 2.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.0, USTeaspoons.ToOilBarrels(64512.0));
    }
}

