// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

package mass

import (
	"testing"
	"math"
	"github.com/google/go-cmp/cmp"
)

func withinTolerance() cmp.Option {
	return cmp.Comparer(func(x, y float64) bool {
		delta := math.Abs(x - y)
		mean := math.Abs(x + y) / 2.0
		return delta / mean < 0.01
	})
}
func TestConvertKnownCaratsToMilligrams(t * testing.T) {
    if !cmp.Equal(Carats.ToMilligrams(2.1), 420.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 420.0, Carats.ToMilligrams(2.1));
    }
    if !cmp.Equal(Carats.ToMilligrams(123.0), 24600.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 24600.0, Carats.ToMilligrams(123.0));
    }
    if !cmp.Equal(Carats.ToMilligrams(0.8), 160.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 160.0, Carats.ToMilligrams(0.8));
    }
}

func TestConvertKnownCaratsToGrams(t * testing.T) {
    if !cmp.Equal(Carats.ToGrams(0.8), 0.16, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.16, Carats.ToGrams(0.8));
    }
    if !cmp.Equal(Carats.ToGrams(1.5), 0.3, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.3, Carats.ToGrams(1.5));
    }
    if !cmp.Equal(Carats.ToGrams(12.0), 2.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.4, Carats.ToGrams(12.0));
    }
}

func TestConvertKnownCaratsToKilograms(t * testing.T) {
    if !cmp.Equal(Carats.ToKilograms(1009.0), 0.2018, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.2018, Carats.ToKilograms(1009.0));
    }
    if !cmp.Equal(Carats.ToKilograms(999.0), 0.1998, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.1998, Carats.ToKilograms(999.0));
    }
    if !cmp.Equal(Carats.ToKilograms(1234.5), 0.2469, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.2469, Carats.ToKilograms(1234.5));
    }
}

func TestConvertKnownCaratsToTonnes(t * testing.T) {
    if !cmp.Equal(Carats.ToTonnes(1234567.0), 0.2469134, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.2469134, Carats.ToTonnes(1234567.0));
    }
    if !cmp.Equal(Carats.ToTonnes(9999999.0), 1.9999998, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.9999998, Carats.ToTonnes(9999999.0));
    }
    if !cmp.Equal(Carats.ToTonnes(998877.99), 0.199775598, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.199775598, Carats.ToTonnes(998877.99));
    }
}

func TestConvertKnownCaratsToOunces(t * testing.T) {
    if !cmp.Equal(Carats.ToOunces(900.0), 6.34931, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.34931, Carats.ToOunces(900.0));
    }
    if !cmp.Equal(Carats.ToOunces(123.45), 0.870914121, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.870914121, Carats.ToOunces(123.45));
    }
    if !cmp.Equal(Carats.ToOunces(800.0), 5.64383, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.64383, Carats.ToOunces(800.0));
    }
}

func TestConvertKnownCaratsToPounds(t * testing.T) {
    if !cmp.Equal(Carats.ToPounds(1000.0), 0.440925, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.440925, Carats.ToPounds(1000.0));
    }
    if !cmp.Equal(Carats.ToPounds(123456.0), 54.4347781, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 54.4347781, Carats.ToPounds(123456.0));
    }
    if !cmp.Equal(Carats.ToPounds(800.0), 0.35274, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.35274, Carats.ToPounds(800.0));
    }
}

func TestConvertKnownCaratsToStones(t * testing.T) {
    if !cmp.Equal(Carats.ToStones(9000.0), 0.2834515, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.2834515, Carats.ToStones(9000.0));
    }
    if !cmp.Equal(Carats.ToStones(123456.0), 3.88819843, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.88819843, Carats.ToStones(123456.0));
    }
    if !cmp.Equal(Carats.ToStones(80000.8), 2.519593906, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.519593906, Carats.ToStones(80000.8));
    }
}

func TestConvertKnownGramsToMilligrams(t * testing.T) {
    if !cmp.Equal(Grams.ToMilligrams(1.2), 1200.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1200.0, Grams.ToMilligrams(1.2));
    }
    if !cmp.Equal(Grams.ToMilligrams(0.9), 900.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 900.0, Grams.ToMilligrams(0.9));
    }
    if !cmp.Equal(Grams.ToMilligrams(2.0), 2000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2000.0, Grams.ToMilligrams(2.0));
    }
}

func TestConvertKnownGramsToKilograms(t * testing.T) {
    if !cmp.Equal(Grams.ToKilograms(900.0), 0.9, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.9, Grams.ToKilograms(900.0));
    }
    if !cmp.Equal(Grams.ToKilograms(12345.0), 12.345, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12.345, Grams.ToKilograms(12345.0));
    }
    if !cmp.Equal(Grams.ToKilograms(670.0), 0.67, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.67, Grams.ToKilograms(670.0));
    }
}

func TestConvertKnownGramsToTonnes(t * testing.T) {
    if !cmp.Equal(Grams.ToTonnes(6700000.0), 6.7, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.7, Grams.ToTonnes(6700000.0));
    }
    if !cmp.Equal(Grams.ToTonnes(123456.0), 0.123456, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.123456, Grams.ToTonnes(123456.0));
    }
    if !cmp.Equal(Grams.ToTonnes(9809789.0), 9.809789, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.809789, Grams.ToTonnes(9809789.0));
    }
}

func TestConvertKnownGramsToOunces(t * testing.T) {
    if !cmp.Equal(Grams.ToOunces(4.3), 0.151678, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.151678, Grams.ToOunces(4.3));
    }
    if !cmp.Equal(Grams.ToOunces(170.0), 5.99657, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.99657, Grams.ToOunces(170.0));
    }
    if !cmp.Equal(Grams.ToOunces(9.0), 0.317466, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.317466, Grams.ToOunces(9.0));
    }
}

func TestConvertKnownGramsToPounds(t * testing.T) {
    if !cmp.Equal(Grams.ToPounds(80.0), 0.17637, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.17637, Grams.ToPounds(80.0));
    }
    if !cmp.Equal(Grams.ToPounds(190.0), 0.418878, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.418878, Grams.ToPounds(190.0));
    }
    if !cmp.Equal(Grams.ToPounds(4500.0), 9.920802, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.920802, Grams.ToPounds(4500.0));
    }
}

func TestConvertKnownGramsToStones(t * testing.T) {
    if !cmp.Equal(Grams.ToStones(8000.0), 1.259784, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.259784, Grams.ToStones(8000.0));
    }
    if !cmp.Equal(Grams.ToStones(12345.0), 1.9440047, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.9440047, Grams.ToStones(12345.0));
    }
    if !cmp.Equal(Grams.ToStones(900.0), 0.141726, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.141726, Grams.ToStones(900.0));
    }
}

func TestConvertKnownGramsToCarats(t * testing.T) {
    if !cmp.Equal(Grams.ToCarats(123.0), 615.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 615.0, Grams.ToCarats(123.0));
    }
    if !cmp.Equal(Grams.ToCarats(90.1), 450.5, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 450.5, Grams.ToCarats(90.1));
    }
    if !cmp.Equal(Grams.ToCarats(5000.0), 25000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 25000.0, Grams.ToCarats(5000.0));
    }
}

func TestConvertKnownKilogramsToMilligrams(t * testing.T) {
    if !cmp.Equal(Kilograms.ToMilligrams(0.9), 900000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 900000.0, Kilograms.ToMilligrams(0.9));
    }
    if !cmp.Equal(Kilograms.ToMilligrams(0.56), 560000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 560000.0, Kilograms.ToMilligrams(0.56));
    }
    if !cmp.Equal(Kilograms.ToMilligrams(0.007), 7000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7000.0, Kilograms.ToMilligrams(0.007));
    }
}

func TestConvertKnownKilogramsToGrams(t * testing.T) {
    if !cmp.Equal(Kilograms.ToGrams(0.8), 800.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 800.0, Kilograms.ToGrams(0.8));
    }
    if !cmp.Equal(Kilograms.ToGrams(12.0), 12000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12000.0, Kilograms.ToGrams(12.0));
    }
    if !cmp.Equal(Kilograms.ToGrams(0.2), 200.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 200.0, Kilograms.ToGrams(0.2));
    }
}

func TestConvertKnownKilogramsToTonnes(t * testing.T) {
    if !cmp.Equal(Kilograms.ToTonnes(123.0), 0.123, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.123, Kilograms.ToTonnes(123.0));
    }
    if !cmp.Equal(Kilograms.ToTonnes(9000.0), 9.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.0, Kilograms.ToTonnes(9000.0));
    }
    if !cmp.Equal(Kilograms.ToTonnes(2300.0), 2.3, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.3, Kilograms.ToTonnes(2300.0));
    }
}

func TestConvertKnownKilogramsToOunces(t * testing.T) {
    if !cmp.Equal(Kilograms.ToOunces(2300.0), 81130.19, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 81130.19, Kilograms.ToOunces(2300.0));
    }
    if !cmp.Equal(Kilograms.ToOunces(12.0), 423.288, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 423.288, Kilograms.ToOunces(12.0));
    }
    if !cmp.Equal(Kilograms.ToOunces(3.4), 119.931, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 119.931, Kilograms.ToOunces(3.4));
    }
}

func TestConvertKnownKilogramsToPounds(t * testing.T) {
    if !cmp.Equal(Kilograms.ToPounds(3.4), 7.49572, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.49572, Kilograms.ToPounds(3.4));
    }
    if !cmp.Equal(Kilograms.ToPounds(0.9), 1.98416, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.98416, Kilograms.ToPounds(0.9));
    }
    if !cmp.Equal(Kilograms.ToPounds(3.0), 6.61387, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.61387, Kilograms.ToPounds(3.0));
    }
}

func TestConvertKnownKilogramsToStones(t * testing.T) {
    if !cmp.Equal(Kilograms.ToStones(3.0), 0.472419, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.472419, Kilograms.ToStones(3.0));
    }
    if !cmp.Equal(Kilograms.ToStones(98.0), 15.4324, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 15.4324, Kilograms.ToStones(98.0));
    }
    if !cmp.Equal(Kilograms.ToStones(1.2), 0.188968, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.188968, Kilograms.ToStones(1.2));
    }
}

func TestConvertKnownKilogramsToCarats(t * testing.T) {
    if !cmp.Equal(Kilograms.ToCarats(0.1), 500.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 500.0, Kilograms.ToCarats(0.1));
    }
    if !cmp.Equal(Kilograms.ToCarats(0.08), 400.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 400.0, Kilograms.ToCarats(0.08));
    }
    if !cmp.Equal(Kilograms.ToCarats(2.0), 10000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 10000.0, Kilograms.ToCarats(2.0));
    }
}

func TestConvertKnownMilligramsToGrams(t * testing.T) {
    if !cmp.Equal(Milligrams.ToGrams(190.0), 0.19, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.19, Milligrams.ToGrams(190.0));
    }
    if !cmp.Equal(Milligrams.ToGrams(2300.0), 2.3, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.3, Milligrams.ToGrams(2300.0));
    }
    if !cmp.Equal(Milligrams.ToGrams(19000.0), 19.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 19.0, Milligrams.ToGrams(19000.0));
    }
}

func TestConvertKnownMilligramsToKilograms(t * testing.T) {
    if !cmp.Equal(Milligrams.ToKilograms(1234567.0), 1.234567, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.234567, Milligrams.ToKilograms(1234567.0));
    }
    if !cmp.Equal(Milligrams.ToKilograms(900800.0), 0.9008, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.9008, Milligrams.ToKilograms(900800.0));
    }
    if !cmp.Equal(Milligrams.ToKilograms(7800000.0), 7.8, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.8, Milligrams.ToKilograms(7800000.0));
    }
}

func TestConvertKnownMilligramsToTonnes(t * testing.T) {
    if !cmp.Equal(Milligrams.ToTonnes(900000000.0), 0.9, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.9, Milligrams.ToTonnes(900000000.0));
    }
    if !cmp.Equal(Milligrams.ToTonnes(60000000.0), 0.06, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.06, Milligrams.ToTonnes(60000000.0));
    }
    if !cmp.Equal(Milligrams.ToTonnes(123456789.0), 0.123456789, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.123456789, Milligrams.ToTonnes(123456789.0));
    }
}

func TestConvertKnownMilligramsToOunces(t * testing.T) {
    if !cmp.Equal(Milligrams.ToOunces(6000.0), 0.2116438, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.2116438, Milligrams.ToOunces(6000.0));
    }
    if !cmp.Equal(Milligrams.ToOunces(123456.0), 4.35478225, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.35478225, Milligrams.ToOunces(123456.0));
    }
    if !cmp.Equal(Milligrams.ToOunces(8001.0), 0.282227, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.282227, Milligrams.ToOunces(8001.0));
    }
}

func TestConvertKnownMilligramsToPounds(t * testing.T) {
    if !cmp.Equal(Milligrams.ToPounds(123456.0), 0.27217389, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.27217389, Milligrams.ToPounds(123456.0));
    }
    if !cmp.Equal(Milligrams.ToPounds(800900.0), 1.76568226, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.76568226, Milligrams.ToPounds(800900.0));
    }
    if !cmp.Equal(Milligrams.ToPounds(666666.0), 1.46974694, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.46974694, Milligrams.ToPounds(666666.0));
    }
}

func TestConvertKnownMilligramsToStones(t * testing.T) {
    if !cmp.Equal(Milligrams.ToStones(900000.0), 0.14172574, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.14172574, Milligrams.ToStones(900000.0));
    }
    if !cmp.Equal(Milligrams.ToStones(12345678.0), 1.9441115001, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.9441115001, Milligrams.ToStones(12345678.0));
    }
    if !cmp.Equal(Milligrams.ToStones(800100.0), 0.125994183, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.125994183, Milligrams.ToStones(800100.0));
    }
}

func TestConvertKnownMilligramsToCarats(t * testing.T) {
    if !cmp.Equal(Milligrams.ToCarats(600.0), 3.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.0, Milligrams.ToCarats(600.0));
    }
    if !cmp.Equal(Milligrams.ToCarats(1234.0), 6.17, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.17, Milligrams.ToCarats(1234.0));
    }
    if !cmp.Equal(Milligrams.ToCarats(9090.0), 45.45, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 45.45, Milligrams.ToCarats(9090.0));
    }
}

func TestConvertKnownOuncesToMilligrams(t * testing.T) {
    if !cmp.Equal(Ounces.ToMilligrams(0.2), 5669.9, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5669.9, Ounces.ToMilligrams(0.2));
    }
    if !cmp.Equal(Ounces.ToMilligrams(12.0), 340194.2772, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 340194.2772, Ounces.ToMilligrams(12.0));
    }
    if !cmp.Equal(Ounces.ToMilligrams(1.8), 51029.141579, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 51029.141579, Ounces.ToMilligrams(1.8));
    }
}

func TestConvertKnownOuncesToGrams(t * testing.T) {
    if !cmp.Equal(Ounces.ToGrams(2.0), 56.699, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 56.699, Ounces.ToGrams(2.0));
    }
    if !cmp.Equal(Ounces.ToGrams(0.3), 8.50486, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8.50486, Ounces.ToGrams(0.3));
    }
    if !cmp.Equal(Ounces.ToGrams(7.0), 198.447, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 198.447, Ounces.ToGrams(7.0));
    }
}

func TestConvertKnownOuncesToKilograms(t * testing.T) {
    if !cmp.Equal(Ounces.ToKilograms(56.0), 1.58757, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.58757, Ounces.ToKilograms(56.0));
    }
    if !cmp.Equal(Ounces.ToKilograms(123.0), 3.48699, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.48699, Ounces.ToKilograms(123.0));
    }
    if !cmp.Equal(Ounces.ToKilograms(100.9), 2.8604669, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.8604669, Ounces.ToKilograms(100.9));
    }
}

func TestConvertKnownOuncesToTonnes(t * testing.T) {
    if !cmp.Equal(Ounces.ToTonnes(8000.0), 0.2267962, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.2267962, Ounces.ToTonnes(8000.0));
    }
    if !cmp.Equal(Ounces.ToTonnes(1234567.0), 34.99938572, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 34.99938572, Ounces.ToTonnes(1234567.0));
    }
    if !cmp.Equal(Ounces.ToTonnes(900800.0), 25.5372504, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 25.5372504, Ounces.ToTonnes(900800.0));
    }
}

func TestConvertKnownOuncesToPounds(t * testing.T) {
    if !cmp.Equal(Ounces.ToPounds(90.0), 5.625, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.625, Ounces.ToPounds(90.0));
    }
    if !cmp.Equal(Ounces.ToPounds(5.2), 0.325, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.325, Ounces.ToPounds(5.2));
    }
    if !cmp.Equal(Ounces.ToPounds(12.0), 0.75, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.75, Ounces.ToPounds(12.0));
    }
}

func TestConvertKnownOuncesToStones(t * testing.T) {
    if !cmp.Equal(Ounces.ToStones(167.0), 0.745536, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.745536, Ounces.ToStones(167.0));
    }
    if !cmp.Equal(Ounces.ToStones(800.7), 3.5745536, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.5745536, Ounces.ToStones(800.7));
    }
    if !cmp.Equal(Ounces.ToStones(1234.5), 5.51116071, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.51116071, Ounces.ToStones(1234.5));
    }
}

func TestConvertKnownOuncesToCarats(t * testing.T) {
    if !cmp.Equal(Ounces.ToCarats(0.0012), 0.170097139, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.170097139, Ounces.ToCarats(0.0012));
    }
    if !cmp.Equal(Ounces.ToCarats(4.0), 566.99, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 566.99, Ounces.ToCarats(4.0));
    }
    if !cmp.Equal(Ounces.ToCarats(1.4), 198.447, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 198.447, Ounces.ToCarats(1.4));
    }
}

func TestConvertKnownPoundsToMilligrams(t * testing.T) {
    if !cmp.Equal(Pounds.ToMilligrams(2.2), 997903.214, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 997903.214, Pounds.ToMilligrams(2.2));
    }
    if !cmp.Equal(Pounds.ToMilligrams(0.7), 317514.6589, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 317514.6589, Pounds.ToMilligrams(0.7));
    }
    if !cmp.Equal(Pounds.ToMilligrams(0.32), 145149.5584, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 145149.5584, Pounds.ToMilligrams(0.32));
    }
}

func TestConvertKnownPoundsToGrams(t * testing.T) {
    if !cmp.Equal(Pounds.ToGrams(0.3), 136.078, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 136.078, Pounds.ToGrams(0.3));
    }
    if !cmp.Equal(Pounds.ToGrams(1.2), 544.311, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 544.311, Pounds.ToGrams(1.2));
    }
    if !cmp.Equal(Pounds.ToGrams(9.0), 4082.33, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4082.33, Pounds.ToGrams(9.0));
    }
}

func TestConvertKnownPoundsToKilograms(t * testing.T) {
    if !cmp.Equal(Pounds.ToKilograms(5.0), 2.26796, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.26796, Pounds.ToKilograms(5.0));
    }
    if !cmp.Equal(Pounds.ToKilograms(1.1), 0.498952, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.498952, Pounds.ToKilograms(1.1));
    }
    if !cmp.Equal(Pounds.ToKilograms(0.7), 0.317515, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.317515, Pounds.ToKilograms(0.7));
    }
}

func TestConvertKnownPoundsToTonnes(t * testing.T) {
    if !cmp.Equal(Pounds.ToTonnes(1233.0), 0.5592794, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.5592794, Pounds.ToTonnes(1233.0));
    }
    if !cmp.Equal(Pounds.ToTonnes(656565.0), 297.812874, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 297.812874, Pounds.ToTonnes(656565.0));
    }
    if !cmp.Equal(Pounds.ToTonnes(900.0), 0.408233, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.408233, Pounds.ToTonnes(900.0));
    }
}

func TestConvertKnownPoundsToOunces(t * testing.T) {
    if !cmp.Equal(Pounds.ToOunces(45.0), 720.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 720.0, Pounds.ToOunces(45.0));
    }
    if !cmp.Equal(Pounds.ToOunces(6.7), 107.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 107.2, Pounds.ToOunces(6.7));
    }
    if !cmp.Equal(Pounds.ToOunces(89.1), 1425.6, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1425.6, Pounds.ToOunces(89.1));
    }
}

func TestConvertKnownPoundsToStones(t * testing.T) {
    if !cmp.Equal(Pounds.ToStones(89.1), 6.364286, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.364286, Pounds.ToStones(89.1));
    }
    if !cmp.Equal(Pounds.ToStones(1.2), 0.0857143, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0857143, Pounds.ToStones(1.2));
    }
    if !cmp.Equal(Pounds.ToStones(789.0), 56.3571, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 56.3571, Pounds.ToStones(789.0));
    }
}

func TestConvertKnownPoundsToCarats(t * testing.T) {
    if !cmp.Equal(Pounds.ToCarats(80.0), 181436.7522, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 181436.7522, Pounds.ToCarats(80.0));
    }
    if !cmp.Equal(Pounds.ToCarats(2.34), 5307.031, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5307.031, Pounds.ToCarats(2.34));
    }
    if !cmp.Equal(Pounds.ToCarats(0.9), 2041.17, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2041.17, Pounds.ToCarats(0.9));
    }
}

func TestConvertKnownStonesToMilligrams(t * testing.T) {
    if !cmp.Equal(Stones.ToMilligrams(0.009), 57152.63861, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 57152.63861, Stones.ToMilligrams(0.009));
    }
    if !cmp.Equal(Stones.ToMilligrams(0.002), 12700.586, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12700.586, Stones.ToMilligrams(0.002));
    }
    if !cmp.Equal(Stones.ToMilligrams(0.0006), 3810.17591, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3810.17591, Stones.ToMilligrams(0.0006));
    }
}

func TestConvertKnownStonesToGrams(t * testing.T) {
    if !cmp.Equal(Stones.ToGrams(1.2), 7620.35, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7620.35, Stones.ToGrams(1.2));
    }
    if !cmp.Equal(Stones.ToGrams(8.0), 50802.34543, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 50802.34543, Stones.ToGrams(8.0));
    }
    if !cmp.Equal(Stones.ToGrams(90.0), 571526.38619, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 571526.38619, Stones.ToGrams(90.0));
    }
}

func TestConvertKnownStonesToKilograms(t * testing.T) {
    if !cmp.Equal(Stones.ToKilograms(90.0), 571.526, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 571.526, Stones.ToKilograms(90.0));
    }
    if !cmp.Equal(Stones.ToKilograms(3.4), 21.591, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 21.591, Stones.ToKilograms(3.4));
    }
    if !cmp.Equal(Stones.ToKilograms(66.0), 419.119, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 419.119, Stones.ToKilograms(66.0));
    }
}

func TestConvertKnownStonesToTonnes(t * testing.T) {
    if !cmp.Equal(Stones.ToTonnes(100.0), 0.635029, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.635029, Stones.ToTonnes(100.0));
    }
    if !cmp.Equal(Stones.ToTonnes(12345.0), 78.394369, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 78.394369, Stones.ToTonnes(12345.0));
    }
    if !cmp.Equal(Stones.ToTonnes(10099.0), 64.131611, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 64.131611, Stones.ToTonnes(10099.0));
    }
}

func TestConvertKnownStonesToOunces(t * testing.T) {
    if !cmp.Equal(Stones.ToOunces(34.0), 7616.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7616.0, Stones.ToOunces(34.0));
    }
    if !cmp.Equal(Stones.ToOunces(1.2), 268.8, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 268.8, Stones.ToOunces(1.2));
    }
    if !cmp.Equal(Stones.ToOunces(800.0), 179200.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 179200.0, Stones.ToOunces(800.0));
    }
}

func TestConvertKnownStonesToPounds(t * testing.T) {
    if !cmp.Equal(Stones.ToPounds(800.0), 11200.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 11200.0, Stones.ToPounds(800.0));
    }
    if !cmp.Equal(Stones.ToPounds(0.5), 7.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.0, Stones.ToPounds(0.5));
    }
    if !cmp.Equal(Stones.ToPounds(52.1), 729.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 729.4, Stones.ToPounds(52.1));
    }
}

func TestConvertKnownStonesToCarats(t * testing.T) {
    if !cmp.Equal(Stones.ToCarats(0.01), 317.5147, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 317.5147, Stones.ToCarats(0.01));
    }
    if !cmp.Equal(Stones.ToCarats(0.006), 190.5088, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 190.5088, Stones.ToCarats(0.006));
    }
    if !cmp.Equal(Stones.ToCarats(2.1), 66677.25, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 66677.25, Stones.ToCarats(2.1));
    }
}

func TestConvertKnownTonnesToMilligrams(t * testing.T) {
    if !cmp.Equal(Tonnes.ToMilligrams(0.009), 9000000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9000000.0, Tonnes.ToMilligrams(0.009));
    }
    if !cmp.Equal(Tonnes.ToMilligrams(0.00081), 810000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 810000.0, Tonnes.ToMilligrams(0.00081));
    }
    if !cmp.Equal(Tonnes.ToMilligrams(0.00123), 1230000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1230000.0, Tonnes.ToMilligrams(0.00123));
    }
}

func TestConvertKnownTonnesToGrams(t * testing.T) {
    if !cmp.Equal(Tonnes.ToGrams(0.00123), 1230.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1230.0, Tonnes.ToGrams(0.00123));
    }
    if !cmp.Equal(Tonnes.ToGrams(0.8), 800000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 800000.0, Tonnes.ToGrams(0.8));
    }
    if !cmp.Equal(Tonnes.ToGrams(0.03), 30000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 30000.0, Tonnes.ToGrams(0.03));
    }
}

func TestConvertKnownTonnesToKilograms(t * testing.T) {
    if !cmp.Equal(Tonnes.ToKilograms(0.03), 30.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 30.0, Tonnes.ToKilograms(0.03));
    }
    if !cmp.Equal(Tonnes.ToKilograms(4.0), 4000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4000.0, Tonnes.ToKilograms(4.0));
    }
    if !cmp.Equal(Tonnes.ToKilograms(1.2), 1200.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1200.0, Tonnes.ToKilograms(1.2));
    }
}

func TestConvertKnownTonnesToOunces(t * testing.T) {
    if !cmp.Equal(Tonnes.ToOunces(1.2), 42328.754376824065, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 42328.754376824065, Tonnes.ToOunces(1.2));
    }
    if !cmp.Equal(Tonnes.ToOunces(0.8), 28219.169584549378, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 28219.169584549378, Tonnes.ToOunces(0.8));
    }
    if !cmp.Equal(Tonnes.ToOunces(0.001), 35.273962, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 35.273962, Tonnes.ToOunces(0.001));
    }
}

func TestConvertKnownTonnesToPounds(t * testing.T) {
    if !cmp.Equal(Tonnes.ToPounds(1.2), 2645.55, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2645.55, Tonnes.ToPounds(1.2));
    }
    if !cmp.Equal(Tonnes.ToPounds(0.9), 1984.16, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1984.16, Tonnes.ToPounds(0.9));
    }
    if !cmp.Equal(Tonnes.ToPounds(34.0), 74957.08, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 74957.08, Tonnes.ToPounds(34.0));
    }
}

func TestConvertKnownTonnesToStones(t * testing.T) {
    if !cmp.Equal(Tonnes.ToStones(12.0), 1889.68, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1889.68, Tonnes.ToStones(12.0));
    }
    if !cmp.Equal(Tonnes.ToStones(8.4), 1322.77, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1322.77, Tonnes.ToStones(8.4));
    }
    if !cmp.Equal(Tonnes.ToStones(0.3), 47.2419, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 47.2419, Tonnes.ToStones(0.3));
    }
}

func TestConvertKnownTonnesToCarats(t * testing.T) {
    if !cmp.Equal(Tonnes.ToCarats(0.003), 15000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 15000.0, Tonnes.ToCarats(0.003));
    }
    if !cmp.Equal(Tonnes.ToCarats(0.09), 450000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 450000.0, Tonnes.ToCarats(0.09));
    }
    if !cmp.Equal(Tonnes.ToCarats(0.0012), 6000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6000.0, Tonnes.ToCarats(0.0012));
    }
}

