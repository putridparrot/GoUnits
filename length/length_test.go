// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

package length

import (
	"testing"
	"math"
	"github.com/google/go-cmp/cmp"
)

func withinTolerance() cmp.Option {
	return cmp.Comparer(func(x, y float64) bool {
		delta := math.Abs(x - y)
		mean := math.Abs(x + y) / 2.0
		return delta / mean < 0.01
	})
}
func TestConvertKnownCentimetresToMillimetres(t * testing.T) {
    if !cmp.Equal(Centimetres.ToMillimetres(900.0), 9000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9000.0, Centimetres.ToMillimetres(900.0));
    }
    if !cmp.Equal(Centimetres.ToMillimetres(34.9), 349.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 349.0, Centimetres.ToMillimetres(34.9));
    }
    if !cmp.Equal(Centimetres.ToMillimetres(2.0), 20.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 20.0, Centimetres.ToMillimetres(2.0));
    }
}

func TestConvertKnownCentimetresToMetres(t * testing.T) {
    if !cmp.Equal(Centimetres.ToMetres(13.0), 0.13, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.13, Centimetres.ToMetres(13.0));
    }
    if !cmp.Equal(Centimetres.ToMetres(3900.0), 39.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 39.0, Centimetres.ToMetres(3900.0));
    }
    if !cmp.Equal(Centimetres.ToMetres(1.0), 0.01, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.01, Centimetres.ToMetres(1.0));
    }
}

func TestConvertKnownCentimetresToKilometres(t * testing.T) {
    if !cmp.Equal(Centimetres.ToKilometres(123456.0), 1.23456, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.23456, Centimetres.ToKilometres(123456.0));
    }
    if !cmp.Equal(Centimetres.ToKilometres(8900.0), 0.089, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.089, Centimetres.ToKilometres(8900.0));
    }
    if !cmp.Equal(Centimetres.ToKilometres(6009000.0), 60.09, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 60.09, Centimetres.ToKilometres(6009000.0));
    }
}

func TestConvertKnownCentimetresToInches(t * testing.T) {
    if !cmp.Equal(Centimetres.ToInches(600.0), 236.22, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 236.22, Centimetres.ToInches(600.0));
    }
    if !cmp.Equal(Centimetres.ToInches(12.0), 4.72441, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.72441, Centimetres.ToInches(12.0));
    }
    if !cmp.Equal(Centimetres.ToInches(7.8), 3.07087, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.07087, Centimetres.ToInches(7.8));
    }
}

func TestConvertKnownCentimetresToFeet(t * testing.T) {
    if !cmp.Equal(Centimetres.ToFeet(12.3), 0.4035433, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.4035433, Centimetres.ToFeet(12.3));
    }
    if !cmp.Equal(Centimetres.ToFeet(89.0), 2.91995, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.91995, Centimetres.ToFeet(89.0));
    }
    if !cmp.Equal(Centimetres.ToFeet(0.7), 0.0229659, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0229659, Centimetres.ToFeet(0.7));
    }
}

func TestConvertKnownCentimetresToYards(t * testing.T) {
    if !cmp.Equal(Centimetres.ToYards(700.0), 7.65529, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.65529, Centimetres.ToYards(700.0));
    }
    if !cmp.Equal(Centimetres.ToYards(56.3), 0.6157043, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.6157043, Centimetres.ToYards(56.3));
    }
    if !cmp.Equal(Centimetres.ToYards(8.0), 0.0874891, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0874891, Centimetres.ToYards(8.0));
    }
}

func TestConvertKnownCentimetresToMiles(t * testing.T) {
    if !cmp.Equal(Centimetres.ToMiles(80000.0), 0.49709695, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.49709695, Centimetres.ToMiles(80000.0));
    }
    if !cmp.Equal(Centimetres.ToMiles(123456.0), 0.767120019, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.767120019, Centimetres.ToMiles(123456.0));
    }
    if !cmp.Equal(Centimetres.ToMiles(90909090.0), 564.88289639, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 564.88289639, Centimetres.ToMiles(90909090.0));
    }
}

func TestConvertKnownCentimetresToNauticalMiles(t * testing.T) {
    if !cmp.Equal(Centimetres.ToNauticalMiles(30000.0), 0.16198704, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.16198704, Centimetres.ToNauticalMiles(30000.0));
    }
    if !cmp.Equal(Centimetres.ToNauticalMiles(987654.0), 5.33290497, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.33290497, Centimetres.ToNauticalMiles(987654.0));
    }
    if !cmp.Equal(Centimetres.ToNauticalMiles(100200.0), 0.541036717, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.541036717, Centimetres.ToNauticalMiles(100200.0));
    }
}

func TestConvertKnownFeetToMillimetres(t * testing.T) {
    if !cmp.Equal(Feet.ToMillimetres(0.3), 91.44, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 91.44, Feet.ToMillimetres(0.3));
    }
    if !cmp.Equal(Feet.ToMillimetres(2.0), 609.6, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 609.6, Feet.ToMillimetres(2.0));
    }
    if !cmp.Equal(Feet.ToMillimetres(0.06), 18.288, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 18.288, Feet.ToMillimetres(0.06));
    }
}

func TestConvertKnownFeetToCentimetres(t * testing.T) {
    if !cmp.Equal(Feet.ToCentimetres(0.07), 2.1336, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.1336, Feet.ToCentimetres(0.07));
    }
    if !cmp.Equal(Feet.ToCentimetres(3.5), 106.68, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 106.68, Feet.ToCentimetres(3.5));
    }
    if !cmp.Equal(Feet.ToCentimetres(89.0), 2712.72, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2712.72, Feet.ToCentimetres(89.0));
    }
}

func TestConvertKnownFeetToMetres(t * testing.T) {
    if !cmp.Equal(Feet.ToMetres(900.0), 274.32, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 274.32, Feet.ToMetres(900.0));
    }
    if !cmp.Equal(Feet.ToMetres(1.2), 0.36576, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.36576, Feet.ToMetres(1.2));
    }
    if !cmp.Equal(Feet.ToMetres(0.8), 0.24384, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.24384, Feet.ToMetres(0.8));
    }
}

func TestConvertKnownFeetToKilometres(t * testing.T) {
    if !cmp.Equal(Feet.ToKilometres(1999.0), 0.6092952, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.6092952, Feet.ToKilometres(1999.0));
    }
    if !cmp.Equal(Feet.ToKilometres(123456.0), 37.6293888, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 37.6293888, Feet.ToKilometres(123456.0));
    }
    if !cmp.Equal(Feet.ToKilometres(800.0), 0.24384, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.24384, Feet.ToKilometres(800.0));
    }
}

func TestConvertKnownFeetToInches(t * testing.T) {
    if !cmp.Equal(Feet.ToInches(8.0), 96.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 96.0, Feet.ToInches(8.0));
    }
    if !cmp.Equal(Feet.ToInches(1.2), 14.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 14.4, Feet.ToInches(1.2));
    }
    if !cmp.Equal(Feet.ToInches(0.4), 4.8, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.8, Feet.ToInches(0.4));
    }
}

func TestConvertKnownFeetToYards(t * testing.T) {
    if !cmp.Equal(Feet.ToYards(78.0), 26.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 26.0, Feet.ToYards(78.0));
    }
    if !cmp.Equal(Feet.ToYards(0.1), 0.0333333, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0333333, Feet.ToYards(0.1));
    }
    if !cmp.Equal(Feet.ToYards(7162.0), 2387.333, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2387.333, Feet.ToYards(7162.0));
    }
}

func TestConvertKnownFeetToMiles(t * testing.T) {
    if !cmp.Equal(Feet.ToMiles(9000.0), 1.704545, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.704545, Feet.ToMiles(9000.0));
    }
    if !cmp.Equal(Feet.ToMiles(1999.0), 0.3785985, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.3785985, Feet.ToMiles(1999.0));
    }
    if !cmp.Equal(Feet.ToMiles(5020.0), 0.9507576, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.9507576, Feet.ToMiles(5020.0));
    }
}

func TestConvertKnownFeetToNauticalMiles(t * testing.T) {
    if !cmp.Equal(Feet.ToNauticalMiles(8765.0), 1.442533, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.442533, Feet.ToNauticalMiles(8765.0));
    }
    if !cmp.Equal(Feet.ToNauticalMiles(19000.0), 3.1269978, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.1269978, Feet.ToNauticalMiles(19000.0));
    }
    if !cmp.Equal(Feet.ToNauticalMiles(1000.0), 0.164579, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.164579, Feet.ToNauticalMiles(1000.0));
    }
}

func TestConvertKnownInchesToMillimetres(t * testing.T) {
    if !cmp.Equal(Inches.ToMillimetres(1.0), 25.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 25.4, Inches.ToMillimetres(1.0));
    }
    if !cmp.Equal(Inches.ToMillimetres(0.6), 15.24, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 15.24, Inches.ToMillimetres(0.6));
    }
    if !cmp.Equal(Inches.ToMillimetres(456.0), 11582.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 11582.4, Inches.ToMillimetres(456.0));
    }
}

func TestConvertKnownInchesToCentimetres(t * testing.T) {
    if !cmp.Equal(Inches.ToCentimetres(123.0), 312.42, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 312.42, Inches.ToCentimetres(123.0));
    }
    if !cmp.Equal(Inches.ToCentimetres(0.9), 2.286, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.286, Inches.ToCentimetres(0.9));
    }
    if !cmp.Equal(Inches.ToCentimetres(3.4), 8.636, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8.636, Inches.ToCentimetres(3.4));
    }
}

func TestConvertKnownInchesToMetres(t * testing.T) {
    if !cmp.Equal(Inches.ToMetres(3.4), 0.08636, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.08636, Inches.ToMetres(3.4));
    }
    if !cmp.Equal(Inches.ToMetres(1002.0), 25.4508, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 25.4508, Inches.ToMetres(1002.0));
    }
    if !cmp.Equal(Inches.ToMetres(56.0), 1.4224, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.4224, Inches.ToMetres(56.0));
    }
}

func TestConvertKnownInchesToKilometres(t * testing.T) {
    if !cmp.Equal(Inches.ToKilometres(17890.0), 0.454406, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.454406, Inches.ToKilometres(17890.0));
    }
    if !cmp.Equal(Inches.ToKilometres(999000.0), 25.3746, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 25.3746, Inches.ToKilometres(999000.0));
    }
    if !cmp.Equal(Inches.ToKilometres(100200.0), 2.54508, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.54508, Inches.ToKilometres(100200.0));
    }
}

func TestConvertKnownInchesToFeet(t * testing.T) {
    if !cmp.Equal(Inches.ToFeet(23.0), 1.91667, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.91667, Inches.ToFeet(23.0));
    }
    if !cmp.Equal(Inches.ToFeet(0.9), 0.075, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.075, Inches.ToFeet(0.9));
    }
    if !cmp.Equal(Inches.ToFeet(479.0), 39.9167, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 39.9167, Inches.ToFeet(479.0));
    }
}

func TestConvertKnownInchesToYards(t * testing.T) {
    if !cmp.Equal(Inches.ToYards(123.0), 3.41667, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.41667, Inches.ToYards(123.0));
    }
    if !cmp.Equal(Inches.ToYards(6.7), 0.186111, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.186111, Inches.ToYards(6.7));
    }
    if !cmp.Equal(Inches.ToYards(9.0), 0.25, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.25, Inches.ToYards(9.0));
    }
}

func TestConvertKnownInchesToMiles(t * testing.T) {
    if !cmp.Equal(Inches.ToMiles(9000.0), 0.1420455, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.1420455, Inches.ToMiles(9000.0));
    }
    if !cmp.Equal(Inches.ToMiles(123456.0), 1.94848485, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.94848485, Inches.ToMiles(123456.0));
    }
    if !cmp.Equal(Inches.ToMiles(8800.0), 0.1388889, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.1388889, Inches.ToMiles(8800.0));
    }
}

func TestConvertKnownInchesToNauticalMiles(t * testing.T) {
    if !cmp.Equal(Inches.ToNauticalMiles(9000.0), 0.1234341, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.1234341, Inches.ToNauticalMiles(9000.0));
    }
    if !cmp.Equal(Inches.ToNauticalMiles(123456.0), 1.69318704, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.69318704, Inches.ToNauticalMiles(123456.0));
    }
    if !cmp.Equal(Inches.ToNauticalMiles(100200.0), 1.37423326, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.37423326, Inches.ToNauticalMiles(100200.0));
    }
}

func TestConvertKnownKilometresToMillimetres(t * testing.T) {
    if !cmp.Equal(Kilometres.ToMillimetres(0.09), 90000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 90000.0, Kilometres.ToMillimetres(0.09));
    }
    if !cmp.Equal(Kilometres.ToMillimetres(0.12), 120000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 120000.0, Kilometres.ToMillimetres(0.12));
    }
    if !cmp.Equal(Kilometres.ToMillimetres(2.3), 2.3e+6, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.3e+6, Kilometres.ToMillimetres(2.3));
    }
}

func TestConvertKnownKilometresToCentimetres(t * testing.T) {
    if !cmp.Equal(Kilometres.ToCentimetres(7.9), 790000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 790000.0, Kilometres.ToCentimetres(7.9));
    }
    if !cmp.Equal(Kilometres.ToCentimetres(0.2), 20000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 20000.0, Kilometres.ToCentimetres(0.2));
    }
    if !cmp.Equal(Kilometres.ToCentimetres(0.09), 9000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9000.0, Kilometres.ToCentimetres(0.09));
    }
}

func TestConvertKnownKilometresToMetres(t * testing.T) {
    if !cmp.Equal(Kilometres.ToMetres(0.8), 800.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 800.0, Kilometres.ToMetres(0.8));
    }
    if !cmp.Equal(Kilometres.ToMetres(45.0), 45000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 45000.0, Kilometres.ToMetres(45.0));
    }
    if !cmp.Equal(Kilometres.ToMetres(1.2), 1200.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1200.0, Kilometres.ToMetres(1.2));
    }
}

func TestConvertKnownKilometresToInches(t * testing.T) {
    if !cmp.Equal(Kilometres.ToInches(1.2), 47244.094488, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 47244.094488, Kilometres.ToInches(1.2));
    }
    if !cmp.Equal(Kilometres.ToInches(0.65), 25590.551181, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 25590.551181, Kilometres.ToInches(0.65));
    }
    if !cmp.Equal(Kilometres.ToInches(5.0), 196850.3937, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 196850.3937, Kilometres.ToInches(5.0));
    }
}

func TestConvertKnownKilometresToFeet(t * testing.T) {
    if !cmp.Equal(Kilometres.ToFeet(3.8), 12467.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12467.2, Kilometres.ToFeet(3.8));
    }
    if !cmp.Equal(Kilometres.ToFeet(1.2), 3937.01, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3937.01, Kilometres.ToFeet(1.2));
    }
    if !cmp.Equal(Kilometres.ToFeet(0.65), 2132.546, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2132.546, Kilometres.ToFeet(0.65));
    }
}

func TestConvertKnownKilometresToYards(t * testing.T) {
    if !cmp.Equal(Kilometres.ToYards(0.08), 87.48906, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 87.48906, Kilometres.ToYards(0.08));
    }
    if !cmp.Equal(Kilometres.ToYards(1.2), 1312.34, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1312.34, Kilometres.ToYards(1.2));
    }
    if !cmp.Equal(Kilometres.ToYards(34.0), 37182.852143, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 37182.852143, Kilometres.ToYards(34.0));
    }
}

func TestConvertKnownKilometresToMiles(t * testing.T) {
    if !cmp.Equal(Kilometres.ToMiles(12.0), 7.45645, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.45645, Kilometres.ToMiles(12.0));
    }
    if !cmp.Equal(Kilometres.ToMiles(0.9), 0.559234, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.559234, Kilometres.ToMiles(0.9));
    }
    if !cmp.Equal(Kilometres.ToMiles(3.9), 2.42335, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.42335, Kilometres.ToMiles(3.9));
    }
}

func TestConvertKnownKilometresToNauticalMiles(t * testing.T) {
    if !cmp.Equal(Kilometres.ToNauticalMiles(1.2), 0.647948, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.647948, Kilometres.ToNauticalMiles(1.2));
    }
    if !cmp.Equal(Kilometres.ToNauticalMiles(0.2), 0.107991, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.107991, Kilometres.ToNauticalMiles(0.2));
    }
    if !cmp.Equal(Kilometres.ToNauticalMiles(99.9), 53.94168, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 53.94168, Kilometres.ToNauticalMiles(99.9));
    }
}

func TestConvertKnownMetresToMillimetres(t * testing.T) {
    if !cmp.Equal(Metres.ToMillimetres(123.0), 123000.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 123000.0, Metres.ToMillimetres(123.0));
    }
    if !cmp.Equal(Metres.ToMillimetres(0.9), 900.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 900.0, Metres.ToMillimetres(0.9));
    }
    if !cmp.Equal(Metres.ToMillimetres(0.0023), 2.3, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.3, Metres.ToMillimetres(0.0023));
    }
}

func TestConvertKnownMetresToCentimetres(t * testing.T) {
    if !cmp.Equal(Metres.ToCentimetres(2.3), 230.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 230.0, Metres.ToCentimetres(2.3));
    }
    if !cmp.Equal(Metres.ToCentimetres(34.0), 3400.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3400.0, Metres.ToCentimetres(34.0));
    }
    if !cmp.Equal(Metres.ToCentimetres(0.9), 90.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 90.0, Metres.ToCentimetres(0.9));
    }
}

func TestConvertKnownMetresToKilometres(t * testing.T) {
    if !cmp.Equal(Metres.ToKilometres(100.0), 0.1, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.1, Metres.ToKilometres(100.0));
    }
    if !cmp.Equal(Metres.ToKilometres(123456.0), 123.456, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 123.456, Metres.ToKilometres(123456.0));
    }
    if !cmp.Equal(Metres.ToKilometres(91.1), 0.0911, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.0911, Metres.ToKilometres(91.1));
    }
}

func TestConvertKnownMetresToInches(t * testing.T) {
    if !cmp.Equal(Metres.ToInches(12.0), 472.441, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 472.441, Metres.ToInches(12.0));
    }
    if !cmp.Equal(Metres.ToInches(9.3), 366.142, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 366.142, Metres.ToInches(9.3));
    }
    if !cmp.Equal(Metres.ToInches(0.1), 3.93701, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.93701, Metres.ToInches(0.1));
    }
}

func TestConvertKnownMetresToFeet(t * testing.T) {
    if !cmp.Equal(Metres.ToFeet(67.0), 219.816, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 219.816, Metres.ToFeet(67.0));
    }
    if !cmp.Equal(Metres.ToFeet(1.2), 3.93701, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.93701, Metres.ToFeet(1.2));
    }
    if !cmp.Equal(Metres.ToFeet(0.7), 2.29659, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.29659, Metres.ToFeet(0.7));
    }
}

func TestConvertKnownMetresToYards(t * testing.T) {
    if !cmp.Equal(Metres.ToYards(0.8), 0.874891, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.874891, Metres.ToYards(0.8));
    }
    if !cmp.Equal(Metres.ToYards(34.5), 37.72966, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 37.72966, Metres.ToYards(34.5));
    }
    if !cmp.Equal(Metres.ToYards(1.23), 1.345144, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.345144, Metres.ToYards(1.23));
    }
}

func TestConvertKnownMetresToMiles(t * testing.T) {
    if !cmp.Equal(Metres.ToMiles(7900.0), 4.908832, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.908832, Metres.ToMiles(7900.0));
    }
    if !cmp.Equal(Metres.ToMiles(123456.0), 76.7120019, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 76.7120019, Metres.ToMiles(123456.0));
    }
    if !cmp.Equal(Metres.ToMiles(1000.0), 0.621371, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.621371, Metres.ToMiles(1000.0));
    }
}

func TestConvertKnownMetresToNauticalMiles(t * testing.T) {
    if !cmp.Equal(Metres.ToNauticalMiles(900.0), 0.485961, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.485961, Metres.ToNauticalMiles(900.0));
    }
    if !cmp.Equal(Metres.ToNauticalMiles(71819.0), 38.779158, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 38.779158, Metres.ToNauticalMiles(71819.0));
    }
    if !cmp.Equal(Metres.ToNauticalMiles(123456.0), 66.6609071, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 66.6609071, Metres.ToNauticalMiles(123456.0));
    }
}

func TestConvertKnownMilesToMillimetres(t * testing.T) {
    if !cmp.Equal(Miles.ToMillimetres(0.09), 144840.95999, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 144840.95999, Miles.ToMillimetres(0.09));
    }
    if !cmp.Equal(Miles.ToMillimetres(0.001), 1609.344, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1609.344, Miles.ToMillimetres(0.001));
    }
    if !cmp.Equal(Miles.ToMillimetres(0.5), 804672.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 804672.0, Miles.ToMillimetres(0.5));
    }
}

func TestConvertKnownMilesToCentimetres(t * testing.T) {
    if !cmp.Equal(Miles.ToCentimetres(0.23), 37014.91, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 37014.91, Miles.ToCentimetres(0.23));
    }
    if !cmp.Equal(Miles.ToCentimetres(0.01), 1609.344, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1609.344, Miles.ToCentimetres(0.01));
    }
    if !cmp.Equal(Miles.ToCentimetres(0.8), 128747.52, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 128747.52, Miles.ToCentimetres(0.8));
    }
}

func TestConvertKnownMilesToMetres(t * testing.T) {
    if !cmp.Equal(Miles.ToMetres(0.1), 160.934, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 160.934, Miles.ToMetres(0.1));
    }
    if !cmp.Equal(Miles.ToMetres(0.08), 128.7475, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 128.7475, Miles.ToMetres(0.08));
    }
    if !cmp.Equal(Miles.ToMetres(0.002), 3.218688, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.218688, Miles.ToMetres(0.002));
    }
}

func TestConvertKnownMilesToKilometres(t * testing.T) {
    if !cmp.Equal(Miles.ToKilometres(2.0), 3.21869, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.21869, Miles.ToKilometres(2.0));
    }
    if !cmp.Equal(Miles.ToKilometres(0.8), 1.28748, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.28748, Miles.ToKilometres(0.8));
    }
    if !cmp.Equal(Miles.ToKilometres(23.0), 37.0149, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 37.0149, Miles.ToKilometres(23.0));
    }
}

func TestConvertKnownMilesToInches(t * testing.T) {
    if !cmp.Equal(Miles.ToInches(0.7), 44352.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 44352.0, Miles.ToInches(0.7));
    }
    if !cmp.Equal(Miles.ToInches(0.09), 5702.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5702.4, Miles.ToInches(0.09));
    }
    if !cmp.Equal(Miles.ToInches(2.0), 126720.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 126720.0, Miles.ToInches(2.0));
    }
}

func TestConvertKnownMilesToFeet(t * testing.T) {
    if !cmp.Equal(Miles.ToFeet(2.0), 10560.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 10560.0, Miles.ToFeet(2.0));
    }
    if !cmp.Equal(Miles.ToFeet(0.6), 3168.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3168.0, Miles.ToFeet(0.6));
    }
    if !cmp.Equal(Miles.ToFeet(0.07), 369.6, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 369.6, Miles.ToFeet(0.07));
    }
}

func TestConvertKnownMilesToYards(t * testing.T) {
    if !cmp.Equal(Miles.ToYards(0.07), 123.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 123.2, Miles.ToYards(0.07));
    }
    if !cmp.Equal(Miles.ToYards(2.0), 3520.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3520.0, Miles.ToYards(2.0));
    }
    if !cmp.Equal(Miles.ToYards(8.1), 14256.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 14256.0, Miles.ToYards(8.1));
    }
}

func TestConvertKnownMilesToNauticalMiles(t * testing.T) {
    if !cmp.Equal(Miles.ToNauticalMiles(8.1), 7.03871, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.03871, Miles.ToNauticalMiles(8.1));
    }
    if !cmp.Equal(Miles.ToNauticalMiles(0.8), 0.695181, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.695181, Miles.ToNauticalMiles(0.8));
    }
    if !cmp.Equal(Miles.ToNauticalMiles(1.2), 1.04277, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.04277, Miles.ToNauticalMiles(1.2));
    }
}

func TestConvertKnownMillimetresToCentimetres(t * testing.T) {
    if !cmp.Equal(Millimetres.ToCentimetres(900.0), 90.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 90.0, Millimetres.ToCentimetres(900.0));
    }
    if !cmp.Equal(Millimetres.ToCentimetres(190.0), 19.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 19.0, Millimetres.ToCentimetres(190.0));
    }
    if !cmp.Equal(Millimetres.ToCentimetres(5000.0), 500.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 500.0, Millimetres.ToCentimetres(5000.0));
    }
}

func TestConvertKnownMillimetresToMetres(t * testing.T) {
    if !cmp.Equal(Millimetres.ToMetres(1090.0), 1.09, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.09, Millimetres.ToMetres(1090.0));
    }
    if !cmp.Equal(Millimetres.ToMetres(9000.0), 9.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.0, Millimetres.ToMetres(9000.0));
    }
    if !cmp.Equal(Millimetres.ToMetres(12345.0), 12.345, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 12.345, Millimetres.ToMetres(12345.0));
    }
}

func TestConvertKnownMillimetresToKilometres(t * testing.T) {
    if !cmp.Equal(Millimetres.ToKilometres(109000.0), 0.109, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.109, Millimetres.ToKilometres(109000.0));
    }
    if !cmp.Equal(Millimetres.ToKilometres(9876543.0), 9.876543, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.876543, Millimetres.ToKilometres(9876543.0));
    }
    if !cmp.Equal(Millimetres.ToKilometres(900800.0), 0.9008, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.9008, Millimetres.ToKilometres(900800.0));
    }
}

func TestConvertKnownMillimetresToInches(t * testing.T) {
    if !cmp.Equal(Millimetres.ToInches(900.0), 35.4331, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 35.4331, Millimetres.ToInches(900.0));
    }
    if !cmp.Equal(Millimetres.ToInches(123.0), 4.84252, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.84252, Millimetres.ToInches(123.0));
    }
    if !cmp.Equal(Millimetres.ToInches(80.0), 3.14961, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.14961, Millimetres.ToInches(80.0));
    }
}

func TestConvertKnownMillimetresToFeet(t * testing.T) {
    if !cmp.Equal(Millimetres.ToFeet(800.0), 2.62467, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.62467, Millimetres.ToFeet(800.0));
    }
    if !cmp.Equal(Millimetres.ToFeet(1234.0), 4.048556, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.048556, Millimetres.ToFeet(1234.0));
    }
    if !cmp.Equal(Millimetres.ToFeet(600.8), 1.9711286, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.9711286, Millimetres.ToFeet(600.8));
    }
}

func TestConvertKnownMillimetresToYards(t * testing.T) {
    if !cmp.Equal(Millimetres.ToYards(800.0), 0.874891, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.874891, Millimetres.ToYards(800.0));
    }
    if !cmp.Equal(Millimetres.ToYards(1200.0), 1.312336, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.312336, Millimetres.ToYards(1200.0));
    }
    if !cmp.Equal(Millimetres.ToYards(909.0), 0.994094, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.994094, Millimetres.ToYards(909.0));
    }
}

func TestConvertKnownMillimetresToMiles(t * testing.T) {
    if !cmp.Equal(Millimetres.ToMiles(900000.0), 0.559234073, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.559234073, Millimetres.ToMiles(900000.0));
    }
    if !cmp.Equal(Millimetres.ToMiles(12345678.9), 7.671249217072, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7.671249217072, Millimetres.ToMiles(12345678.9));
    }
    if !cmp.Equal(Millimetres.ToMiles(100200300.0), 62.2615798735, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 62.2615798735, Millimetres.ToMiles(100200300.0));
    }
}

func TestConvertKnownMillimetresToNauticalMiles(t * testing.T) {
    if !cmp.Equal(Millimetres.ToNauticalMiles(9000000.0), 4.859611231, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 4.859611231, Millimetres.ToNauticalMiles(9000000.0));
    }
    if !cmp.Equal(Millimetres.ToNauticalMiles(12345678.0), 6.6661328294, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 6.6661328294, Millimetres.ToNauticalMiles(12345678.0));
    }
    if !cmp.Equal(Millimetres.ToNauticalMiles(926000.0), 0.5, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.5, Millimetres.ToNauticalMiles(926000.0));
    }
}

func TestConvertKnownNauticalMilesToMillimetres(t * testing.T) {
    if !cmp.Equal(NauticalMiles.ToMillimetres(0.08), 148160.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 148160.0, NauticalMiles.ToMillimetres(0.08));
    }
    if !cmp.Equal(NauticalMiles.ToMillimetres(0.001), 1852.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1852.0, NauticalMiles.ToMillimetres(0.001));
    }
    if !cmp.Equal(NauticalMiles.ToMillimetres(0.02), 37040.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 37040.0, NauticalMiles.ToMillimetres(0.02));
    }
}

func TestConvertKnownNauticalMilesToCentimetres(t * testing.T) {
    if !cmp.Equal(NauticalMiles.ToCentimetres(0.9), 166680.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 166680.0, NauticalMiles.ToCentimetres(0.9));
    }
    if !cmp.Equal(NauticalMiles.ToCentimetres(1.2), 222240.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 222240.0, NauticalMiles.ToCentimetres(1.2));
    }
    if !cmp.Equal(NauticalMiles.ToCentimetres(0.1), 18520.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 18520.0, NauticalMiles.ToCentimetres(0.1));
    }
}

func TestConvertKnownNauticalMilesToMetres(t * testing.T) {
    if !cmp.Equal(NauticalMiles.ToMetres(0.1), 185.2, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 185.2, NauticalMiles.ToMetres(0.1));
    }
    if !cmp.Equal(NauticalMiles.ToMetres(1.2), 2222.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2222.4, NauticalMiles.ToMetres(1.2));
    }
    if !cmp.Equal(NauticalMiles.ToMetres(89.0), 164828.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 164828.0, NauticalMiles.ToMetres(89.0));
    }
}

func TestConvertKnownNauticalMilesToKilometres(t * testing.T) {
    if !cmp.Equal(NauticalMiles.ToKilometres(23.0), 42.596, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 42.596, NauticalMiles.ToKilometres(23.0));
    }
    if !cmp.Equal(NauticalMiles.ToKilometres(1.7), 3.1484, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3.1484, NauticalMiles.ToKilometres(1.7));
    }
    if !cmp.Equal(NauticalMiles.ToKilometres(56.0), 103.712, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 103.712, NauticalMiles.ToKilometres(56.0));
    }
}

func TestConvertKnownNauticalMilesToInches(t * testing.T) {
    if !cmp.Equal(NauticalMiles.ToInches(0.1), 7291.34, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 7291.34, NauticalMiles.ToInches(0.1));
    }
    if !cmp.Equal(NauticalMiles.ToInches(2.0), 145826.7999, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 145826.7999, NauticalMiles.ToInches(2.0));
    }
    if !cmp.Equal(NauticalMiles.ToInches(3.5), 255196.899, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 255196.899, NauticalMiles.ToInches(3.5));
    }
}

func TestConvertKnownNauticalMilesToFeet(t * testing.T) {
    if !cmp.Equal(NauticalMiles.ToFeet(1.4), 8506.56, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 8506.56, NauticalMiles.ToFeet(1.4));
    }
    if !cmp.Equal(NauticalMiles.ToFeet(0.1), 607.612, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 607.612, NauticalMiles.ToFeet(0.1));
    }
    if !cmp.Equal(NauticalMiles.ToFeet(8.9), 54077.4680, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 54077.4680, NauticalMiles.ToFeet(8.9));
    }
}

func TestConvertKnownNauticalMilesToYards(t * testing.T) {
    if !cmp.Equal(NauticalMiles.ToYards(9.0), 18228.329, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 18228.329, NauticalMiles.ToYards(9.0));
    }
    if !cmp.Equal(NauticalMiles.ToYards(1.5), 3038.06, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 3038.06, NauticalMiles.ToYards(1.5));
    }
    if !cmp.Equal(NauticalMiles.ToYards(0.8), 1620.3, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1620.3, NauticalMiles.ToYards(0.8));
    }
}

func TestConvertKnownNauticalMilesToMiles(t * testing.T) {
    if !cmp.Equal(NauticalMiles.ToMiles(0.5), 0.57539, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.57539, NauticalMiles.ToMiles(0.5));
    }
    if !cmp.Equal(NauticalMiles.ToMiles(23.0), 26.4679, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 26.4679, NauticalMiles.ToMiles(23.0));
    }
    if !cmp.Equal(NauticalMiles.ToMiles(8.2), 9.43639, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 9.43639, NauticalMiles.ToMiles(8.2));
    }
}

func TestConvertKnownYardsToMillimetres(t * testing.T) {
    if !cmp.Equal(Yards.ToMillimetres(34.0), 31089.6, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 31089.6, Yards.ToMillimetres(34.0));
    }
    if !cmp.Equal(Yards.ToMillimetres(0.9), 822.96, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 822.96, Yards.ToMillimetres(0.9));
    }
    if !cmp.Equal(Yards.ToMillimetres(2.0), 1828.8, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1828.8, Yards.ToMillimetres(2.0));
    }
}

func TestConvertKnownYardsToCentimetres(t * testing.T) {
    if !cmp.Equal(Yards.ToCentimetres(9.8), 896.112, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 896.112, Yards.ToCentimetres(9.8));
    }
    if !cmp.Equal(Yards.ToCentimetres(0.8), 73.152, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 73.152, Yards.ToCentimetres(0.8));
    }
    if !cmp.Equal(Yards.ToCentimetres(12.0), 1097.28, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1097.28, Yards.ToCentimetres(12.0));
    }
}

func TestConvertKnownYardsToMetres(t * testing.T) {
    if !cmp.Equal(Yards.ToMetres(12.0), 10.9728, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 10.9728, Yards.ToMetres(12.0));
    }
    if !cmp.Equal(Yards.ToMetres(0.7), 0.64008, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.64008, Yards.ToMetres(0.7));
    }
    if !cmp.Equal(Yards.ToMetres(3.0), 2.7432, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.7432, Yards.ToMetres(3.0));
    }
}

func TestConvertKnownYardsToKilometres(t * testing.T) {
    if !cmp.Equal(Yards.ToKilometres(400.0), 0.36576, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.36576, Yards.ToKilometres(400.0));
    }
    if !cmp.Equal(Yards.ToKilometres(1900.0), 1.73736, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 1.73736, Yards.ToKilometres(1900.0));
    }
    if !cmp.Equal(Yards.ToKilometres(12345.0), 11.288268, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 11.288268, Yards.ToKilometres(12345.0));
    }
}

func TestConvertKnownYardsToInches(t * testing.T) {
    if !cmp.Equal(Yards.ToInches(23.0), 828.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 828.0, Yards.ToInches(23.0));
    }
    if !cmp.Equal(Yards.ToInches(0.9), 32.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 32.4, Yards.ToInches(0.9));
    }
    if !cmp.Equal(Yards.ToInches(12.0), 432.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 432.0, Yards.ToInches(12.0));
    }
}

func TestConvertKnownYardsToFeet(t * testing.T) {
    if !cmp.Equal(Yards.ToFeet(12.0), 36.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 36.0, Yards.ToFeet(12.0));
    }
    if !cmp.Equal(Yards.ToFeet(1.8), 5.4, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.4, Yards.ToFeet(1.8));
    }
    if !cmp.Equal(Yards.ToFeet(67.0), 201.0, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 201.0, Yards.ToFeet(67.0));
    }
}

func TestConvertKnownYardsToMiles(t * testing.T) {
    if !cmp.Equal(Yards.ToMiles(8900.0), 5.056818, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 5.056818, Yards.ToMiles(8900.0));
    }
    if !cmp.Equal(Yards.ToMiles(5000.0), 2.840909, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 2.840909, Yards.ToMiles(5000.0));
    }
    if !cmp.Equal(Yards.ToMiles(123456.0), 70.1454545, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 70.1454545, Yards.ToMiles(123456.0));
    }
}

func TestConvertKnownYardsToNauticalMiles(t * testing.T) {
    if !cmp.Equal(Yards.ToNauticalMiles(1000.0), 0.493737, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 0.493737, Yards.ToNauticalMiles(1000.0));
    }
    if !cmp.Equal(Yards.ToNauticalMiles(202020.0), 99.7446479, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 99.7446479, Yards.ToNauticalMiles(202020.0));
    }
    if !cmp.Equal(Yards.ToNauticalMiles(71928.0), 35.513479, withinTolerance()) {
        t.Fatalf("Expected %f, was %f", 35.513479, Yards.ToNauticalMiles(71928.0));
    }
}

